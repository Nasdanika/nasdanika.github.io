var searchDocuments = {"modules/togaf/modules/adm/issues/deliverables-and-artifacts-folders/index.html":{"path":"Products/TOGAF/ADM/Issues/Deliverables and Artifacts folders","title":"Deliverables and Artifacts folders","content":"Section 32 Deliverables under deliverables. Artifacts as it goes or look throug the TOC. Origin adm/engineering.yml 11:5 Uri engineering://nasdanika/modules/togaf/modules/adm/issues/deliverables-and-artifacts-folders Target ADM Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/TableRowContainer.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableRowContainer","title":"TableRowContainer","content":"org.nasdanika.html.model.bootstrap.TableRowContainer Base class for containers of rows - table, header, body, footer. Supertypes BootstrapElement Subtypes Table TableSection References rows : TableRow* Table rows. Type TableRow Cardinality 0..* Changeable true Derived false rows : TableRow* Table rows. Type TableRow Cardinality 0..* Changeable true Derived false Table rows. Type TableRow Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Float.html":{"path":"Products/HTML/Models/Bootstrap/Model/Float","title":"Float","content":"org.nasdanika.html.model.bootstrap.Float Defines element floating - left or right - for a given breakpoint. Referrers Appearance Attributes breakpoint : Breakpoint Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false side : EString Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false breakpoint : Breakpoint Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false side : EString Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false"},"modules/core/modules/flow/features.html":{"path":"Products/Core/Flow/Features","title":"Features","content":"Visualizations Inheritance Responsibility Assignments (RACI) Data Provenance Validation"},"principles/spa/index.html":{"path":"Principles/Single-page Applications","title":"Single-page Applications","content":"Implement dynamic behavior using Single Page Applications built with Vue and BootstrapVue, add them to static sites generated from models. Generate application input data from source models. Create backing services as needed. Origin engineering/nasdanika.yml 65:5 Uri engineering://nasdanika/principles/spa"},"modules/core/modules/ncore/Marker.html":{"path":"Products/Core/Ncore/Marker","title":"Marker","content":"org.nasdanika.ncore.Marker Supertypes IMarker Subtypes GitMarker Referrers Marked Attributes column : EInt Type EInt Cardinality 0..1 Changeable true Derived false line : EInt Type EInt Cardinality 0..1 Changeable true Derived false location : EString Type EString Cardinality 0..1 Changeable true Derived false column : EInt Type EInt Cardinality 0..1 Changeable true Derived false line : EInt Type EInt Cardinality 0..1 Changeable true Derived false location : EString Type EString Cardinality 0..1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false"},"modules/core/releases/2021-12-2/index.html":{"path":"Products/Core/Releases/2021.12.2","title":"2021.12.2","content":"Origin engineering.yml 5:5 Uri engineering://nasdanika/modules/core/releases/2021-12-2 Start Dec 6, 2021 End Dec 13, 2021 Duration 7 days Increment December Issues Issue Module Increment Start End Duration Completion Action prototype Ncore 100% Issue Module Increment Start End Duration Completion Action prototype Ncore 100%"},"modules/html/index.html":{"path":"Products/HTML","title":"HTML","content":"Origin engineering.yml 1:1 Uri engineering://nasdanika/modules/html"},"modules/html/modules/bootstrap/issues/upgrade-to-bootstrap-5/index.html":{"path":"Products/HTML/Bootstrap/Issues/Updgrade to Bootstrap 5","title":"Updgrade to Bootstrap 5","content":"https://getbootstrap.com/docs/5.0/migration/ Origin bootstrap/engineering.yml 8:5 Uri engineering://nasdanika/modules/html/modules/bootstrap/issues/upgrade-to-bootstrap-5 Total cost 40.0 Effort 40.0 Remaining effort 40.0 Target Bootstrap Workable"},"modules/core/modules/ncore/StringEntry.html":{"path":"Products/Core/Ncore/StringEntry","title":"StringEntry","content":"java.util.Map.Entry EMap entry with String value Referrers GitMarker Attributes key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EString Type EString Cardinality 0..1 Changeable true Derived false key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EString Type EString Cardinality 0..1 Changeable true Derived false Artifact key. Type EString Cardinality 1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/issues/pseudo-state-links/index.html":{"path":"Products/Core/Flow/Issues/Pseudo-state links","title":"Pseudo-state links","content":"Add links to pseudo-states - supported by Drawio. If linked then shall have an action - need a flag to indicate that it is a real state. Maybe a way to have real states rendered as pseudo-states. Origin flow/engineering/engineering.yml 76:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/pseudo-state-links Target Flow Workable"},"modules/engineering/index.html":{"path":"Products/Engineering","title":"Engineering","content":"Origin engineering.yml 1:1 Uri engineering://nasdanika/modules/engineering"},"modules/core/modules/flow/Transition.html":{"path":"Products/Core/Flow/Transition","title":"Transition","content":"org.nasdanika.flow.Transition Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\transition.md (The system cannot find the path specified) Supertypes PackageElement<Transition> Subtypes Call Referrers Artifact FlowElement TransitionEntry Uses Transition Attributes payloadKeys : EString* Keys of payload artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false targetKey : EString Key of transition target relative to the containing flow elements/ reference. Type EString Cardinality 1 Changeable true Derived false References payload : Artifact* Artifacts passed from source to target activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite payloadFor target : FlowElement<?> Transition target. Type FlowElement<?> Cardinality 0..1 Changeable false Derived true payloadKeys : EString* Keys of payload artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false targetKey : EString Key of transition target relative to the containing flow elements/ reference. Type EString Cardinality 1 Changeable true Derived false Keys of payload artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false Key of transition target relative to the containing flow elements/ reference. Type EString Cardinality 1 Changeable true Derived false payload : Artifact* Artifacts passed from source to target activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite payloadFor target : FlowElement<?> Transition target. Type FlowElement<?> Cardinality 0..1 Changeable false Derived true Artifacts passed from source to target activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite payloadFor Transition target. Type FlowElement<?> Cardinality 0..1 Changeable false Derived true"},"modules/core/modules/ncore/EObjectProperty.html":{"path":"Products/Core/Ncore/EObjectProperty","title":"EObjectProperty","content":"org.nasdanika.ncore.EObjectProperty Supertypes Property References value : EObject Type EObject Cardinality 1 Changeable true Derived false value : EObject Type EObject Cardinality 1 Changeable true Derived false Type EObject Cardinality 1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Accordion.html":{"path":"Products/HTML/Models/Bootstrap/Model/Accordion","title":"Accordion","content":"org.nasdanika.html.model.bootstrap.Accordion"},"modules/html/modules/models/modules/bootstrap/modules/model/Modal.html":{"path":"Products/HTML/Models/Bootstrap/Model/Modal","title":"Modal","content":"org.nasdanika.html.model.bootstrap.Modal Supertypes BootstrapElement Referrers Label Link Attributes centered : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false dismisser : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false scrollable : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false size : EString Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false References body : BootstrapElement Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false centered : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false dismisser : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false scrollable : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false size : EString Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false body : BootstrapElement Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/PackageEntry.html":{"path":"Products/Core/Flow/PackageEntry","title":"PackageEntry","content":"java.util.Map.Entry Mapping of sub-package key to a sub-package. Null value suppresses inherited entry. Referrers Package Attributes key : EString Sub-package key. Type EString Cardinality 1 Changeable true Derived false References value : Package Sub-package. Use null to suppress inherited sub-package. Type Package Cardinality 0..1 Changeable true Derived false key : EString Sub-package key. Type EString Cardinality 1 Changeable true Derived false Sub-package key. Type EString Cardinality 1 Changeable true Derived false value : Package Sub-package. Use null to suppress inherited sub-package. Type Package Cardinality 0..1 Changeable true Derived false Sub-package. Use null to suppress inherited sub-package. Type Package Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/Engineer.html":{"path":"Products/Engineering/Model/Engineer","title":"Engineer","content":"org.nasdanika.engineering.Engineer Engineers are entities, people or organizations, owning engineered elements and working on endeavors, e.g. issues. Engineer extends Persona and as such can have goals. Because Persona extends Engineered Element it may have issues associated with it. When applied to an Engineers it may be development issues, e.g. training. Say, Joe Doe may have an issue \u201cTeam lead training\u201d assigned to Jim Smith, his supervisor. What it means that Jim trains Joe and it is tracked in the same way as tracking of product development, i.e. you can develop (engineer) your organization in the same way you develop (engineer) products and services offered by your organization. Engineers may have capacity to work on endeavors and that capacity can be allocated to engineered elements and issue categories. In addition to owning engineered elements, engineers may have expertise in them. Ownership primarily means authority to make decisions about the owned elements. Expertise means knowledge of how to use them. Usually ownership assumes expertise, although the owner may consult the experts and then make decisions base on their inputs. Owners and experts form a community for an engineered element. Engineer may define increments, issue categories, and issue statuses. Typically it would be done at the top-level organization. Engineer may define personas and represent them. E.g. in an organization there might be a \u201cDeveloper\u201d persona defined at the \u201cDeveloper Experience\u201d organization and represented by developers. This allows to define personal goals by interviewing the representatives and then align organizaiton\u2019s endeavors to the persona goals. Engineers may also have objectives associated with endeavors, e.g. increments. E.g. \u201cDeveloper\u201d persona may have a goal \u201cAutomate routine tasks\u201d and there might be an annual objective \u201cCreate code generators\u201d aligned to that goal. Then, subsequently, a feature \u201cCloud microservice code generator\u201d can be aligned to the \u201cCreate code generators\u201d objective or it\u2019s key result, say \u201c5 code generators for the cloud\u201d. Engineers may contain modules. E.g. a team may contain libraries developed by the team and then ownership of these libraries may be assigned to team members. Engineers may also provide services - shared activities used by other engineers or personas. For example, a performance testing team may provide a testing service used by development teams to performance test modules they own. Services may be defined as journeys leveraging services provided by other engineers. For example, the performance team\u2019s service \u201cPerformance test an application\u201d may use a service \u201cProvision cloud environment\u201d provided by the cloud infrastructure team. And, finally, engineers may post messages to topics of discussion forums. Supertypes Persona Subtypes Organization Referrers Allocation Endeavor EngineeredElement Message Note Organization Persona Attributes rate : EDouble Default engineer rate. Can be customized in capacity. Type EDouble Cardinality 0..1 Changeable true Derived false References assignments : Endeavor* Engineer assignments. Type Endeavor Cardinality 0..* Changeable false Derived true Opposite assignee capacity : Capacity* Engineer\u2019s capacity for a particular endeavor Type Capacity Cardinality 0..* Changeable true Derived false designations : Allocation* Allocations of this engineer\u2019s capacity to work on an engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite engineer domains : Domain* Engineer\u2019s domains Type Domain Cardinality 0..* Changeable true Derived false expertise : EngineeredElement* Engineered element which this engineer has experience with. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite experts increments : Increment* Increments are defined under engineer/organization. Type Increment Cardinality 0..* Changeable true Derived false issueCategories : IssueCategory* Issue categories are defined under engineer/organization. Type IssueCategory Cardinality 0..* Changeable true Derived false issuePriorities : IssuePriority* Issue priorities are defined under engineer/organization. Type IssuePriority Cardinality 0..* Changeable true Derived false issueSeverities : IssueSeverity* Issue severities are defined under engineer/organization. Type IssueSeverity Cardinality 0..* Changeable true Derived false issueStatuses : IssueStatus* Issue statuses are defined under engineer/organization. Type IssueStatus Cardinality 0..* Changeable true Derived false messages : Message* Discussion messages authored by this engineer. Type Message Cardinality 0..* Changeable false Derived true Opposite author modules : Module* Modules (products) are defined under engineer or organization. Type Module Cardinality 0..* Changeable true Derived false objectives : Objective* Engineer\u2019s objectives for a particular endeavor Type Objective Cardinality 0..* Changeable true Derived false owns : EngineeredElement* Engineered elements owned by this engineer. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite owners personas : Persona* Personas which this engineer/organization builds products for. Type Persona Cardinality 0..* Changeable true Derived false represents : Persona* Personas which this engineer represents. Type Persona Cardinality 0..* Changeable false Derived true Opposite representatives services : Activity* Engineer may perform shared activities (services) which can be parts of persona journeys. Type Activity Cardinality 0..* Changeable true Derived false rate : EDouble Default engineer rate. Can be customized in capacity. Type EDouble Cardinality 0..1 Changeable true Derived false Default engineer rate. Can be customized in capacity. Type EDouble Cardinality 0..1 Changeable true Derived false assignments : Endeavor* Engineer assignments. Type Endeavor Cardinality 0..* Changeable false Derived true Opposite assignee capacity : Capacity* Engineer\u2019s capacity for a particular endeavor Type Capacity Cardinality 0..* Changeable true Derived false designations : Allocation* Allocations of this engineer\u2019s capacity to work on an engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite engineer domains : Domain* Engineer\u2019s domains Type Domain Cardinality 0..* Changeable true Derived false expertise : EngineeredElement* Engineered element which this engineer has experience with. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite experts increments : Increment* Increments are defined under engineer/organization. Type Increment Cardinality 0..* Changeable true Derived false issueCategories : IssueCategory* Issue categories are defined under engineer/organization. Type IssueCategory Cardinality 0..* Changeable true Derived false issuePriorities : IssuePriority* Issue priorities are defined under engineer/organization. Type IssuePriority Cardinality 0..* Changeable true Derived false issueSeverities : IssueSeverity* Issue severities are defined under engineer/organization. Type IssueSeverity Cardinality 0..* Changeable true Derived false issueStatuses : IssueStatus* Issue statuses are defined under engineer/organization. Type IssueStatus Cardinality 0..* Changeable true Derived false messages : Message* Discussion messages authored by this engineer. Type Message Cardinality 0..* Changeable false Derived true Opposite author modules : Module* Modules (products) are defined under engineer or organization. Type Module Cardinality 0..* Changeable true Derived false objectives : Objective* Engineer\u2019s objectives for a particular endeavor Type Objective Cardinality 0..* Changeable true Derived false owns : EngineeredElement* Engineered elements owned by this engineer. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite owners personas : Persona* Personas which this engineer/organization builds products for. Type Persona Cardinality 0..* Changeable true Derived false represents : Persona* Personas which this engineer represents. Type Persona Cardinality 0..* Changeable false Derived true Opposite representatives services : Activity* Engineer may perform shared activities (services) which can be parts of persona journeys. Type Activity Cardinality 0..* Changeable true Derived false Engineer assignments. Type Endeavor Cardinality 0..* Changeable false Derived true Opposite assignee Engineer\u2019s capacity for a particular endeavor Type Capacity Cardinality 0..* Changeable true Derived false Allocations of this engineer\u2019s capacity to work on an engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite engineer Engineer\u2019s domains Type Domain Cardinality 0..* Changeable true Derived false Engineered element which this engineer has experience with. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite experts Increments are defined under engineer/organization. Type Increment Cardinality 0..* Changeable true Derived false Issue categories are defined under engineer/organization. Type IssueCategory Cardinality 0..* Changeable true Derived false Issue priorities are defined under engineer/organization. Type IssuePriority Cardinality 0..* Changeable true Derived false Issue severities are defined under engineer/organization. Type IssueSeverity Cardinality 0..* Changeable true Derived false Issue statuses are defined under engineer/organization. Type IssueStatus Cardinality 0..* Changeable true Derived false Discussion messages authored by this engineer. Type Message Cardinality 0..* Changeable false Derived true Opposite author Modules (products) are defined under engineer or organization. Type Module Cardinality 0..* Changeable true Derived false Engineer\u2019s objectives for a particular endeavor Type Objective Cardinality 0..* Changeable true Derived false Engineered elements owned by this engineer. Type EngineeredElement Cardinality 0..* Changeable false Derived true Opposite owners Personas which this engineer/organization builds products for. Type Persona Cardinality 0..* Changeable true Derived false Personas which this engineer represents. Type Persona Cardinality 0..* Changeable false Derived true Opposite representatives Engineer may perform shared activities (services) which can be parts of persona journeys. Type Activity Cardinality 0..* Changeable true Derived false"},"modules/core/modules/cli/index.html":{"path":"Products/Core/CLI","title":"CLI","content":"Origin cli/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/cli Dependencies Common Dependants EMF"},"modules/html/modules/models/modules/bootstrap/modules/model/ButtonToolbar.html":{"path":"Products/HTML/Models/Bootstrap/Model/ButtonToolbar","title":"ButtonToolbar","content":"org.nasdanika.html.model.bootstrap.ButtonToolbar"},"modules/engineering/modules/model/ModelElement.html":{"path":"Products/Engineering/Model/ModelElement","title":"ModelElement","content":"org.nasdanika.engineering.ModelElement Model element is the root class for all other model classes. It has path attribute which is used to compute model element\u2019s uri and also model element\u2019s URL in the UI. It also has two attributes for authoring element descriptions - description and markdownDescription. If both attributes are present then the value of the description is concatenated with the renderd value of markdownDescription. Authoring descriptions This section outlines different options for authoring descriptions. Inline Inline descriptions are provided in YAML files themselves. The approach is convenient for relatively short descriptions, e.g. to quickly capture an issue. HTML Single line - name: Sliding navigation panel\n   description: Ability to hide if it takes too much real estate and then bring back. Navigation toggle context action with just an icon.       \n Multi-line - name: Engineers feature action\n  description: |+2\n    Table with engineer name and stats - owns, expert, number of issues, number of messages.\n    Provisions for additional stats - context service. E.g. number of commits.       \n Markdown Just use markdown-description key instead of description key. Single line - name: Progress bars in for percentages\n  markdown-description: \"[Bootstrap progress bar](https://getbootstrap.com/docs/4.0/components/progress/#labels)\"  \n Multi-line - name: ModelElement tags\n  markdown-description: |+2\n    Property class - value (multi-string, default feature), description and markdown description. PropertyEntry class - String key, Property value.\n    [EMap](https://wiki.eclipse.org/EMF/FAQ#How_do_I_create_a_Map_in_EMF.3F) tags at ModelElement level. Possible use - aliasing. Maybe name ``properties`` and use wider, e.g. to customize behavior.\n    Render as a table in a feature action.                       \n Loaded from a resource Long descriptions are better kepts in their own files. To do so, add exec-resource key with the value of a URL of the resource containing the element description. The URL is resolved relative to the current YAML file URL. HTML - name: Sliding navigation panel\n   description: \n     exec-resource: sliding-navigation-panel.txt       \n Markdown - name: ModelElement tags\n  markdown-description: \n    exec-resource: descriptions/model-element-tags.md \n Replacement tokens (Interpolation) Description text may contain replacement tokens to simplify authoring, e.g. to cross-reference model elements using their URI\u2019s. You may use context properties as tokens plus the tokens listed in the table below: Token Description Example base-uri A relative path to the root of hte site without a trailing slash [Root](${base-uri}/index.html) doc-uri A relative path to the root of the documentation site with a trailing slash. This token is available only if the generation context has doc-uri property. [Model Element](${doc-uri}engineering/ModelElement.html) embedded-image/<image type>/<image URL> [<caption>] Reads an image from the URL resolved relative to the model resource URL. Encodes as an embedded image. If there is a caption separated from the URL by a space, then the image is wrapped into a table with the caption below the image. ${embedded-image/png/logo.png}, ${embedded-image/png/my-screenshot.png Screenshot description} embedded-image-data/<image type>/<image URL>] Reads an image from the URL resolved relative to the model resource URL. Encodes as an embedded image data - the src attribute. Can be used to include images in markdown without HTML blocks. ![logo](${embedded-image-data/png/logo.png}) include/<resource URL> Reads, interpolates, and includes a resource at the URL resolved relative to the model resource URL. ${include/report.html} include-markdown/<resource URL> Reads a resource at the URL resolved relative to the model resource URL. Renders Markdown to HTML. Interpolates and includes. ${include-markdown/report.md} Diagrams PlantUML diagrams can be embedded into markdown using fenced code blocks with the following language specifications: uml - for the following diagram types: Sequence, Use Case, Class, Activity, Component, State, Object, Deployment, Timing, Network. wireframe - for Wireframe diagrams gantt - for Gantt diagrams mindmap - for Mind Maps wbs - for Work Breakdown Structures Examples UML Sequence Fenced block: ```uml\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n```\n Diagram: Alice -> Bob: Authentication Request Bob --> Alice: Authentication Response UML Component Component diagram with links to component pages. Fenced block: ```uml\npackage Core {\n   component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]]\n}\n\npackage HTML {\n   component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]]\n   [html] ..> [Common]\n}\n```\n Diagram: package Core { component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]] } package HTML { component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]] [html] ..> [Common] } Wireframe Fenced block: ```wireframe\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n```\n Diagram: { Just plain text [This is my button] () Unchecked radio (X) Checked radio [] Unchecked box [X] Checked box \"Enter text here \" ^This is a droplist^ } Gantt Fenced block: ```gantt\n[Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]]\n[Test prototype] lasts 10 days\n-- All example --\n[Task 1 (1 day)] lasts 1 day\n[T2 (5 days)] lasts 5 days\n[T3 (1 week)] lasts 1 week\n[T4 (1 week and 4 days)] lasts 1 week and 4 days\n[T5 (2 weeks)] lasts 2 weeks\n```\n Diagram: [Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]] [Test prototype] lasts 10 days -- All example -- [Task 1 (1 day)] lasts 1 day [T2 (5 days)] lasts 5 days [T3 (1 week)] lasts 1 week [T4 (1 week and 4 days)] lasts 1 week and 4 days [T5 (2 weeks)] lasts 2 weeks Mind Map Fenced block: ```mindmap\n* Debian\n** [[https://ubuntu.com/ Ubuntu]]\n*** Linux Mint\n*** Kubuntu\n*** Lubuntu\n*** KDE Neon\n** LMDE\n** SolydXK\n** SteamOS\n** Raspbian with a very long name\n*** <s>Raspmbc<\/s> => OSMC\n*** <s>Raspyfi<\/s> => Volumio\n```\n Diagram: * Debian ** [[https://ubuntu.com/ Ubuntu]] *** Linux Mint *** Kubuntu *** Lubuntu *** KDE Neon ** LMDE ** SolydXK ** SteamOS ** Raspbian with a very long name *** <s>Raspmbc<\/s> => OSMC *** <s>Raspyfi<\/s> => Volumio WBS WBS elements can have links. This type of diagram can also be used to display organization structure. ```wbs\n* [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]]\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n```\n Fenced block: Diagram: * [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]] ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase Sections and Table of Contents Long description can be broken down into multiple sections. If you use sections you can define a table of contents. Note that in order for the table of contents links work section-style shall be set to DEFAULT. Extensions Table of contents - add [TOC] to the document as explained in the documentation. This extension will create a table of contents from markdown headers. It is complementary to the table of contents created from sections. Footnotes Strikethrough: ~~strikethrough~~-> strikethrough Subscript: H~2~O -> H20 Superscript: 2^5^ = 32 -> 25 = 32 Supertypes ModelElement Subtypes Alignment Capacity Endeavor NamedElement Note Attributes path : EString Resources associated with the element, e.g. documentation. Type EString Cardinality 1 Changeable true Derived false References documentation : EObject* Type EObject Cardinality 0..* Changeable true Derived false representations : Diagram* Pluggable representations of a model element, e.g. a component diagram for engineers and modules. Type Diagram Cardinality 0..* Changeable true Derived false resources : NamedElement* Resources associated with the element, e.g. documentation. Type NamedElement Cardinality 0..* Changeable true Derived false sections : Document* Sections for model element descriptions. In documents sections apply to the document content, i.e. document descriptions cannot have sections. Sections can be nested. Type Document Cardinality 0..* Changeable true Derived false tableOfContents : TableOfContents Type TableOfContents Cardinality 0..1 Changeable true Derived false path : EString Resources associated with the element, e.g. documentation. Type EString Cardinality 1 Changeable true Derived false Resources associated with the element, e.g. documentation. Type EString Cardinality 1 Changeable true Derived false documentation : EObject* Type EObject Cardinality 0..* Changeable true Derived false representations : Diagram* Pluggable representations of a model element, e.g. a component diagram for engineers and modules. Type Diagram Cardinality 0..* Changeable true Derived false resources : NamedElement* Resources associated with the element, e.g. documentation. Type NamedElement Cardinality 0..* Changeable true Derived false sections : Document* Sections for model element descriptions. In documents sections apply to the document content, i.e. document descriptions cannot have sections. Sections can be nested. Type Document Cardinality 0..* Changeable true Derived false tableOfContents : TableOfContents Type TableOfContents Cardinality 0..1 Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false Pluggable representations of a model element, e.g. a component diagram for engineers and modules. Type Diagram Cardinality 0..* Changeable true Derived false Resources associated with the element, e.g. documentation. Type NamedElement Cardinality 0..* Changeable true Derived false Sections for model element descriptions. In documents sections apply to the document content, i.e. document descriptions cannot have sections. Sections can be nested. Type Document Cardinality 0..* Changeable true Derived false Type TableOfContents Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/exec/modules/model/content/Interpolator.html":{"path":"Products/Core/Exec/Model/Content/Interpolator","title":"Interpolator","content":"org.nasdanika.exec.content.Interpolator Converts input stream to String using context charset, which defaults to UTF-8, interpolates, and converts back to input stream using context charset. Supertypes Filter Attributes base : EString Optional base URL for resolving include and image URL\u2019s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false processIncludes : EBoolean If true (default) processes: ${embedded-image/<image type>/<image url>} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/<resource url>} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false base : EString Optional base URL for resolving include and image URL\u2019s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false processIncludes : EBoolean If true (default) processes: ${embedded-image/<image type>/<image url>} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/<resource url>} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false Optional base URL for resolving include and image URL\u2019s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false If true (default) processes: ${embedded-image/<image type>/<image url>} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/<resource url>} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/<resource url>} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/FormGroup.html":{"path":"Products/HTML/Models/Bootstrap/Model/FormGroup","title":"FormGroup","content":"org.nasdanika.html.model.bootstrap.FormGroup"},"modules/html/modules/models/modules/bootstrap/modules/model/Text.html":{"path":"Products/HTML/Models/Bootstrap/Model/Text","title":"Text","content":"org.nasdanika.html.model.bootstrap.Text Text styling. Referrers Appearance Attributes alignment : TextAlignment Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false color : Color Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false italic : EBoolean Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false monospace : EBoolean Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false nowrap : EBoolean Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false transform : TextTransform Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false truncate : EBoolean Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : TextWeight Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false alignment : TextAlignment Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false color : Color Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false italic : EBoolean Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false monospace : EBoolean Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false nowrap : EBoolean Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false transform : TextTransform Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false truncate : EBoolean Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : TextWeight Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/issues/event-to-ncore/index.html":{"path":"Products/Engineering/Model/Issues/Move Event to Ncore","title":"Move Event to Ncore","content":"Origin model/engineering.yml 9:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/event-to-ncore Target Model Workable"},"modules/core/modules/flow/PseudoState.html":{"path":"Products/Core/Flow/PseudoState","title":"PseudoState","content":"org.nasdanika.flow.PseudoState Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\pseudo-state.md (The system cannot find the path specified) Supertypes FlowElement<PseudoState> Subtypes Choice End EntryPoint ExitPoint ExpansionInput ExpansionOutput Fork InputPin Join OutputPin Start Uses PseudoState Attributes type : EString Pseudo-state type provided by concrete sub-classes. Type EString Cardinality 0..1 Changeable false Derived true type : EString Pseudo-state type provided by concrete sub-classes. Type EString Cardinality 0..1 Changeable false Derived true Pseudo-state type provided by concrete sub-classes. Type EString Cardinality 0..1 Changeable false Derived true"},"issue-severities/medium/index.html":{"path":"Issue/Severities/Medium","title":"Medium","content":"Origin engineering/nasdanika.yml 47:5 Uri engineering://nasdanika/issue-severities/medium"},"modules/html/modules/models/modules/app/modules/gen/issues/content-modes/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters/Issues/Content modes","title":"Content modes","content":"Add configuration to select content row modes - cols (the current implementation), cols-nowrap (add flex-nowrap class to the row), table. At the action level. For the principal action works on the content row, for other actions works in a similar way with left and right content panels. Origin model/app.gen/engineering.yml 28:6 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen/issues/content-modes Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generation Adapters Workable"},"modules/html/modules/models/issues/bootstrap-vue/index.html":{"path":"Products/HTML/Models/Issues/BootstrapVue model and generation adapters","title":"BootstrapVue model and generation adapters","content":"Extends Bootstrap element for styling, appearance. Also extends Vue inteface for directives Create issues for components, implement table first for issues Origin model/engineering.yml 26:5 Uri engineering://nasdanika/modules/html/modules/models/issues/bootstrap-vue Target Models Workable"},"modules/core/modules/diagram/modules/model/Start.html":{"path":"Products/Core/Diagram/Model/Start","title":"Start","content":"org.nasdanika.diagram.Start Start pseudo-state. Supertypes DiagramElement"},"increments/2022/children/Q3/children/sep/index.html":{"path":"Increments/2022/Q3/September","title":"September","content":"Origin engineering/nasdanika.yml 141:13 Uri engineering://nasdanika/increments/2022/children/Q3/children/sep Start Sep 1, 2022 End Oct 1, 2022 Duration 30 days"},"modules/engineering/modules/model/Module.html":{"path":"Products/Engineering/Model/Module","title":"Module","content":"org.nasdanika.engineering.Module Module is a part of product or another module. Product is a sub-class of Module. Module is an engineered element contained by an engineer. Module, and as such product, can contain sub-modules. Supertypes EngineeredElement Subtypes Product Referrers Engineer Module References dependants : Module* Derived opposite to dependencies - modules which depend on this module. Type Module Cardinality 0..* Changeable false Derived true Opposite dependencies dependencies : Module* Modules which this module depends on. Type Module Cardinality 0..* Changeable true Derived false Opposite dependants modules : Module* Sub-modules of this module. Type Module Cardinality 0..* Changeable true Derived false dependants : Module* Derived opposite to dependencies - modules which depend on this module. Type Module Cardinality 0..* Changeable false Derived true Opposite dependencies dependencies : Module* Modules which this module depends on. Type Module Cardinality 0..* Changeable true Derived false Opposite dependants modules : Module* Sub-modules of this module. Type Module Cardinality 0..* Changeable true Derived false Derived opposite to dependencies - modules which depend on this module. Type Module Cardinality 0..* Changeable false Derived true Opposite dependencies Modules which this module depends on. Type Module Cardinality 0..* Changeable true Derived false Opposite dependants Sub-modules of this module. Type Module Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/Endeavor.html":{"path":"Products/Engineering/Model/Endeavor","title":"Endeavor","content":"org.nasdanika.engineering.Endeavor Endeavor is a base class for things which take time, effort, and money to achieve some benefit - increments, and engineered capabilities - issues, features, and releases. Endeavor may be assigned an engineer responsible for the endeavor completion. Endeavor may contain objectives and be associated with engineer\u2019s objectives. Engineers may have a certain amount of capacity for a given endeavor, which can be allocated to be spent on engineered elements and issue categories. E.g. Joe Doe may have capacity of 80 hours in May and 20 hours of that capacity may be allocated to work on documenting module X. Supertypes ModelElement Period Alignable Subtypes EngineeredCapability Increment Referrers Capacity Engineer Objective Attributes benefit : EDouble Number representing benefit of this endeavor. Can be explicitly provided or derived. Type EDouble Cardinality 0..1 Changeable true Derived false completion : EDouble Number between 0 and 1. Type EDouble Cardinality 0..1 Changeable false Derived true totalCost : EDouble Total cost of the endeavor includes both cost and labor multiplied by rate. Type EDouble Cardinality 0..1 Changeable false Derived true References allIssues : Issue* Issues scheduled to work on in this increment directly or indirectly via releases and features. Type Issue Cardinality 0..* Changeable false Derived true allObjectives : Objective* All objectives for this endeavor - a union of objectives and linkedObjectives. Type Objective Cardinality 0..* Changeable true Derived true assignee : Engineer Engineer responsible for completion of this endeavor. For a simple issue it would be an engineer working on the issue, for other endeavors the assignee\u2019s may not actually work on issues, but rather coordinate. E.g. increment assignee responsibility would be similar to those of a scrum master. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite assignments capacity : Capacity* Capacity or Allocation. If an element is capacity that means that there is a capacity for an engineer to work on this endeavor. If an element is allocation that means that Engineer\u2019s capacity has been allocated to work on a particular engineered element issues in a particular issue category. Type Capacity Cardinality 0..* Changeable false Derived true Opposite endeavor linkedObjectives : Objective* Objectives defined under Engineer for this endeavor. Type Objective Cardinality 0..* Changeable true Derived true Opposite endeavor objectives : Objective* Assignee\u2019s objectives for this endeavor. Type Objective Cardinality 0..* Changeable true Derived false benefit : EDouble Number representing benefit of this endeavor. Can be explicitly provided or derived. Type EDouble Cardinality 0..1 Changeable true Derived false completion : EDouble Number between 0 and 1. Type EDouble Cardinality 0..1 Changeable false Derived true totalCost : EDouble Total cost of the endeavor includes both cost and labor multiplied by rate. Type EDouble Cardinality 0..1 Changeable false Derived true Number representing benefit of this endeavor. Can be explicitly provided or derived. Type EDouble Cardinality 0..1 Changeable true Derived false Number between 0 and 1. Type EDouble Cardinality 0..1 Changeable false Derived true Total cost of the endeavor includes both cost and labor multiplied by rate. Type EDouble Cardinality 0..1 Changeable false Derived true allIssues : Issue* Issues scheduled to work on in this increment directly or indirectly via releases and features. Type Issue Cardinality 0..* Changeable false Derived true allObjectives : Objective* All objectives for this endeavor - a union of objectives and linkedObjectives. Type Objective Cardinality 0..* Changeable true Derived true assignee : Engineer Engineer responsible for completion of this endeavor. For a simple issue it would be an engineer working on the issue, for other endeavors the assignee\u2019s may not actually work on issues, but rather coordinate. E.g. increment assignee responsibility would be similar to those of a scrum master. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite assignments capacity : Capacity* Capacity or Allocation. If an element is capacity that means that there is a capacity for an engineer to work on this endeavor. If an element is allocation that means that Engineer\u2019s capacity has been allocated to work on a particular engineered element issues in a particular issue category. Type Capacity Cardinality 0..* Changeable false Derived true Opposite endeavor linkedObjectives : Objective* Objectives defined under Engineer for this endeavor. Type Objective Cardinality 0..* Changeable true Derived true Opposite endeavor objectives : Objective* Assignee\u2019s objectives for this endeavor. Type Objective Cardinality 0..* Changeable true Derived false Issues scheduled to work on in this increment directly or indirectly via releases and features. Type Issue Cardinality 0..* Changeable false Derived true All objectives for this endeavor - a union of objectives and linkedObjectives. Type Objective Cardinality 0..* Changeable true Derived true Engineer responsible for completion of this endeavor. For a simple issue it would be an engineer working on the issue, for other endeavors the assignee\u2019s may not actually work on issues, but rather coordinate. E.g. increment assignee responsibility would be similar to those of a scrum master. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite assignments Capacity or Allocation. If an element is capacity that means that there is a capacity for an engineer to work on this endeavor. If an element is allocation that means that Engineer\u2019s capacity has been allocated to work on a particular engineered element issues in a particular issue category. Type Capacity Cardinality 0..* Changeable false Derived true Opposite endeavor Objectives defined under Engineer for this endeavor. Type Objective Cardinality 0..* Changeable true Derived true Opposite endeavor Assignee\u2019s objectives for this endeavor. Type Objective Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/Release.html":{"path":"Products/Engineering/Model/Release","title":"Release","content":"org.nasdanika.engineering.Release Release is a unit of delivering product features to its consumers. Release can have associated issues. For example, a service release may not have new features, only bug fixes and enhancements in existing features. Supertypes EngineeredCapability Referrers EngineeredCapability Increment Product References capabilities : EngineeredCapability* Engineered capabilities planned for this release. Type EngineeredCapability Cardinality 0..* Changeable false Derived true Opposite releases increment : Increment Increment for which this release is scheduled. Type Increment Cardinality 0..1 Changeable true Derived false Opposite releases capabilities : EngineeredCapability* Engineered capabilities planned for this release. Type EngineeredCapability Cardinality 0..* Changeable false Derived true Opposite releases increment : Increment Increment for which this release is scheduled. Type Increment Cardinality 0..1 Changeable true Derived false Opposite releases Engineered capabilities planned for this release. Type EngineeredCapability Cardinality 0..* Changeable false Derived true Opposite releases Increment for which this release is scheduled. Type Increment Cardinality 0..1 Changeable true Derived false Opposite releases"},"modules/html/modules/ecore/index.html":{"path":"Products/HTML/Ecore","title":"Ecore","content":"Origin ecore/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/ecore Dependencies EMF With ecore module you can generate documentation for Ecore models. To use add ecore dependency to pom.xml, e.g. <dependency>\n  <groupId>org.nasdanika.html<\/groupId>\n  <artifactId>ecore<\/artifactId>\n  <version>2022.1.1<\/version>\n<\/dependency>\n Then write generation logic following the below examples: TestNasdanikaDocEngineeringGen.java - generator of this web site. TestEcoreDoc.java - a test generating documentation for a few models. Generation steps Generate action model If you are generating documentation for cross-referencing models, you may need to copy the models so their physical relative location on disk matches their relative logical location in Eclipse (project name). For example, Ncore physical location relative to the Git root directory is core/ncore, but its logical (project) name in Eclipse is org.nasdanika.ncore. Therefore, in order for the flow model to reference Ncore classes the Ncore model is copied from core/ncore to org.nasdanika.ncore in a Maven target directory. The flow model is copied in a similar way. Generate resource model Once you have generated action models, mount them to a root action model (defined in actions.yml in the examples above) and generate a resource model using a page template - defined in page-template.yml in the examples. Examples Root action model app-action:\n  icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n  uri: nasdanika:test/action/s1/s2\n  text: Nasdanika\n  location: https://www.nasdanika.org \n  tooltip: Root action\n  children:\n    - app-action:\n        icon: fa fa-book\n        text: Documentation\n        id: doc\n        location: ${base-uri}index.html \n        tooltip: Documentation\n        content:\n          content-text: TODO  \n        children:\n          - app-action-reference: \"../../../../../../../target/model-doc/actions/ncore.genmodel.xml#/\"\n          - app-action-reference: \"../../../../../../../target/model-doc/actions/exec.genmodel.xml#/\"\n          - app-action-reference: \"../../../../../../../target/model-doc/actions/flow.genmodel.xml#/\"\n Page template bootstrap-page:\n  cdn: true\n  theme: Cerulean\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/components/table.js\n  body:\n    app-page:\n      fluid: true\n      navigation-panel:\n        style: COLLAPSIBLE_CARDS\n        collapsible: true\n Examples Ncore Diagram Flow Exec HTML Bootstrap Application Engineering"},"modules/core/modules/diagram/modules/model/Note.html":{"path":"Products/Core/Diagram/Model/Note","title":"Note","content":"org.nasdanika.diagram.Note Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.diagram\\model\\doc\\note.md (The system cannot find the file specified) Referrers Diagram Style Attributes placement : NotePlacement Note placement for diagram elements. Ignored for connections. Type NotePlacement Cardinality 0..1 Changeable true Derived false text : EString Note text. Can be empty for notes where text is supplied by the content reference. If not empty - precedes the content elements. Type EString Cardinality 0..1 Changeable true Derived false References content : EObject* Composite note content to support having links. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false placement : NotePlacement Note placement for diagram elements. Ignored for connections. Type NotePlacement Cardinality 0..1 Changeable true Derived false text : EString Note text. Can be empty for notes where text is supplied by the content reference. If not empty - precedes the content elements. Type EString Cardinality 0..1 Changeable true Derived false Note placement for diagram elements. Ignored for connections. Type NotePlacement Cardinality 0..1 Changeable true Derived false Note text. Can be empty for notes where text is supplied by the content reference. If not empty - precedes the content elements. Type EString Cardinality 0..1 Changeable true Derived false content : EObject* Composite note content to support having links. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false Composite note content to support having links. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/core/modules/exec/modules/gen/issues/embedded-image-data/index.html":{"path":"Products/Core/Exec/Generation Adapters/Issues/Embedded image data","title":"Embedded image data","content":"Add embedded image data interpolation for markdown. Origin exec.gen/engineering.yml 8:5 Uri engineering://nasdanika/modules/core/modules/exec/modules/gen/issues/embedded-image-data Target Generation Adapters Workable"},"modules/engineering/modules/model/Link.html":{"path":"Products/Engineering/Model/Link","title":"Link","content":"org.nasdanika.engineering.Link Link to an external URL. Being a named element can be used as a: Model element resource, Activity requirements and deliverables. Transition payload and call response. Supertypes NamedElement Attributes target : EString Target URL Type EString Cardinality 1 Changeable true Derived false target : EString Target URL Type EString Cardinality 1 Changeable true Derived false Target URL Type EString Cardinality 1 Changeable true Derived false"},"modules/core/modules/flow/issues/children-only-representation/index.html":{"path":"Products/Core/Flow/Issues/Children only representation","title":"Children only representation","content":"A flag to diagram or a property to indicate that the element itself shall not appear on the diagram, only children. May use something like context = -1. Origin flow/engineering/engineering.yml 61:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/children-only-representation Target Flow Workable"},"modules/html/modules/models/modules/app/modules/model/Label.html":{"path":"Products/HTML/Models/Application/Model/Label","title":"Label","content":"org.nasdanika.html.model.app.Label Label is a text and an icon with a tooltip, notification badge, and help dialog. Labels can have children. Label is a base class for Link. Supertypes BootstrapElement Item Subtypes Link Referrers ContentPanel Header NavigationBar Attributes icon : EString Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false id : EString Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false notification : EString Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false outline : EBoolean For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false text : EString Label text. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false References children : EObject* Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false help : Modal Help modal. Type Modal Cardinality 0..1 Changeable true Derived false icon : EString Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false id : EString Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false notification : EString Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false outline : EBoolean For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false text : EString Label text. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false Label text. Type EString Cardinality 0..1 Changeable true Derived false Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false children : EObject* Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false help : Modal Help modal. Type Modal Cardinality 0..1 Changeable true Derived false Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false Help modal. Type Modal Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/ecore/issues/emaps/index.html":{"path":"Products/HTML/Ecore/Issues/Display EMaps directly to the value class with a different relationship, e.g. ``#--``","title":"Display EMaps directly to the value class with a different relationship, e.g. ``#--``","content":"Origin ecore/engineering.yml 23:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/emaps Target Ecore Workable"},"modules/core/modules/flow/Resource.html":{"path":"Products/Core/Flow/Resource","title":"Resource","content":"org.nasdanika.flow.Resource Something that participates in completion of activities - a human, an organization, a system. Association between activities and participants can be done with participants reference or with RACI - responsible, accountable, consulted, informed. Supertypes ServiceProvider<Resource> Referrers Artifact FlowElement Participant ResourceEntry Uses Resource References artifacts : Artifact* Artifacts which can be stored in this resource. E.g. source code can be stored in a source control system. Derived opposite to Artifact.repositories. Type Artifact Cardinality 0..* Changeable false Derived true Opposite repositories children : ResourceEntry* Resources can be organized into a hierarchy (Domains). Type ResourceEntry Cardinality 0..* Changeable true Derived false usedBy : Participant* Participants use this resource in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite resources usedIn : FlowElement<?>* Flow elements which use this resource. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite resources artifacts : Artifact* Artifacts which can be stored in this resource. E.g. source code can be stored in a source control system. Derived opposite to Artifact.repositories. Type Artifact Cardinality 0..* Changeable false Derived true Opposite repositories children : ResourceEntry* Resources can be organized into a hierarchy (Domains). Type ResourceEntry Cardinality 0..* Changeable true Derived false usedBy : Participant* Participants use this resource in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite resources usedIn : FlowElement<?>* Flow elements which use this resource. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite resources Artifacts which can be stored in this resource. E.g. source code can be stored in a source control system. Derived opposite to Artifact.repositories. Type Artifact Cardinality 0..* Changeable false Derived true Opposite repositories Resources can be organized into a hierarchy (Domains). Type ResourceEntry Cardinality 0..* Changeable true Derived false Participants use this resource in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite resources Flow elements which use this resource. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite resources"},"modules/engineering/modules/model/index.html":{"path":"Products/Engineering/Model","title":"Model","content":"One of definitions of engineering is \u201cThe action of working artfully to bring something about.\u201d Bringing something of value about is usually quite a lot of effort. In a situation of limited resources, which is the case most of the time, that efforts need to be carefully organized to achieve the maximum bang for the buck. The goal of Nasdanika Engineering is to help to carefully organize efforts in order to bring something about. That \u201cabout\u201d may be a software product, an organization, a vacation, or life in general. Nasdanika Engineering provides science and tooling to guide and track the process of translating dreams and ideas into organizing thought, sharing that organized thought with others and aligning efforts of many to turn dreams and ideas into reality. Nasdanika Engineering takes a low-tech approach - all you need to use it is a text editor to author YAML and Markdown files. Shall YAML and Markdown sound scary for non-technical people, YAML is a glorified indented list - if you know how to create a PowerPoint slide with bullet points, you should be able to manage YAML. And Markdown is pretty close to plain text. YAML and Markdown are resource formats supported out-of-the box. If needed, model data can be loaded from other resources. E.g. issues can be loaded from issue trackers such as GitHub Issues, Jira, or MantisBT by implementing resource factories for respective systems. Then you\u2019d need Java 8+ and Maven to generate a static HTML site from those files. Optionally, you can publish your site - there are many options, e.g. GitHub Pages. You wouldn\u2019t need a database or a cloud application - you can keep your plans on an encrypted flash drive in a safe in an underground vault, shall they be super-secret. Because with Nasdanika Engineering all artifacts \u201clive\u201d in one place it makes it an attractive choice for small efforts, or efforts which may have long periods of dormancy - POC\u2019s, R&D, ideation, innovation, and conceptualization. In the case of innovation in an organization, innovators may benefit from shared models, e.g. an organization model with products, services, personas, and goals - in this case an innovation idea can be defined in terms/context of these products, services, and goals. E.g. \u201cBuild a new service X which would leverage an existing service A and product B to address goal C of the internal persona D\u201d. This disciplined innovation would help the innovators to align their innovations to organization goals, and the rest of organization to grasp the value of the ideas and prioritize them for implementation. In a team environment Nasdanika Engineering files can be kept in a source control system such as Git. For example, on GitHub. In this case site generation and publishing can be done on code push, e.g. with CircleCI or Jenkins. In case of using Nasdanika Engineering to engineer a software product, engineering files with the source code. In a multi-module, multi-product scenario engineering files for each product/module can be kept with the source code of that product/module and then be federated into one model to generate a team/organization site. Nasdanika documentation site is generated this way. Nasdanika Engineering has 46 classes - see below and in the navigation panel on the left, which can be roughly grouped into the following categories: Structure - a skeleton to support the work done by the muscles. Behavior - muscles which do the work. Strategy - brain which directs the work towards goal achievement. General purpose - connective tissue assisting the above categories. It is not necessary to know and use all the classes at once - pick what you need to get started and then expand as needed. The below sections provide overview of the core concepts, each of the categories, and explain how to get started with Nasdanika Engineering. For step-by-step instructions see the User Guide. Core concepts Getting started The easiest way to get started is to download or clone the Engineering Demo repository. You may download the latest version or any of releases. If you clone, you may checkout any of tags as a starting point. Defining the model With Nasdanika Engineering you create an engineering model by defining instances of model classes in YAML or other format, e.g. JSON. YAML is a preferred format because it is more user friendly and also because Nasdanika Engineerings keeps track of line numbers in YAML files, but this functionality is not currently supported for JSON. As has been mentioned above, a model can be loaded from different types of resources, e.g. some parts of the model can be loaded from YAML while other parts would be loaded from, say, Jira. When creating YAML specifications use \u201cLoad specification\u201d section of respective classes to find supported configuration keys. Below is a partial sample definition of an organization: engineering-organization:\n   name: Nasdanika Engineering Demo\n   path: demo \n   table-of-contents: \n     role: content-left\n     header: Contents\n You can find a full definition here. Note that the organization definition starts with engineering-organization where engineering is a package name and organization is class name. For references which are not homogenous it is required to provide class names. Homogenous references have elements of the same type and therefore there is no need to provide class names. table-of-contents above is an example of a homogenous reference. A YAML file can reference another YAML file by using a string as reference value, unless that reference is a strict-containment. In the latter case the value is treated as a value of the default feature, as in the case of Transition:   elements:\n    - engineering-activity:\n        name: A\n        path: a\n        outputs:\n          - b\n outputs is a journey element homogenous reference with strict containment and target is Transition\u2019s default feature. Therefore, b is treated as a value of target. Default features are shown in bold in load specifications. The below code snippet demonstrates referencing specification defined in other files/URL\u2019s:    resources:\n     - resources/user-guide/root.yml\n     - resources/base-journey/root.yml\n     - resources/extended-journey/root.yml\n resources reference is not strict-containment and therefore its value is treated as a URL, which is resolved relatively to the YAML resource URL. Please note that when referencing external resources homogenous is ignored, i.e. the resource must contain the type declaration. Generating a site You may generate a site by using Maven - mvn package or mvn clean package. If you work on a model in a Java IDE such as Eclipse you may run TestModel.testGenerateDemoSite() from the IDE. The generation process creates a lot of console output, you may redirect it to a file if desired. The generation process diagnoses the model and outputs warnings and errors, if there are any, at the end of console output. Warnings and errors are also displayed on the generated site. Diagnostic output to the console is very detailed and may be hard to read. It is easier to use the generated site to inspect the diagnostic, unless there was FAIL level diagnostic which caused generation to fail. Generation may also fail due to incorrect configuration - wrong configuration key or resource URL. Inspect error messages for details. Below is a sample error message - it tells what is wrong (Unsupported configuration key) and the location of the offending specification (demo.yml line 3 column 4): Tests in error:\n  testGenerateDemoSite(org.nasdanika.engineering.demo.TestModel): Unsupported configuration key: path_ at file:/.../engineering-demo/target/test-classes/demo.yml 3:4\n Structure This section provides an overview of models classes which can be categorized as structural - instances of these classes define a skeleton to which other instances are \u201cattached\u201d. First of all, ModelElement and NamedElement are base classes from which most of the other classes inherit. Although is some cases not necessary, it is recommended to specify path attribute for model elements in order to have semantic URI\u2019s and URL\u2019s. A number of classes inherit from Period which supports floating, absolute, or relative start and end dates - temporals, and duration. It allows to express plans in relative temporal terms, e.g. \u201cHire a tester 60 day after the project kick-off\u201d where \u201cProject kick-off\u201d is an event which can be initially \u201cunbound\u201d, i.e. specified without absolute or relative date. Later on an event can be \u201cbound\u201d to an \u201cinstant\u201d - absolute time, or to another temporal - an event or start/end of a period, e.g. 30 days before quarter end. Temporals may have lower and upper bounds. For example, an exact date for some event may be unknown, but it might be know that it would happen no later or no sooner than a certain point of time - absolute or relative - or within a certain time range. Engineer or Organization are typically roots of the model. For a single-person efforts with no delegation whatsoever you may define a model with an engineer as its root. However, in many cases even for efforts which start as one-man shop eventually comes time when some tasks need to be delegated and execution tracked. This is when you\u2019d need an organization as it is an engineer which can contain other engineers. Engineers may contain modules and products and own engineered elements. Note that an Engineer is a sub-class of EngineeredElement, i.e. an Engineer can be engineered. For example, a person can be mentored or take courses and an organization can improve its processes. Behavior Behavior classes are used to represent things to be done on the structure or external entities to achieve goals. They are subdivided into two sub-categories: What - specifies what needs to be done, e.g. \u201cCreate a Customer Profile microservice\u201d. It may specify how it needs to be done or may reference the existing How, e.g. \u201cCreate a new microservice\u201d journey. How - specifies how a particular task shall be carried out. What There are two base classes for the classes in this category: Endeavor EngineeredCapability, which extends Endeavor. In your models you would use subclasses of the above two classes: Issue and its subclass Decision. With issue you would use: Note to track progress IssueCategory IssuePriority IssueSeverity IssueStatus Feature Release Increment How The How means what is traditionally User Guides and Cookbooks - step-by-step instructions. With Nasdanika Engineering you can create such step-by-step guides as documents with multiple sections. However, there is another way and you may choose what is most appropriate in a given situation and even combine the two. Humans are image processors, not text processors. So if your instructions are not single level linear, i.e. there are steps and sub-steps and also conditional logic, chances are that if presented visually these instructions would be easier to follow. Nasdanika Engineering has a number of classes which can be used to create visual representations of (work)flows. Because they can be used to capture scenarios of how personas use products and services provided by an engineer or an organization, they are called journeys. A journey is a directed graph of journey elements - activities, nested journeys, services, and pseudo-states. Journey elements can transition control from one another and also call one another. Because journey elements inherit from ModelElement, they can have documentation sections to benefit from a combination of non-linear and linear knowledge representation. One important feature of journeys is journey inheritance, which is similar to inheritance in languages like Java - it is possible to define a base journey and then extend it and customize (override) journey elements. Journey inheritance can be useful in hierarchies such as organization hierarchies and technology hierarchies. In an organization hierarchy higher levels can define generic processes and specify which elements can be customized at lower levels and which cannot. Lower levels of the organization would customize what they need to their specifics, e.g. local regulations. Similar to that, in the world of technology one can define, say, a generic journey explaining how to develop and deploy a microservice. Then that journey can be customized to different ways to deploy, e.g. different cloud providers - private and public, and their offerings. Document and section inheritance is not currently supported, it will be added in the future releases. Strategy Anything worthwhile takes time and effort to build, \u2026 and there are so many ways to skin a cat. If you are working on that worthwhile alone you will need a way to ensure that you are staying focused on achieving your goals. If you are working with others, you\u2019ll need a way to provide to your team means for efficient decision making to avoid prolonged debates. With Nasdanika Engineering you do it with subclasses of Aim to which alignables such as endeavors and other aims can be aligned to. For example, issues can be aligned to, say, persona goals to ensure that your org is doing the right thing, and to principles to ensure that you are doing it right. An issue \u201cBuild Customer Profile microservice\u201d can be aligned to a customer persona goal \u201cManage my information\u201d and The Twelve Factor App principles. Nasdanika Engineering also supports the OKR goal setting framework via Objective and KeyResult classes. It is possible to define issues as initiatives under key results. This provides an alternative way to organize efforts - instead of defining issues under products and modules and then aligning them to aims. You may pick a method which works best for your situation or use a combination of these two approaches. In the case of defining issues as initiatives you may have something like this: Organization Mission - top level goal. Organization goals - multiple. Increments - quarters, years. Organization objectives aligned to goals Key results Engineers and sub-organizations Objectives for increments linked to organization key results Key results Initiatives with sub-issues hierarchy. General purpose Appearance and its subclasses can be used to declaratively customize the generated UI. Customization can be done at the class level, i.e. customizations would apply to all, say, issues, or at an individual model element level. Directory is a way to group resources such as documents, links, named element references, and any named elements in general. Model elements and documents which use sections can use tables of contents. Engineered elements can have discussion topics with messages and nested forums. For example, there might be a discussion forum for a document section or for a journey activity. This allows to have highly focused micro-communities of practice where engineered element owners and experts help others. For software development efforts models \u201clive\u201d with the code and follow its lifecycle - branching, commits, merges. As some of engineering model elements are executable, e.g. already mentioned Vinci actions, the models are code by definition as they contain instructions to be executed by a computer. Unlike text files or spreadsheets which can also \u201clive\u201d with the code, models provide more structure and functionality for the engineering domain. \u201cAs-code\u201d approach may be attractive in the following situations: Sensitive data - with as-code approach such data may be kept in a highly secure fashion and never cross the network. Reduced infrastructure requirements - there is no need for an issue tracking server. Origin model/engineering.yml 1:1 Uri engineering://nasdanika/modules/engineering/modules/model Dependencies Flow Model Dependants Generation Adapters"},"modules/core/modules/diagram/modules/model/Link.html":{"path":"Products/Core/Diagram/Model/Link","title":"Link","content":"org.nasdanika.diagram.Link Link can have text, location (href) and a tooltip. Subtypes DiagramElement Attributes location : EString Link URL. If blank linik is rendered as plain text and tooltip is ignored. Type EString Cardinality 0..1 Changeable true Derived false text : EString Link text. Can be empty for diagram elements where text is supplied by the name reference. If not empty for diagram elements - precedes the name elements. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Optional link tooltip. Type EString Cardinality 0..1 Changeable true Derived false location : EString Link URL. If blank linik is rendered as plain text and tooltip is ignored. Type EString Cardinality 0..1 Changeable true Derived false text : EString Link text. Can be empty for diagram elements where text is supplied by the name reference. If not empty for diagram elements - precedes the name elements. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Optional link tooltip. Type EString Cardinality 0..1 Changeable true Derived false Link URL. If blank linik is rendered as plain text and tooltip is ignored. Type EString Cardinality 0..1 Changeable true Derived false Link text. Can be empty for diagram elements where text is supplied by the name reference. If not empty for diagram elements - precedes the name elements. Type EString Cardinality 0..1 Changeable true Derived false Optional link tooltip. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/Domain.html":{"path":"Products/Engineering/Model/Domain","title":"Domain","content":"org.nasdanika.engineering.Domain Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.engineering\\model\\doc\\domain.md (The system cannot find the file specified) Supertypes EngineeredElement Referrers Engineer References elements : EngineeredElement* Domain elements Type EngineeredElement Cardinality 0..* Changeable true Derived false elements : EngineeredElement* Domain elements Type EngineeredElement Cardinality 0..* Changeable true Derived false Domain elements Type EngineeredElement Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/Note.html":{"path":"Products/Engineering/Model/Note","title":"Note","content":"org.nasdanika.engineering.Note Note is used to track issue progress as well as to discuss issue implementation. Note is authored by an engineer and may specify: Date - note date Effort - effort spent. Cost - money spent. Remaining effort. Remaining cost. See the attributes documentation for more details. Being a model element a note may have associated resources, e.g. documents, links or references. Screenshots can be added to a note using the embedded-image token. Supertypes ModelElement Referrers Issue Attributes cost : EDouble Cost spent. Type EDouble Cardinality 0..1 Changeable true Derived false date : EDate Note date and time. Type EDate Cardinality 0..1 Changeable true Derived false effort : EDouble Effort spent. Type EDouble Cardinality 0..1 Changeable true Derived false remainingCost : EDouble If remaining cost is not specified explicitly is it computed from by subtracting note cost from the issue remaining cost. Type EDouble Cardinality 0..1 Changeable true Derived false remainingEffort : EDouble If remaining effort is not specified explicitly is it computed from by subtracting note effort from the issue remaining effort. Type EDouble Cardinality 0..1 Changeable true Derived false References author : Engineer Note author. Type Engineer Cardinality 0..1 Changeable true Derived false status : IssueStatus If issue status is not set explicitly the the status of the last note with status is used as issue status. It can be used to keep track of status changes. Type IssueStatus Cardinality 0..1 Changeable true Derived false cost : EDouble Cost spent. Type EDouble Cardinality 0..1 Changeable true Derived false date : EDate Note date and time. Type EDate Cardinality 0..1 Changeable true Derived false effort : EDouble Effort spent. Type EDouble Cardinality 0..1 Changeable true Derived false remainingCost : EDouble If remaining cost is not specified explicitly is it computed from by subtracting note cost from the issue remaining cost. Type EDouble Cardinality 0..1 Changeable true Derived false remainingEffort : EDouble If remaining effort is not specified explicitly is it computed from by subtracting note effort from the issue remaining effort. Type EDouble Cardinality 0..1 Changeable true Derived false Cost spent. Type EDouble Cardinality 0..1 Changeable true Derived false Note date and time. Type EDate Cardinality 0..1 Changeable true Derived false Effort spent. Type EDouble Cardinality 0..1 Changeable true Derived false If remaining cost is not specified explicitly is it computed from by subtracting note cost from the issue remaining cost. Type EDouble Cardinality 0..1 Changeable true Derived false If remaining effort is not specified explicitly is it computed from by subtracting note effort from the issue remaining effort. Type EDouble Cardinality 0..1 Changeable true Derived false author : Engineer Note author. Type Engineer Cardinality 0..1 Changeable true Derived false status : IssueStatus If issue status is not set explicitly the the status of the last note with status is used as issue status. It can be used to keep track of status changes. Type IssueStatus Cardinality 0..1 Changeable true Derived false Note author. Type Engineer Cardinality 0..1 Changeable true Derived false If issue status is not set explicitly the the status of the last note with status is used as issue status. It can be used to keep track of status changes. Type IssueStatus Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/ncore/NamedElement.html":{"path":"Products/Core/Ncore/NamedElement","title":"NamedElement","content":"org.nasdanika.ncore.NamedElement Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.ncore\\model\\doc\\named-element.md (The system cannot find the file specified) Supertypes ModelElement Subtypes Diagram NamedElement PackageElement Attributes name : EString Element name. Type EString Cardinality 0..1 Changeable true Derived false name : EString Element name. Type EString Cardinality 0..1 Changeable true Derived false Element name. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/app/modules/model/Footer.html":{"path":"Products/HTML/Models/Application/Model/Footer","title":"Footer","content":"org.nasdanika.html.model.app.Footer Footer is displayed below the navigation and content panels. Supertypes PagePart Referrers Page"},"modules/html/modules/models/modules/html/modules/model/Tag.html":{"path":"Products/HTML/Models/HTML/Model/Tag","title":"Tag","content":"org.nasdanika.html.model.html.Tag HTML Tag Supertypes HtmlElement Subtypes Tag Attributes name : EString Tag name. Type EString Cardinality 0..1 Changeable true Derived false name : EString Tag name. Type EString Cardinality 0..1 Changeable true Derived false Tag name. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/ncore/IntegerEntry.html":{"path":"Products/Core/Ncore/IntegerEntry","title":"IntegerEntry","content":"java.util.Map.Entry EMap entry with int value Attributes key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EInt Type EInt Cardinality 0..1 Changeable true Derived false key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EInt Type EInt Cardinality 0..1 Changeable true Derived false Artifact key. Type EString Cardinality 1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/KeyResult.html":{"path":"Products/Engineering/Model/KeyResult","title":"KeyResult","content":"org.nasdanika.engineering.KeyResult Key Results are specific measures used to track achievement of their containing objective. Key Results measure progress towards the Objective \u2014 like a milepost on a highway that shows how close an engineer or organization are to the key result\u2019s objective. Key Result has weight attribute which indicates how much completion of this key result contributes to the completion of it objective. Key Results may contain issues as initiatives - what needs to be done to achieve the Key Result. Initiatives can be used to track efforts which do not explicitly belong to a specific engineered element, or which are specific to this Key Result. Otherwise, issues or other engineered capabilities shall be defined under their respective engineered elements and be aligned to the Key Result. For example, an issue of implementing a piece of new functionality in a product shall be created under that product. An issue to prepare to present the organization and its offerings (products and services) on a conference which targets multiple personas/demographics would logically reside under a key result \u201cPresent on X conferences\u201d. Supertypes Aim Subtypes Objective Referrers Objective Attributes completion : EDouble Number between 0 and 1. Computed from alignments for key results and for alignments, key results, and sub-objectives for objectives Type EDouble Cardinality 0..1 Changeable false Derived true weight : EDouble Indicates how much this key result or objective contributes to completion of the containing or parent objective. Type EDouble Cardinality 0..1 Changeable true Derived false References initiatives : Issue* What needs to be done to achieve the containing Key Result. Type Issue Cardinality 0..* Changeable true Derived false completion : EDouble Number between 0 and 1. Computed from alignments for key results and for alignments, key results, and sub-objectives for objectives Type EDouble Cardinality 0..1 Changeable false Derived true weight : EDouble Indicates how much this key result or objective contributes to completion of the containing or parent objective. Type EDouble Cardinality 0..1 Changeable true Derived false Number between 0 and 1. Computed from alignments for key results and for alignments, key results, and sub-objectives for objectives Type EDouble Cardinality 0..1 Changeable false Derived true Indicates how much this key result or objective contributes to completion of the containing or parent objective. Type EDouble Cardinality 0..1 Changeable true Derived false initiatives : Issue* What needs to be done to achieve the containing Key Result. Type Issue Cardinality 0..* Changeable true Derived false What needs to be done to achieve the containing Key Result. Type Issue Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/issues/past-due-validations/index.html":{"path":"Products/Engineering/Model/Issues/Past Due Validations","title":"Past Due Validations","content":"Use context Date service. Also a warning if getting close and no progress - linear approximation. For endeavors with intervals wihtout start or end - derive start/end from interval start/end Origin model/engineering.yml 14:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/past-due-validations Target Model Workable"},"modules/engineering/modules/model/NamedElement.html":{"path":"Products/Engineering/Model/NamedElement","title":"NamedElement","content":"org.nasdanika.engineering.NamedElement Named element, as the name suggests, is a base class for model elements with a name. Supertypes ModelElement NamedElement Subtypes Aim Capability Event Forum Increment IssuePriority IssueSeverity IssueStatus Link Message NamedElementReference Referrers Directory ModelElement NamedElementReference"},"modules/html/modules/models/modules/bootstrap/modules/model/TableSection.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableSection","title":"TableSection","content":"org.nasdanika.html.model.bootstrap.TableSection Table section - body or footer, header has its own class. Supertypes TableRowContainer Subtypes TableHeader Referrers Table"},"modules/core/modules/flow/Participant.html":{"path":"Products/Core/Flow/Participant","title":"Participant","content":"org.nasdanika.flow.Participant Something that participates in completion of activities - a human, an organization, a system. Association between activities and participants can be done with participants reference or with RACI - responsible, accountable, consulted, informed. Supertypes ServiceProvider<Participant> Referrers Artifact FlowElement Participant ParticipantEntry ParticipantResponsibility Resource Uses Participant Attributes baseKeys : EString* Keys of base participants, which this participant is a specialization of, relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false References accountable : ParticipantResponsibility<?>* Flow elements (activities, journeys) this participant is ultimately answerable for the correct and thorough completion. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite accountable artifacts : Artifact* Artifacts this participant uses in their activities. Type Artifact Cardinality 0..* Changeable false Derived true Opposite usedBy bases : Participant* Base participants, which this participant is a specialization of. E.g. Junior Developer and Senior Developer can be specializations of Developer, which in turn can be a specialization of Agile Team Member. Type Participant Cardinality 0..* Changeable false Derived true Opposite specializations children : ParticipantEntry* Participants can be organized into a hierarchy (Organizational Structure). Type ParticipantEntry Cardinality 0..* Changeable true Derived false consulted : ParticipantResponsibility<?>* Flow elements (activities, journeys) for which this participant\u2019s opinions are sought, e.g. the participant is a subject-matter expert. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite consulted informed : ParticipantResponsibility<?>* Flow elements (activities, journeys) about which this participant is kept up-to-date on progress. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite informed participates : FlowElement<?>* Flow elements this participant participates in. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite participants resources : Resource* Resources this participant uses in their activities. Type Resource Cardinality 0..* Changeable false Derived true Opposite usedBy responsible : ParticipantResponsibility<?>* Flow elements (activities, journeys) this participant is responsible for, i.e. does the work to complete them. E.g. Product Owner is responsible for backlog grooming. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite responsible specializations : Participant* Specializations of this participant. Type Participant Cardinality 0..* Changeable false Derived true Opposite bases baseKeys : EString* Keys of base participants, which this participant is a specialization of, relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of base participants, which this participant is a specialization of, relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false accountable : ParticipantResponsibility<?>* Flow elements (activities, journeys) this participant is ultimately answerable for the correct and thorough completion. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite accountable artifacts : Artifact* Artifacts this participant uses in their activities. Type Artifact Cardinality 0..* Changeable false Derived true Opposite usedBy bases : Participant* Base participants, which this participant is a specialization of. E.g. Junior Developer and Senior Developer can be specializations of Developer, which in turn can be a specialization of Agile Team Member. Type Participant Cardinality 0..* Changeable false Derived true Opposite specializations children : ParticipantEntry* Participants can be organized into a hierarchy (Organizational Structure). Type ParticipantEntry Cardinality 0..* Changeable true Derived false consulted : ParticipantResponsibility<?>* Flow elements (activities, journeys) for which this participant\u2019s opinions are sought, e.g. the participant is a subject-matter expert. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite consulted informed : ParticipantResponsibility<?>* Flow elements (activities, journeys) about which this participant is kept up-to-date on progress. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite informed participates : FlowElement<?>* Flow elements this participant participates in. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite participants resources : Resource* Resources this participant uses in their activities. Type Resource Cardinality 0..* Changeable false Derived true Opposite usedBy responsible : ParticipantResponsibility<?>* Flow elements (activities, journeys) this participant is responsible for, i.e. does the work to complete them. E.g. Product Owner is responsible for backlog grooming. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite responsible specializations : Participant* Specializations of this participant. Type Participant Cardinality 0..* Changeable false Derived true Opposite bases Flow elements (activities, journeys) this participant is ultimately answerable for the correct and thorough completion. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite accountable Artifacts this participant uses in their activities. Type Artifact Cardinality 0..* Changeable false Derived true Opposite usedBy Base participants, which this participant is a specialization of. E.g. Junior Developer and Senior Developer can be specializations of Developer, which in turn can be a specialization of Agile Team Member. Type Participant Cardinality 0..* Changeable false Derived true Opposite specializations Participants can be organized into a hierarchy (Organizational Structure). Type ParticipantEntry Cardinality 0..* Changeable true Derived false Flow elements (activities, journeys) for which this participant\u2019s opinions are sought, e.g. the participant is a subject-matter expert. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite consulted Flow elements (activities, journeys) about which this participant is kept up-to-date on progress. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite informed Flow elements this participant participates in. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite participants Resources this participant uses in their activities. Type Resource Cardinality 0..* Changeable false Derived true Opposite usedBy Flow elements (activities, journeys) this participant is responsible for, i.e. does the work to complete them. E.g. Product Owner is responsible for backlog grooming. Type ParticipantResponsibility<?> Cardinality 0..* Changeable false Derived true Opposite responsible Specializations of this participant. Type Participant Cardinality 0..* Changeable false Derived true Opposite bases"},"modules/core/modules/flow/Choice.html":{"path":"Products/Core/Flow/Choice","title":"Choice","content":"org.nasdanika.flow.Choice Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\choice.md (The system cannot find the path specified) Supertypes PseudoState"},"personas/java-developer/goals/efficiency/index.html":{"path":"Personas/Java Developer/Goals/Efficiency","title":"Efficiency","content":"Origin engineering/nasdanika.yml 25:11 Uri engineering://nasdanika/personas/java-developer/goals/efficiency Children Generated Documentation Generated Documentation"},"modules/core/modules/ncore/BooleanEntry.html":{"path":"Products/Core/Ncore/BooleanEntry","title":"BooleanEntry","content":"java.util.Map.Entry EMap entry with boolean value Attributes key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false value : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Artifact key. Type EString Cardinality 1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/Organization.html":{"path":"Products/Engineering/Model/Organization","title":"Organization","content":"org.nasdanika.engineering.Organization Organization is an engineer which can contain other engineers, and organizations as such. One way to model an organizational structure is have an organization contain its leader and set the leader as the owner of the organization. Supertypes Engineer References engineers : Engineer* Members of this organization. Type Engineer Cardinality 0..* Changeable true Derived false engineers : Engineer* Members of this organization. Type Engineer Cardinality 0..* Changeable true Derived false Members of this organization. Type Engineer Cardinality 0..* Changeable true Derived false"},"modules/core/modules/ncore/IMarker.html":{"path":"Products/Core/Ncore/IMarker","title":"IMarker","content":"org.nasdanika.common.persistence.Marker Subtypes Marker"},"modules/html/modules/models/modules/bootstrap/modules/model/TableHeader.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableHeader","title":"TableHeader","content":"org.nasdanika.html.model.bootstrap.TableHeader Table header. Supertypes TableSection Referrers Table Attributes dark : EBoolean Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false light : EBoolean Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false dark : EBoolean Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false light : EBoolean Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Breakpoint.html":{"path":"Products/HTML/Models/Bootstrap/Model/Breakpoint","title":"Breakpoint","content":"org.nasdanika.html.bootstrap.Breakpoint Uses Float NavigationBar Spacing"},"modules/engineering/modules/model/Allocation.html":{"path":"Products/Engineering/Model/Allocation","title":"Allocation","content":"org.nasdanika.engineering.Allocation Allocation of engineer\u2019s capacity to spend on a particular engineered element and issue category on a particular endeavor. For example, in May increment Joe Doe works on feature X and can spend 20 hours working engineered elements Y\u2019s issues in technical debt issue category. Supertypes Capacity Referrers Engineer EngineeredElement IssueCategory References category : IssueCategory Optional issue category for this allocation. E.g. a allocation can be made to \u201cDocumentation\u201d or \u201cTest coverage\u201d categories. Type IssueCategory Cardinality 0..1 Changeable true Derived false Opposite allocations engineer : Engineer Engineer whose capacity is allocated to work on the containing engineered element. Type Engineer Cardinality 1 Changeable true Derived false Opposite designations category : IssueCategory Optional issue category for this allocation. E.g. a allocation can be made to \u201cDocumentation\u201d or \u201cTest coverage\u201d categories. Type IssueCategory Cardinality 0..1 Changeable true Derived false Opposite allocations engineer : Engineer Engineer whose capacity is allocated to work on the containing engineered element. Type Engineer Cardinality 1 Changeable true Derived false Opposite designations Optional issue category for this allocation. E.g. a allocation can be made to \u201cDocumentation\u201d or \u201cTest coverage\u201d categories. Type IssueCategory Cardinality 0..1 Changeable true Derived false Opposite allocations Engineer whose capacity is allocated to work on the containing engineered element. Type Engineer Cardinality 1 Changeable true Derived false Opposite designations"},"modules/html/modules/models/modules/app/modules/gen/issues/table-component-column-order/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters/Issues/Table component column order","title":"Table component column order","content":"Add support of column ordering - drag and drop or up/down arrows. Also storable in the local storage. Origin model/app.gen/engineering.yml 23:6 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen/issues/table-component-column-order Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generation Adapters Workable"},"modules/core/modules/diagram/modules/gen/issues/connection-ids/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Connection ID's","title":"Connection ID's","content":"Own GUID or as source ID and connection role/key e.g. xxxx-outputs-xyz Origin diagram.gen/engineering.yml 68:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/connection-ids Target Generators Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/TextWeight.html":{"path":"Products/HTML/Models/Bootstrap/Model/TextWeight","title":"TextWeight","content":"org.nasdanika.html.bootstrap.Text.Weight Uses Text"},"personas/java-developer/goals/efficiency/children/generated-doc/index.html":{"path":"Personas/Java Developer/Goals/Efficiency/Children/Generated Documentation","title":"Generated Documentation","content":"Origin engineering/nasdanika.yml 28:15 Uri engineering://nasdanika/personas/java-developer/goals/efficiency/children/generated-doc"},"modules/engineering/modules/model/IssueSeverity.html":{"path":"Products/Engineering/Model/IssueSeverity","title":"IssueSeverity","content":"org.nasdanika.engineering.IssueSeverity Issue severity, e.g. Feature, Minor, Major, Crash. Severity defines how the issue affects its product. Severity is different from priority. E.g. if an issue describes a situation where the product, e.g. a web application, crashes but its occurrence low because then severity would be Crash, but priority might be Low. Supertypes NamedElement Referrers Engineer Issue References issues : Issue* Issues in this severity. Type Issue Cardinality 0..* Changeable false Derived true Opposite severity issues : Issue* Issues in this severity. Type Issue Cardinality 0..* Changeable false Derived true Opposite severity Issues in this severity. Type Issue Cardinality 0..* Changeable false Derived true Opposite severity"},"modules/core/modules/flow/index.html":{"path":"Products/Core/Flow","title":"Flow","content":"Origin flow/engineering/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/flow Dependencies Generation Adapters Model Generators Dependants Model With Nasdanika Flow you can model organizational processes as flows - directed graphs of activities connected by transitions and calls and performed by participants using resources and consuming and producing artifacts. Flow extends activity and as such flows can be nested. Artifacts can also be nested, which allows to model composite artifacts such as modular and distributed systems, e.g. a cloud application. Flow models can be defined in a set of cross-referencing YAML files with supporting Markdown documentation either embedded in YAML or stored in files. Markdown documentation supports embedding of diagrams and token interpolation/substitution. Textual definitions of flows in multiple files allow to work with them in the same way as with source code, say, Java - branch, create a pull request, merge. In a way, Nasdanika Flow allows to write \u201cprograms\u201d to be executed by an organization similar to how Java programs are executed by a JVM or how distributed systems, such as cloud applications, operate. Textual format also means that flow definitions can be edited and viewed using a wide variety of tools, including viewing and editing in a web browser using native facilities of source control systems such as GitHub. A static web site is generated from flow models. Generated site includes generated visualizations - PlantUML State diagrams or Diagrams.net diagrams. Diagrams.net diagrams can be manually edited after generation. Dynamic behavior can be added to generated pages using Single Page Applications, e.g. applications built with Vue.js, VueRouter, and BootstrapVue. It allows to inject fine-grained productivity tools into activities where they are used. Such tools may use more generic tools behind the scenes and \u201cbind\u201d some contextual parameters to reduce participant\u2019s mental load and probability of mistakes. Flows can extend other flows forming an inheritance hierarchy similar to inheritance in languages such as Java or Docker images specifying base images. This allows to define base process/flow packages and extend/tailor them to specific needs. Nasdanika Flow also features: Responsibility Assignment Matrices, Validation, Data Provenance. Core concepts Package - Root element of the flow model containing other elements including sub-packages. Flow - A composite activity containing flow elements - activities, flows, services, and pseudo-states. Activity - a flow element performed by a participant. Has output transitions and may call other flow elements. Activities can specify input and output artifacts, responsibility assignments, and artifact responsibility assignments. Transition - when an activity completes it passes control and artifacts to subsequent activities via transitions. Fire-and-forget. Transitions may specify payload - artifacts which they carry from source to target. Call - a flow element may call other flow elements as part of its execution. Calling activity blocks waiting for the called activity to complete. Request-reply. In addition to payload calls may specify response - artifacts returned to the source from the target, e.g. a signed certificate or connectivity parameters for a new database. Participant - performs activities. May contain (offer) shared activities (including flows) as services which can be referenced from flows. E.g., a technology team may offer a service \u201cCreate a cloud Environment\u201d referenced from multiple flows. A service offered by one participant may call services offered by other participants. Resource - something used to complete activities. E.g. IDE or Cl/CD pipeline. Resources can be repositories of artifacts and can provide shared activities - services, which can be referenced from flows. Artifact - inputs and outputs of activities passed between activities via transitions and calls and stored in repository resources. E.g., a design document or source code. Artifacts can form a containment hierarchy and can reference template artifacts. Service - a flow element referencing an activity provided by a participant or resource. Pseudo-states - used to combine and direct transitions. Knowledge continuum One way to think about a flow model is as of a \u201cknowledge continuum\u201d where knowledge of how to do things is organized in progression from generic to specific with bi-directional links between more generic and more specific pieces. Activity documentation would be the most specific unit of knowledge, or, to be more precise, a mix of bits and pieces of knowledge from multiple domains/disciplines. For example, to perform a microservice development activity a developer need to know how to use IDE, source control system, an issue tracking system, etc. However, they don\u2019t need to know all of that at the expert level. E.g. they just need to know how to commit their code to the source control system and how to update an issue. They don\u2019t necessarily need to know how to do branching, merging, rebasing. Activity documentation may contain links to specific parts of reference manuals for resources and artifacts used by the activity, e.g. a specific chapter in a source control reference manual. Bi-directional references between activities and participants, resources, and artifacts used in activity are automatically generated. Resource, Artifact, and Participant documentation is more generic, but still specific to the flow package. E.g. documentation for a build tool resource may provide a description how the tool is used in the flow and contain references to external resources - manuals, book, video courses. Bi-directional links between participants and tools/artifacts they use in all activities are automatically generated. A person who is new to playing a role of a particular participant may study participant documentation including resources the participant uses and activities it participates in. And finally, resources referenced from the flow documentation are most generic and flow-independent. These resources can also be categorized, if needed, from specific to generic. E.g. there might be documentation on how to use a particular tool within the organization and documentation on how to use the tool in general. Examples TOGAF ADM Sources Generated documentation Tests Sources - JUnit tests to generate HTML from models. Resources - flow definitions. Generated documentation Core Agile - not a real Agile flow, just a demo. AWS - extends (inherits from) the Core Agile above, adds AWS-specific artifacts. Flow - inherited from the Core Agile. Components - hierarchical AWS-specific artifacts. Process overview An example of generating a web site from a flow model can be found here - TestTogafAdmGen.java. Generation steps: Load the model from YAML or other resource. Optionally validate. Abstract and mix-in models may contain validation errors such as unresolved proxies \u201cby design\u201d and therefore shall not be validated upon load. Create an instance model. At this step you may save the instance model to XMI to logically separate processing steps. You may also enrich the model by loading data from external systems. Generate an action model from the instance model. Generate a resource model from the action model. At this step you may combine multiple action models. Generate a site (container) from the resource model. Maven dependency To use the flow model add the following dependency to pom.xml: <dependency>\n  <groupId>org.nasdanika.core<\/groupId>\n  <artifactId>flow<\/artifactId>\n  <version>2022.1.2<\/version>\n<\/dependency>\n A list of versions can be found here."},"modules/engineering/modules/model/Issue.html":{"path":"Products/Engineering/Model/Issue","title":"Issue","content":"org.nasdanika.engineering.Issue Issue is a unit of work to accomplish to achieve a desired outcome on its containing engineered element, e.g.: New functionality in a module, New or refined persona goals, New skills acquired by an engineer, Improved organization processes. Issue(s) can: Be assigned to an engineer, Be planned for an increment or release; It is possible to plan for both increment and release, e.g. May increment and release planned for June increment, Contribute to features, Have zero or more issue categories Be in one issue status, Have priority and severity, Be organized in a hierarchy (WBS), Require capabilities to become workable, e.g. another issue to be completed, or a release to be available. Be aligned to aims, e.g principles or key results of objectives, Specify effort and cost required to be completed. Issue progress is tracked using notes. Notes are also used for discussions and tracking of issue-related decisions. Supertypes EngineeredCapability Subtypes Decision Referrers Capability Endeavor EngineeredElement Feature Increment Issue IssueCategory IssuePriority IssueSeverity IssueStatus KeyResult Attributes cost : EDouble Monetary cost for this issue, e.g. cost of materials. Type EDouble Cardinality 0..1 Changeable true Derived false effort : EDouble Effort for this issue. Type EDouble Cardinality 0..1 Changeable true Derived false remainingCost : EDouble Remaining cost is computed from issue cost and notes cost or remaining cost. Type EDouble Cardinality 0..1 Changeable false Derived true remainingEffort : EDouble Remaining effort is computed from issue effort and notes effort or remaining effort. Type EDouble Cardinality 0..1 Changeable false Derived true workable : EBoolean Issue is workable if it doesn\u2019t have any unavailable required capabilities. Type EBoolean Cardinality 0..1 Changeable false Derived true References categories : IssueCategory* Issue category. Type IssueCategory Cardinality 0..* Changeable true Derived false Opposite issues children : Issue* Issues can be infinitely nested to form a Work Breakdown Structure. Type Issue Cardinality 0..* Changeable true Derived false contributesTo : Feature* Issue can contribute to zero or more features. Type Feature Cardinality 0..* Changeable true Derived false Opposite issues increment : Increment Increment for which this issue is directly scheduled. Issue can be scheduled for an increment directly or indirectly via features and releases. Release increment can be different from issue incrmenent. E.g. issue can be scheduled for May, but its release might be scheduled for July. Type Increment Cardinality 0..1 Changeable true Derived false Opposite issues notes : Note* Issue notes are used for discussion and to record progress, remaining effort, and issue status if it is not set at the issue level. Type Note Cardinality 0..* Changeable true Derived false priority : IssuePriority Issue status. Type IssuePriority Cardinality 0..1 Changeable true Derived false Opposite issues requires : Capability* Capabilities required to start working on an issue. Type Capability Cardinality 0..* Changeable true Derived false Opposite requiredBy severity : IssueSeverity Issue status. Type IssueSeverity Cardinality 0..1 Changeable true Derived false Opposite issues status : IssueStatus Issue status. Type IssueStatus Cardinality 0..1 Changeable true Derived false Opposite issues target : EngineeredElement Target element for this issue - container of the issue itself or the root issue in the issue hierarchy. Type EngineeredElement Cardinality 0..1 Changeable false Derived true cost : EDouble Monetary cost for this issue, e.g. cost of materials. Type EDouble Cardinality 0..1 Changeable true Derived false effort : EDouble Effort for this issue. Type EDouble Cardinality 0..1 Changeable true Derived false remainingCost : EDouble Remaining cost is computed from issue cost and notes cost or remaining cost. Type EDouble Cardinality 0..1 Changeable false Derived true remainingEffort : EDouble Remaining effort is computed from issue effort and notes effort or remaining effort. Type EDouble Cardinality 0..1 Changeable false Derived true workable : EBoolean Issue is workable if it doesn\u2019t have any unavailable required capabilities. Type EBoolean Cardinality 0..1 Changeable false Derived true Monetary cost for this issue, e.g. cost of materials. Type EDouble Cardinality 0..1 Changeable true Derived false Effort for this issue. Type EDouble Cardinality 0..1 Changeable true Derived false Remaining cost is computed from issue cost and notes cost or remaining cost. Type EDouble Cardinality 0..1 Changeable false Derived true Remaining effort is computed from issue effort and notes effort or remaining effort. Type EDouble Cardinality 0..1 Changeable false Derived true Issue is workable if it doesn\u2019t have any unavailable required capabilities. Type EBoolean Cardinality 0..1 Changeable false Derived true categories : IssueCategory* Issue category. Type IssueCategory Cardinality 0..* Changeable true Derived false Opposite issues children : Issue* Issues can be infinitely nested to form a Work Breakdown Structure. Type Issue Cardinality 0..* Changeable true Derived false contributesTo : Feature* Issue can contribute to zero or more features. Type Feature Cardinality 0..* Changeable true Derived false Opposite issues increment : Increment Increment for which this issue is directly scheduled. Issue can be scheduled for an increment directly or indirectly via features and releases. Release increment can be different from issue incrmenent. E.g. issue can be scheduled for May, but its release might be scheduled for July. Type Increment Cardinality 0..1 Changeable true Derived false Opposite issues notes : Note* Issue notes are used for discussion and to record progress, remaining effort, and issue status if it is not set at the issue level. Type Note Cardinality 0..* Changeable true Derived false priority : IssuePriority Issue status. Type IssuePriority Cardinality 0..1 Changeable true Derived false Opposite issues requires : Capability* Capabilities required to start working on an issue. Type Capability Cardinality 0..* Changeable true Derived false Opposite requiredBy severity : IssueSeverity Issue status. Type IssueSeverity Cardinality 0..1 Changeable true Derived false Opposite issues status : IssueStatus Issue status. Type IssueStatus Cardinality 0..1 Changeable true Derived false Opposite issues target : EngineeredElement Target element for this issue - container of the issue itself or the root issue in the issue hierarchy. Type EngineeredElement Cardinality 0..1 Changeable false Derived true Issue category. Type IssueCategory Cardinality 0..* Changeable true Derived false Opposite issues Issues can be infinitely nested to form a Work Breakdown Structure. Type Issue Cardinality 0..* Changeable true Derived false Issue can contribute to zero or more features. Type Feature Cardinality 0..* Changeable true Derived false Opposite issues Increment for which this issue is directly scheduled. Issue can be scheduled for an increment directly or indirectly via features and releases. Release increment can be different from issue incrmenent. E.g. issue can be scheduled for May, but its release might be scheduled for July. Type Increment Cardinality 0..1 Changeable true Derived false Opposite issues Issue notes are used for discussion and to record progress, remaining effort, and issue status if it is not set at the issue level. Type Note Cardinality 0..* Changeable true Derived false Issue status. Type IssuePriority Cardinality 0..1 Changeable true Derived false Opposite issues Capabilities required to start working on an issue. Type Capability Cardinality 0..* Changeable true Derived false Opposite requiredBy Issue status. Type IssueSeverity Cardinality 0..1 Changeable true Derived false Opposite issues Issue status. Type IssueStatus Cardinality 0..1 Changeable true Derived false Opposite issues Target element for this issue - container of the issue itself or the root issue in the issue hierarchy. Type EngineeredElement Cardinality 0..1 Changeable false Derived true"},"modules/html/modules/jstree/index.html":{"path":"Products/HTML/jsTree","title":"jsTree","content":"Origin jstree/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/jstree Dependencies HTML Dependants Generation Adapters"},"modules/core/modules/common/issues/drawio-escaping/index.html":{"path":"Products/Core/Common/Issues/Extract shape text from drawio XML for searching","title":"Extract shape text from drawio XML for searching","content":"MarkdownHelper.escapeDiagramSpec(). Parse using mxgraph api, need to add/verify support for decompression - both compressed and uncompressed diagrams shall be supported. Origin common/engineering/engineering.yml 22:5 Uri engineering://nasdanika/modules/core/modules/common/issues/drawio-escaping Categories Good First Issue Target Common Workable"},"modules/core/index.html":{"path":"Products/Core","title":"Core","content":"Origin engineering.yml 1:1 Uri engineering://nasdanika/modules/core"},"modules/core/modules/ncore/Property.html":{"path":"Products/Core/Ncore/Property","title":"Property","content":"org.nasdanika.ncore.Property Subtypes BooleanProperty EObjectProperty IntegerProperty ListProperty MapProperty StringProperty Referrers Diagram Map PackageElement Style Attributes name : EString Type EString Cardinality 1 Changeable true Derived false name : EString Type EString Cardinality 1 Changeable true Derived false Type EString Cardinality 1 Changeable true Derived false"},"modules/core/modules/diagram/modules/gen/issues/drawio-multi-page/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Support of multi-page diagrams","title":"Support of multi-page diagrams","content":"Low level: Encoding methods which take a colleciton of diagrams, single diagram methods delegate to them. High level (flow and state diagrams) - a flag specifying that a diagram element with child elements which is not a partition shall be generated as another page rather than navigating to that element's HTML page. Maybe refactor partition attribute to some kind of enum attribute with partition and page as possible values. For PlantUML use table by default, as it is now, but with an anchor for cross-referencing. Protected method to override to use, say, bootstrap tabs, instead of tables. Origin diagram.gen/engineering.yml 56:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/drawio-multi-page Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generators Workable"},"modules/core/modules/ncore/GitMarker.html":{"path":"Products/Core/Ncore/GitMarker","title":"GitMarker","content":"org.nasdanika.ncore.GitMarker Marker with Git information such as a map of remotes. Supertypes Marker Attributes branch : EString Short branch name Type EString Cardinality 0..1 Changeable true Derived false head : EString Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false headRefs : EString* Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false path : EString Path in the repository Type EString Cardinality 0..1 Changeable true Derived false References remotes : StringEntry* A map of remote names to url\u2019s. Type StringEntry Cardinality 0..* Changeable true Derived false branch : EString Short branch name Type EString Cardinality 0..1 Changeable true Derived false head : EString Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false headRefs : EString* Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false path : EString Path in the repository Type EString Cardinality 0..1 Changeable true Derived false Short branch name Type EString Cardinality 0..1 Changeable true Derived false Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false Path in the repository Type EString Cardinality 0..1 Changeable true Derived false remotes : StringEntry* A map of remote names to url\u2019s. Type StringEntry Cardinality 0..* Changeable true Derived false A map of remote names to url\u2019s. Type StringEntry Cardinality 0..* Changeable true Derived false"},"modules/core/modules/ncore/IntegerProperty.html":{"path":"Products/Core/Ncore/IntegerProperty","title":"IntegerProperty","content":"org.nasdanika.ncore.IntegerProperty Supertypes Property Integer"},"modules/html/modules/models/modules/bootstrap/modules/model/Slide.html":{"path":"Products/HTML/Models/Bootstrap/Model/Slide","title":"Slide","content":"org.nasdanika.html.model.bootstrap.Slide Supertypes Div Referrers Carousel Attributes interval : EIntegerObject Type EIntegerObject Cardinality 0..1 Changeable true Derived false References captions : EObject* Type EObject Cardinality 0..* Changeable true Derived false interval : EIntegerObject Type EIntegerObject Cardinality 0..1 Changeable true Derived false Type EIntegerObject Cardinality 0..1 Changeable true Derived false captions : EObject* Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Navs.html":{"path":"Products/HTML/Models/Bootstrap/Model/Navs","title":"Navs","content":"org.nasdanika.html.model.bootstrap.Navs"},"increments/2022/children/Q1/index.html":{"path":"Increments/2022/Q1","title":"Q1","content":"Origin engineering/nasdanika.yml 94:9 Uri engineering://nasdanika/increments/2022/children/Q1 Start Jan 1, 2022 End Apr 1, 2022 Duration 89 days 23 hours"},"modules/core/modules/flow/ExitPoint.html":{"path":"Products/Core/Flow/ExitPoint","title":"ExitPoint","content":"org.nasdanika.flow.ExitPoint Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\exit-point.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/core/modules/ncore/Boolean.html":{"path":"Products/Core/Ncore/Boolean","title":"Boolean","content":"org.nasdanika.ncore.Boolean Subtypes BooleanProperty Attributes value : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false value : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/TableRow.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableRow","title":"TableRow","content":"org.nasdanika.html.model.bootstrap.TableRow Table row. Supertypes BootstrapElement Referrers TableRowContainer Attributes background : Color Row background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false color : Color Row color. Type Color Cardinality 0..1 Changeable true Derived false References cells : TableCell* Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false background : Color Row background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false color : Color Row color. Type Color Cardinality 0..1 Changeable true Derived false Row background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false Row color. Type Color Cardinality 0..1 Changeable true Derived false cells : TableCell* Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/issues/answer-ranking/index.html":{"path":"Products/Engineering/Model/Issues/Answer ranking","title":"Answer ranking","content":"Ranks collection or something like this. Simple way - update rank - long. More advanced way - use some external mechanism and pull data during generation. Origin model/engineering.yml 23:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/answer-ranking Target Model Workable"},"modules/core/modules/exec/modules/model/List.html":{"path":"Products/Core/Exec/Model/List","title":"List","content":"org.nasdanika.exec.List Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.exec\\model\\doc\\list.md (The system cannot find the file specified) Supertypes ModelElement References elements : EObject* Type EObject Cardinality 1..* Changeable true Derived false elements : EObject* Type EObject Cardinality 1..* Changeable true Derived false Type EObject Cardinality 1..* Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Appearance.html":{"path":"Products/HTML/Models/Bootstrap/Model/Appearance","title":"Appearance","content":"org.nasdanika.html.model.bootstrap.Appearance This class is used for configuring common aspects of HTML and Bootstrap elements such as background, spacing, text, etc. Referrers AppearanceEntry BootstrapElement Page Uses Appearance Attributes background : Color Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false References Float : Float* Float configuration. Type Float Cardinality 0..* Changeable true Derived false attributes : Property* HTML element (tag) attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false border : Border* Border configuration. Type Border Cardinality 0..4 Changeable true Derived false children : AppearanceEntry* Type AppearanceEntry Cardinality 0..* Changeable true Derived false margin : Spacing* Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false padding : Spacing* Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false text : Text Text style Type Text Cardinality 0..1 Changeable true Derived false Operations effectiveAppearance : Appearance Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 background : Color Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false Float : Float* Float configuration. Type Float Cardinality 0..* Changeable true Derived false attributes : Property* HTML element (tag) attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false border : Border* Border configuration. Type Border Cardinality 0..4 Changeable true Derived false children : AppearanceEntry* Type AppearanceEntry Cardinality 0..* Changeable true Derived false margin : Spacing* Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false padding : Spacing* Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false text : Text Text style Type Text Cardinality 0..1 Changeable true Derived false Float configuration. Type Float Cardinality 0..* Changeable true Derived false HTML element (tag) attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false Border configuration. Type Border Cardinality 0..4 Changeable true Derived false Type AppearanceEntry Cardinality 0..* Changeable true Derived false Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false Text style Type Text Cardinality 0..1 Changeable true Derived false effectiveAppearance : Appearance Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1"},"modules/html/modules/models/modules/bootstrap/modules/model/Form.html":{"path":"Products/HTML/Models/Bootstrap/Model/Form","title":"Form","content":"org.nasdanika.html.model.bootstrap.Form"},"modules/core/modules/flow/FlowElement.html":{"path":"Products/Core/Flow/FlowElement<T>","title":"FlowElement<T>","content":"org.nasdanika.flow.FlowElement Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\journey-element.md (The system cannot find the path specified) Supertypes ParticipantResponsibility<T> Subtypes Activity PseudoState Service Referrers Artifact FlowElementEntry Participant Resource Transition Uses FlowElement Attributes inputArtifactKeys : EString* Keys of input artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false outputArtifactKeys : EString* Keys of output artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false participantKeys : EString* Keys of participants resolved relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false resourceKeys : EString* Keys of resources resolved relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false sortGroup : EString Type EString Cardinality 0..1 Changeable true Derived false References artifactResponsibilities : ArtifactParticipantResponsibility* Type ArtifactParticipantResponsibility Cardinality 0..* Changeable true Derived false calls : CallEntry* Calls to other activities. Type CallEntry Cardinality 0..* Changeable true Derived false inputArtifacts : Artifact* Input artifacts required to start working on this activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite inputFor inputs : Transition* Transitions which have this flow element as a target. Type Transition Cardinality 0..* Changeable false Derived true invocations : Call* Calls which have this flow element as a target. Type Call Cardinality 0..* Changeable false Derived true outputArtifacts : Artifact* Output artifacts of the activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite outputFor outputs : TransitionEntry* Activity outbound transitions to other activities. Type TransitionEntry Cardinality 0..* Changeable true Derived false participants : Participant* Personas performing this journey element if it is an activity. Applies to all journey elements in order to group them into persona partitions. Type Participant Cardinality 0..* Changeable false Derived true Opposite participates resources : Resource* Type Resource Cardinality 0..* Changeable false Derived true Opposite usedIn inputArtifactKeys : EString* Keys of input artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false outputArtifactKeys : EString* Keys of output artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false participantKeys : EString* Keys of participants resolved relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false resourceKeys : EString* Keys of resources resolved relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false sortGroup : EString Type EString Cardinality 0..1 Changeable true Derived false Keys of input artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of output artifacts resolved relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of participants resolved relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of resources resolved relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false artifactResponsibilities : ArtifactParticipantResponsibility* Type ArtifactParticipantResponsibility Cardinality 0..* Changeable true Derived false calls : CallEntry* Calls to other activities. Type CallEntry Cardinality 0..* Changeable true Derived false inputArtifacts : Artifact* Input artifacts required to start working on this activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite inputFor inputs : Transition* Transitions which have this flow element as a target. Type Transition Cardinality 0..* Changeable false Derived true invocations : Call* Calls which have this flow element as a target. Type Call Cardinality 0..* Changeable false Derived true outputArtifacts : Artifact* Output artifacts of the activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite outputFor outputs : TransitionEntry* Activity outbound transitions to other activities. Type TransitionEntry Cardinality 0..* Changeable true Derived false participants : Participant* Personas performing this journey element if it is an activity. Applies to all journey elements in order to group them into persona partitions. Type Participant Cardinality 0..* Changeable false Derived true Opposite participates resources : Resource* Type Resource Cardinality 0..* Changeable false Derived true Opposite usedIn Type ArtifactParticipantResponsibility Cardinality 0..* Changeable true Derived false Calls to other activities. Type CallEntry Cardinality 0..* Changeable true Derived false Input artifacts required to start working on this activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite inputFor Transitions which have this flow element as a target. Type Transition Cardinality 0..* Changeable false Derived true Calls which have this flow element as a target. Type Call Cardinality 0..* Changeable false Derived true Output artifacts of the activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite outputFor Activity outbound transitions to other activities. Type TransitionEntry Cardinality 0..* Changeable true Derived false Personas performing this journey element if it is an activity. Applies to all journey elements in order to group them into persona partitions. Type Participant Cardinality 0..* Changeable false Derived true Opposite participates Type Resource Cardinality 0..* Changeable false Derived true Opposite usedIn"},"modules/html/modules/models/modules/bootstrap/modules/model/TextTransform.html":{"path":"Products/HTML/Models/Bootstrap/Model/TextTransform","title":"TextTransform","content":"org.nasdanika.html.bootstrap.Text.Transform Uses Text"},"increments/2022/children/Q4/children/oct/index.html":{"path":"Increments/2022/Q4/October","title":"October","content":"Origin engineering/nasdanika.yml 150:13 Uri engineering://nasdanika/increments/2022/children/Q4/children/oct Start Oct 1, 2022 End Nov 1, 2022 Duration 31 days"},"issue-statuses/cancelled/index.html":{"path":"Issue/Statuses/Cancelled","title":"Cancelled","content":"Origin engineering/nasdanika.yml 59:5 Uri engineering://nasdanika/issue-statuses/cancelled"},"modules/html/modules/models/modules/bootstrap/modules/model/index.html":{"path":"Products/HTML/Models/Bootstrap/Model","title":"Model","content":"Model of Bootstrap elements. Origin model/bootstrap/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/bootstrap/modules/model Dependencies Bootstrap Model Dependants Generation Adapters Model"},"modules/engineering/modules/model/Message.html":{"path":"Products/Engineering/Model/Message","title":"Message","content":"org.nasdanika.engineering.Message A message in a discussion topic authored by an engineer on a specific date. Supertypes NamedElement Subtypes Topic Referrers Engineer Topic Attributes date : EDate Date/time when this message was posted. Type EDate Cardinality 0..1 Changeable true Derived false References author : Engineer Message author. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite messages date : EDate Date/time when this message was posted. Type EDate Cardinality 0..1 Changeable true Derived false Date/time when this message was posted. Type EDate Cardinality 0..1 Changeable true Derived false author : Engineer Message author. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite messages Message author. Type Engineer Cardinality 0..1 Changeable true Derived false Opposite messages"},"modules/html/modules/models/modules/bootstrap/modules/gen/index.html":{"path":"Products/HTML/Models/Bootstrap/Generation Adapters","title":"Generation Adapters","content":"Origin model/bootstrap.gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/bootstrap/modules/gen Dependencies Model Generation Adapters Bootstrap Dependants Generation Adapters"},"modules/core/modules/exec/modules/model/resources/Container.html":{"path":"Products/Core/Exec/Model/Resources/Container","title":"Container","content":"org.nasdanika.exec.resources.Container A named collection of other resources, a folder/directory. Example resources-container:\n  name: my-container\n  contents:\n    - resources-file:\n        name: my-file.txt\n        contents:\n          content-text: Hello, World!\n Supertypes Resource Uses Container Operations find : Resource Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getContainer : Container Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getFile : File Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 find : Resource Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getContainer : Container Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getFile : File Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1 Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1 Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1"},"principles.html":{"title":"Principles","content":"Stateful objects shall be modeled in ECore Single-page Applications"},"modules/engineering/modules/model/Directory.html":{"path":"Products/Engineering/Model/Directory","title":"Directory","content":"org.nasdanika.engineering.Directory Directory is a container of named elements, e.g. documents, links, or other directories. Directory is a type of engineered element and as such it can be owned by engineer, have issues associated with it, discussion forums, etc. Supertypes EngineeredElement References elements : NamedElement* Directory elements. Type NamedElement Cardinality 0..* Changeable true Derived false elements : NamedElement* Directory elements. Type NamedElement Cardinality 0..* Changeable true Derived false Directory elements. Type NamedElement Cardinality 0..* Changeable true Derived false"},"modules/core/modules/flow/PackageElement.html":{"path":"Products/Core/Flow/PackageElement<T>","title":"PackageElement<T>","content":"org.nasdanika.flow.PackageElement Base class for elements which can be contained in a package and as such inherited, overridden, and suppressed. Supertypes NamedElement Subtypes Package ParticipantResponsibility Relationship ServiceProvider Transition Referrers PackageElement Uses PackageElement ParticipantResponsibility ServiceProvider Attributes modifiers : EString* A collection of boolean flags: abstract - Specifies that this package element is abstract. For packages and flows it means that they contain abstract elements and must be extended to become concrete. If a package or a flow contains abstract elements and does not have abstract modifier, it is diagnosed as an error. If concrete packages and flows extend abstract ones they must override (implement) all abstract elements. explicit-end - Applies to flows. Specifies that the end pseudo-state shall not be inferred by finding flow elements with no outputs. End will either be explicitly specified or the diagram will not have an end pseudo-state. explicit-start - Applies to flows. Specifies that the start pseudo-state shall not be inferred by finding flow elements with no inputs. Start will either be explicitly specified or the diagram will not have a start pseudo-state. final - Specifies that this journey element cannot be overriden in journeys extending this journey. Overriding a final elemen will be diagnosed as an error. For example, in an organization some processes can be defined as journeys at higher levels of the orgnization and extended at lower levels. final modifier allows to specify what can be extended and what cannot. Specifying a top-level journey as final indicates that it cannot have extensions. optional - Specifies that this element is optional. Optional elements have different apperance on diagrams. extension - Specifies that this element is an extension for an element in one of extended packages/flows. If this modifier is present and extends reference is empty, then it results in a diagnostic error. partition - Applies to flows and specifies that the flow shall be rendered as a partition (e.g. a composite state) on a digarm. Type EString Cardinality 0..* Changeable true Derived false References documentation : EObject* Element documentation. Documentation elements are adapted to SupplierFactory<InputStream> during generation. Exec content classes such as Markdown and Interpolator can be used as documentation elements. Type EObject Cardinality 0..* Changeable true Derived false extends : T* Elements can extend other elements and inherit their configuration - set attributes and references. For top-level packages inheritance shall be explicitly set using superPackages reference. For nested packages and other package elements extends is derived from containing packages. For nested packages super-packages derived from containment precede explicitly specified super-packages, i.e. the explicitly specified super-packages (mix-ins) can override configuration inherited via containment. Type T Cardinality 0..* Changeable false Derived true Opposite extensions extensions : T* Derived reference - known elements extending this element. Known means elements in the same resource set. Type T Cardinality 0..* Changeable false Derived true Opposite extends properties : Property* Properties can be used to customize the documentation generation process, e.g. provide configuration for generation of representation diagram elements. Type Property Cardinality 0..* Changeable true Derived false prototype : T This reference is set by create() method and points to a package element which created and configured this element. Type T Cardinality 0..1 Changeable true Derived false representations : RepresentationEntry* Mapping of representation names to values - Diagrams which serve as templates for generating diagram content from the package element. Type RepresentationEntry Cardinality 0..* Changeable true Derived false Operations apply Applies configuration of this element, including inherited configuration, to the argument. This method shall be called after create() and shall create contained elements. Cross-reference resolution shall be done in resolve() which is called after apply() and as such contained elements are already created. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 create : T Creates a new package element of the same type as this element with prototype reference to this package element. For top-level packages this method also calls apply() and then resolve(). Type T Cardinality 0..1 resolve Resolves cross-references. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 modifiers : EString* A collection of boolean flags: abstract - Specifies that this package element is abstract. For packages and flows it means that they contain abstract elements and must be extended to become concrete. If a package or a flow contains abstract elements and does not have abstract modifier, it is diagnosed as an error. If concrete packages and flows extend abstract ones they must override (implement) all abstract elements. explicit-end - Applies to flows. Specifies that the end pseudo-state shall not be inferred by finding flow elements with no outputs. End will either be explicitly specified or the diagram will not have an end pseudo-state. explicit-start - Applies to flows. Specifies that the start pseudo-state shall not be inferred by finding flow elements with no inputs. Start will either be explicitly specified or the diagram will not have a start pseudo-state. final - Specifies that this journey element cannot be overriden in journeys extending this journey. Overriding a final elemen will be diagnosed as an error. For example, in an organization some processes can be defined as journeys at higher levels of the orgnization and extended at lower levels. final modifier allows to specify what can be extended and what cannot. Specifying a top-level journey as final indicates that it cannot have extensions. optional - Specifies that this element is optional. Optional elements have different apperance on diagrams. extension - Specifies that this element is an extension for an element in one of extended packages/flows. If this modifier is present and extends reference is empty, then it results in a diagnostic error. partition - Applies to flows and specifies that the flow shall be rendered as a partition (e.g. a composite state) on a digarm. Type EString Cardinality 0..* Changeable true Derived false A collection of boolean flags: abstract - Specifies that this package element is abstract. For packages and flows it means that they contain abstract elements and must be extended to become concrete. If a package or a flow contains abstract elements and does not have abstract modifier, it is diagnosed as an error. If concrete packages and flows extend abstract ones they must override (implement) all abstract elements. explicit-end - Applies to flows. Specifies that the end pseudo-state shall not be inferred by finding flow elements with no outputs. End will either be explicitly specified or the diagram will not have an end pseudo-state. explicit-start - Applies to flows. Specifies that the start pseudo-state shall not be inferred by finding flow elements with no inputs. Start will either be explicitly specified or the diagram will not have a start pseudo-state. final - Specifies that this journey element cannot be overriden in journeys extending this journey. Overriding a final elemen will be diagnosed as an error. For example, in an organization some processes can be defined as journeys at higher levels of the orgnization and extended at lower levels. final modifier allows to specify what can be extended and what cannot. Specifying a top-level journey as final indicates that it cannot have extensions. optional - Specifies that this element is optional. Optional elements have different apperance on diagrams. extension - Specifies that this element is an extension for an element in one of extended packages/flows. If this modifier is present and extends reference is empty, then it results in a diagnostic error. partition - Applies to flows and specifies that the flow shall be rendered as a partition (e.g. a composite state) on a digarm. Type EString Cardinality 0..* Changeable true Derived false documentation : EObject* Element documentation. Documentation elements are adapted to SupplierFactory<InputStream> during generation. Exec content classes such as Markdown and Interpolator can be used as documentation elements. Type EObject Cardinality 0..* Changeable true Derived false extends : T* Elements can extend other elements and inherit their configuration - set attributes and references. For top-level packages inheritance shall be explicitly set using superPackages reference. For nested packages and other package elements extends is derived from containing packages. For nested packages super-packages derived from containment precede explicitly specified super-packages, i.e. the explicitly specified super-packages (mix-ins) can override configuration inherited via containment. Type T Cardinality 0..* Changeable false Derived true Opposite extensions extensions : T* Derived reference - known elements extending this element. Known means elements in the same resource set. Type T Cardinality 0..* Changeable false Derived true Opposite extends properties : Property* Properties can be used to customize the documentation generation process, e.g. provide configuration for generation of representation diagram elements. Type Property Cardinality 0..* Changeable true Derived false prototype : T This reference is set by create() method and points to a package element which created and configured this element. Type T Cardinality 0..1 Changeable true Derived false representations : RepresentationEntry* Mapping of representation names to values - Diagrams which serve as templates for generating diagram content from the package element. Type RepresentationEntry Cardinality 0..* Changeable true Derived false Element documentation. Documentation elements are adapted to SupplierFactory<InputStream> during generation. Exec content classes such as Markdown and Interpolator can be used as documentation elements. Type EObject Cardinality 0..* Changeable true Derived false Elements can extend other elements and inherit their configuration - set attributes and references. For top-level packages inheritance shall be explicitly set using superPackages reference. For nested packages and other package elements extends is derived from containing packages. For nested packages super-packages derived from containment precede explicitly specified super-packages, i.e. the explicitly specified super-packages (mix-ins) can override configuration inherited via containment. Type T Cardinality 0..* Changeable false Derived true Opposite extensions Derived reference - known elements extending this element. Known means elements in the same resource set. Type T Cardinality 0..* Changeable false Derived true Opposite extends Properties can be used to customize the documentation generation process, e.g. provide configuration for generation of representation diagram elements. Type Property Cardinality 0..* Changeable true Derived false This reference is set by create() method and points to a package element which created and configured this element. Type T Cardinality 0..1 Changeable true Derived false Mapping of representation names to values - Diagrams which serve as templates for generating diagram content from the package element. Type RepresentationEntry Cardinality 0..* Changeable true Derived false apply Applies configuration of this element, including inherited configuration, to the argument. This method shall be called after create() and shall create contained elements. Cross-reference resolution shall be done in resolve() which is called after apply() and as such contained elements are already created. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 create : T Creates a new package element of the same type as this element with prototype reference to this package element. For top-level packages this method also calls apply() and then resolve(). Type T Cardinality 0..1 resolve Resolves cross-references. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 Applies configuration of this element, including inherited configuration, to the argument. This method shall be called after create() and shall create contained elements. Cross-reference resolution shall be done in resolve() which is called after apply() and as such contained elements are already created. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 instance : T Type T Cardinality 0..1 Type T Cardinality 0..1 Creates a new package element of the same type as this element with prototype reference to this package element. For top-level packages this method also calls apply() and then resolve(). Type T Cardinality 0..1 Resolves cross-references. Cardinality 0..1 Parameters instance : T Type T Cardinality 0..1 instance : T Type T Cardinality 0..1 Type T Cardinality 0..1"},"modules/engineering/modules/gen/issues/engineer-activity/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Engineer activity","title":"Engineer activity","content":"Messages, notes, issues (assignments). Filtering - date range, increments. Use for plans, e.g. what's next and progress reports - what has been done. Origin gen/engineering.yml 50:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/engineer-activity Target Generation Adapters Workable"},"modules/core/modules/flow/OutputPin.html":{"path":"Products/Core/Flow/OutputPin","title":"OutputPin","content":"org.nasdanika.flow.OutputPin Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\output-pin.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/html/modules/ecore/issues/action-template/index.html":{"path":"Products/HTML/Ecore/Issues/Action template","title":"Action template","content":"Annnotation to load documentation action from a template, e.g. YAML or XML, instead of creating with a factory. The action will then be populated as usual. This would allow to, say, have engineering issues at model element level. Origin ecore/engineering.yml 13:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/action-template Target Ecore Workable"},"modules/engineering/modules/model/Aim.html":{"path":"Products/Engineering/Model/Aim","title":"Aim","content":"org.nasdanika.engineering.Aim Aim is the base class for things to which engineered capabilities and other aims can be aligned. Examples: A quarterly objective can be aligned to a persona or organization goal and release can be aligned to a key result of that objective. Issue can be aligned to a principle. Supertypes NamedElement Alignable Subtypes Decision Goal IssueCategory KeyResult Principle Referrers Alignment References alignments : Alignment* Alignments to this aim. Type Alignment Cardinality 0..* Changeable false Derived true Opposite aim alignments : Alignment* Alignments to this aim. Type Alignment Cardinality 0..* Changeable false Derived true Opposite aim Alignments to this aim. Type Alignment Cardinality 0..* Changeable false Derived true Opposite aim"},"modules/core/modules/emf/issues/type-selectors/index.html":{"path":"Products/Core/EMF/Issues/Type selectors","title":"Type selectors","content":"Currently homogenous reference type can be selected based on configuration type - map, list, ... Extend this capability to allow to introspect config and select element type based on config content, not just type. For example, if issue config map has github-issue key then instead of Issue an instance of GitHubIssue shall be created. One way is to keep the existing functionality for type mapping and add selector type key with value of a list for a single entry map. List elements would be maps with config-type (map, ...), element-type (EClass - string or map with EPackage and Eclass names), and selector or different selectors which can be jxpath (https://commons.apache.org/proper/commons-jxpath/), JavaScript, etc. For GitHubIssue it would be something like { config-type: map; element-type: GitHubIssue; path: } Origin emf/engineering.yml 18:7 Uri engineering://nasdanika/modules/core/modules/emf/issues/type-selectors Target EMF Workable"},"modules/core/modules/diagram/modules/gen/issues/plant-uml-layout/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Use PlantUML to layout","title":"Use PlantUML to layout","content":"Generate PlantUML diagram, parse image map and use to position and size diagram element rectangles, if parsing is successful. After that apply sizes from styles and if there were sizes from styles and they were larger than PlantUML sizes then layout so there is no overlap. Use the existing algorithm to move overlapping resized rectangle from the center of union of all rectangles. Pass initial delta between the center points of the union rectangle and the rectangle to be positioned to the generator factory - it will define initial radius and angle. An advanced implementation may be some kind of of a force algorithm where positioning iteration goes over an increase from the force equilibrium - offset generator may compute a certain amount of positions (e.g. 1000 or 10000), compute force for each point, sort them and then return in the order of increasing energy - difference from the equilibrium where the force is zero. For border rectangles such as entry/exit points - reposition proportionally to keep them on the border. Origin diagram.gen/engineering.yml 10:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/plant-uml-layout Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generators Workable"},"increments/2022/children/Q2/children/may/index.html":{"path":"Increments/2022/Q2/May","title":"May","content":"Origin engineering/nasdanika.yml 120:13 Uri engineering://nasdanika/increments/2022/children/Q2/children/may Start May 1, 2022 End Jun 1, 2022 Duration 31 days"},"modules/core/modules/flow/RepresentationEntry.html":{"path":"Products/Core/Flow/RepresentationEntry","title":"RepresentationEntry","content":"java.util.Map.Entry Mapping of representation key to a representation (diagram). Null value suppresses inherited entry. Referrers PackageElement Attributes key : EString Representation key. Type EString Cardinality 1 Changeable true Derived false References value : Diagram Representation (diagram). Type Diagram Cardinality 0..1 Changeable true Derived false key : EString Representation key. Type EString Cardinality 1 Changeable true Derived false Representation key. Type EString Cardinality 1 Changeable true Derived false value : Diagram Representation (diagram). Type Diagram Cardinality 0..1 Changeable true Derived false Representation (diagram). Type Diagram Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/exec/modules/model/resources/File.html":{"path":"Products/Core/Exec/Model/Resources/File","title":"File","content":"org.nasdanika.exec.resources.File File is a named container of binary contents (bytes) which can be set and retrieved as an input stream. Example resources-container:\n  name: my-container\n  contents:\n    - resources-file:\n        name: my-file.txt\n        contents:\n          content-text: Hello, World!\n Supertypes Resource Uses Container"},"modules/engineering/issues/branch-progress/index.html":{"path":"Products/Engineering/Issues/Branch progress","title":"Branch progress","content":"Add to features - branch progress, e.g. feature branch - earned but not yet released value/benefit. Origin engineering.yml 20:6 Uri engineering://nasdanika/modules/engineering/issues/branch-progress Target Engineering Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/AppearanceEntry.html":{"path":"Products/HTML/Models/Bootstrap/Model/AppearanceEntry","title":"AppearanceEntry","content":"java.util.Map.Entry Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.html.model.bootstrap\\model\\doc\\appearance-entry.md (The system cannot find the path specified) Referrers Appearance Attributes key : EString Type EString Cardinality 0..1 Changeable true Derived false References value : Appearance Type Appearance Cardinality 1 Changeable true Derived false key : EString Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false value : Appearance Type Appearance Cardinality 1 Changeable true Derived false Type Appearance Cardinality 1 Changeable true Derived false"},"modules/core/modules/exec/modules/model/content/Markdown.html":{"path":"Products/Core/Exec/Model/Content/Markdown","title":"Markdown","content":"org.nasdanika.exec.content.Markdown Markdown is a filter which renders Markdown to HTML. It optionally styles it by enclosing into a <div class=\"markdown-body\"> recognized by github-markdown-css. The filter also processes markdown which allows to embed diagrams using fenced code blocks. Markdown source can be defined in the YAML definition or loaded from an external resource. Inline Markdown Single line Multi-line Markdown loaded from resource Embedded images PNG resource JPEG resource PNG JPEG Embedded diagrams Draw.io PlantUML Loading from a resource Inline UML Sequence Component Wireframe Gantt Mind Map WBS Extensions Inline Markdown Single line content-markdown:\n  style: true\n  source:\n    content-text: Hello, *World*!\n Multi-line content-markdown:\n  style: true\n  source:\n    content-text: |+2\n      Hello, ``Universe``!\n Markdown loaded from resource content-markdown:\n  style: true\n  source:\n    content-resource: features/execution-model.md  \n Embedded images Markdown filter allows to embed PNG and JPEG using fenced blocks. PNG resource ```png-resource\nmy.png\n```\n Resource location is resolved relative to the YAML resource containing filter definition. JPEG resource ```jpeg-resource\nmy.jpeg\n```\n PNG ```png\nBase 64 encoded png \n```\n JPEG ```jpeg\nBase 64 encoded jpeg\n```\n Embedded diagrams Markdown filter allows to embed PlantUML and Draw.io diagrams using fenced blocks. Draw.io ```drawio-resource\n  aws.drawio\n```\n Resource location is resolved relative to the YAML resource containing filter definition. PlantUML PlantUML diagrams can be defined inline or loaded from resources. Loading from a resource ```uml-resource\nsequence.plantuml\n```\n In the above snippet uml is a dialect supported by PlantUML (see below) and sequence.plantuml is a resource location resolved relative to the YAML resource containing markdown filter definition. Inline The following language specifications (dialects) are supported: uml - for the following diagram types: Sequence, Use Case, Class, Activity, Component, State, Object, Deployment, Timing, Network. wireframe - for Wireframe diagrams gantt - for Gantt diagrams mindmap - for Mind Maps wbs - for Work Breakdown Structures UML Sequence Fenced block: ```uml\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n```\n Diagram: Alice -> Bob: Authentication Request Bob --> Alice: Authentication Response Component Component diagram with links to component pages. Fenced block: ```uml\npackage Core {\n   component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]]\n}\n\npackage HTML {\n   component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]]\n   [html] ..> [Common]\n}\n```\n Diagram: package Core { component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]] } package HTML { component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]] [html] ..> [Common] } Wireframe Fenced block: ```wireframe\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n```\n Diagram: { Just plain text [This is my button] () Unchecked radio (X) Checked radio [] Unchecked box [X] Checked box \"Enter text here \" ^This is a droplist^ } Gantt Fenced block: ```gantt\n[Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]]\n[Test prototype] lasts 10 days\n-- All example --\n[Task 1 (1 day)] lasts 1 day\n[T2 (5 days)] lasts 5 days\n[T3 (1 week)] lasts 1 week\n[T4 (1 week and 4 days)] lasts 1 week and 4 days\n[T5 (2 weeks)] lasts 2 weeks\n```\n Diagram: [Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]] [Test prototype] lasts 10 days -- All example -- [Task 1 (1 day)] lasts 1 day [T2 (5 days)] lasts 5 days [T3 (1 week)] lasts 1 week [T4 (1 week and 4 days)] lasts 1 week and 4 days [T5 (2 weeks)] lasts 2 weeks Mind Map Fenced block: ```mindmap\n* Debian\n** [[https://ubuntu.com/ Ubuntu]]\n*** Linux Mint\n*** Kubuntu\n*** Lubuntu\n*** KDE Neon\n** LMDE\n** SolydXK\n** SteamOS\n** Raspbian with a very long name\n*** <s>Raspmbc<\/s> => OSMC\n*** <s>Raspyfi<\/s> => Volumio\n```\n Diagram: * Debian ** [[https://ubuntu.com/ Ubuntu]] *** Linux Mint *** Kubuntu *** Lubuntu *** KDE Neon ** LMDE ** SolydXK ** SteamOS ** Raspbian with a very long name *** <s>Raspmbc<\/s> => OSMC *** <s>Raspyfi<\/s> => Volumio WBS WBS elements can have links. This type of diagram can also be used to display organization structure. ```wbs\n* [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]]\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n```\n Fenced block: Diagram: * [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]] ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase Extensions Table of contents - add [TOC] to the document as explained in the documentation. This extension will create a table of contents from markdown headers. Footnotes Strikethrough: ~~strikethrough~~-> strikethrough Subscript: H~2~O -> H20 Superscript: 2^5^ = 32 -> 25 = 32 Supertypes Filter Attributes style : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false style : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/NamedElementReference.html":{"path":"Products/Engineering/Model/NamedElementReference","title":"NamedElementReference","content":"org.nasdanika.engineering.NamedElementReference References a named element. Being a named element can be used as a: Model element resource, Activity requirements and deliverables. Transition payload and call response. For example, coding guidelines can be defined as a document resource at the organization level and be referenced as a deliverable of a coding activity, i.e. code must comply with documented guidelines. Supertypes NamedElement References target : NamedElement Reference target Type NamedElement Cardinality 1 Changeable true Derived false target : NamedElement Reference target Type NamedElement Cardinality 1 Changeable true Derived false Reference target Type NamedElement Cardinality 1 Changeable true Derived false"},"modules/core/modules/flow/End.html":{"path":"Products/Core/Flow/End","title":"End","content":"org.nasdanika.flow.End Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\end.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/core/modules/exec/modules/model/Block.html":{"path":"Products/Core/Exec/Model/Block","title":"Block","content":"org.nasdanika.exec.Block Try-catch-finally block. Supported keys: try - required. A component or a list of components to execute. catch - optional. A component or a list of components to execute if the try component(s) execution fails. If not present and try fails the entire block fails, but finally still gets executed. Information about the exception which caused catch execution is available to the catch components via the following context properties: error - exception instance. error/type - fully qualified exception class name. error/message - exception message. finally - optional. A component or a list of components to always execute after try and catch. Components in all blocks shall be of the same type, or adaptable to the same type - resource, content, or command. In the case of content components output produced by the try, if it succeeds, or catch, if it is present and the try fails, is concatenated with the content produced by the finally, if it is present. If try block fails it gets rolled back. Example A block of content components. block:\n   try: \n      http: https://nasdanika.org/no-such-path\n   catch: Erroneous ${error}      \n   finally: World\n Supertypes ModelElement References catch : EObject* Type EObject Cardinality 0..* Changeable true Derived false finally : EObject* Type EObject Cardinality 0..* Changeable true Derived false try : EObject* Type EObject Cardinality 1..* Changeable true Derived false catch : EObject* Type EObject Cardinality 0..* Changeable true Derived false finally : EObject* Type EObject Cardinality 0..* Changeable true Derived false try : EObject* Type EObject Cardinality 1..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 1..* Changeable true Derived false"},"increments/2022/children/Q2/children/apr/index.html":{"path":"Increments/2022/Q2/April","title":"April","content":"Origin engineering/nasdanika.yml 116:13 Uri engineering://nasdanika/increments/2022/children/Q2/children/apr Start Apr 1, 2022 End May 1, 2022 Duration 30 days"},"modules/core/modules/exec/modules/model/content/Resource.html":{"path":"Products/Core/Exec/Model/Content/Resource","title":"Resource","content":"org.nasdanika.exec.content.Resource Loads resource from a URL specified as resource value. The value is interpolated if interpolate is set to true, and then is resolved relative to the base URL. Use classpath scheme to load classloader resources. E.g. classpath:org/nasdanika/exec/some-resource.md Examples String content-resource: hello.txt\n Map content-resource:\n   description: Full resource definition\n   location: ${my-resources}/hello.txt \n   interpolate: true\n Classpath resource content-resource: classpath:org/nasdanika/exec/gen/tests/content/hello.txt\n Supertypes ModelElement Attributes interpolate : EBoolean If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false location : EString Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false interpolate : EBoolean If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false location : EString Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Spacing.html":{"path":"Products/HTML/Models/Bootstrap/Model/Spacing","title":"Spacing","content":"org.nasdanika.html.model.bootstrap.Spacing Spacing - padding or margin. Specifies size, location, and breakpoint. Referrers Appearance Attributes bottom : EBoolean Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false breakpoint : Breakpoint Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false left : EBoolean Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false size : Size Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false top : EBoolean Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false x : EBoolean Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false y : EBoolean Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false bottom : EBoolean Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false breakpoint : Breakpoint Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false left : EBoolean Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false size : Size Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false top : EBoolean Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false x : EBoolean Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false y : EBoolean Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/emf/issues/homogenous-to-typed/index.html":{"path":"Products/Core/EMF/Issues/Homogenous to typed","title":"Homogenous to typed","content":"With introduction of type maps and type selectors homogenous became a misnomer. Drop \"homogenous\" in favor of \"typed\" with default value true and change homogenous=true to typed=false annotation. Typed would mean that the type shall be explicitly provided by elements and false would mean that it will be computed from reference type and type map/selector annotations. Or use reference-type annotation with string value \"reference\" indicating that type shall be taking from EReference - the same as homogenous. Replace isHomogenous with isTyped (with negation). Origin emf/engineering.yml 28:7 Uri engineering://nasdanika/modules/core/modules/emf/issues/homogenous-to-typed Target EMF Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Div.html":{"path":"Products/HTML/Models/Bootstrap/Model/Div","title":"Div","content":"org.nasdanika.html.model.bootstrap.Div HTML DIV with bootstrap styling Supertypes Tag Subtypes ActionGroup Alert Badge Button Card Carousel Slide"},"modules/html/modules/flow/issues/generation-api/index.html":{"path":"Products/HTML/Flow/Issues/Generation API","title":"Generation API","content":"Convert unit tests into a generation API in the main codebase and documentation. Consider also Maven plug-in and CLI. Origin flow/engineering.yml 8:5 Uri engineering://nasdanika/modules/html/modules/flow/issues/generation-api Target Flow Workable"},"increments/2022/children/Q2/index.html":{"path":"Increments/2022/Q2","title":"Q2","content":"Origin engineering/nasdanika.yml 111:9 Uri engineering://nasdanika/increments/2022/children/Q2 Start Apr 1, 2022 End Jul 1, 2022 Duration 91 days"},"issue-priorities.html":{"path":"Issue/Priorities","title":"Priorities","content":"Low Medium High"},"modules/core/modules/ncore/MapProperty.html":{"path":"Products/Core/Ncore/MapProperty","title":"MapProperty","content":"org.nasdanika.ncore.MapProperty Supertypes Property Map"},"modules/html/modules/models/modules/html/modules/gen/index.html":{"path":"Products/HTML/Models/HTML/Generation Adapters","title":"Generation Adapters","content":"Origin model/html.gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/html/modules/gen Dependencies Model HTML Generation Adapters Dependants Generation Adapters"},"modules/html/modules/models/modules/app/modules/model/Header.html":{"path":"Products/HTML/Models/Application/Model/Header","title":"Header","content":"org.nasdanika.html.model.app.Header Page header has a title on the left and a navigation bar on the right. Supertypes PagePart Referrers Page References title : Label Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false title : Label Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/Fork.html":{"path":"Products/Core/Flow/Fork","title":"Fork","content":"org.nasdanika.flow.Fork Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\fork.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/engineering/modules/model/issues/relative-dates-feature/index.html":{"path":"Products/Engineering/Model/Issues/Relative dates feature","title":"Relative dates feature","content":"Create a feature explaining relative dates (temporals), bounds, and validations. Origin model/engineering.yml 11:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/relative-dates-feature Target Model Workable"},"modules/togaf/modules/adm/issues/engineering-link/index.html":{"path":"Products/TOGAF/ADM/Issues/Engineering Link","title":"Engineering Link","content":"Link to the NSD TOGAF Engineering product on the NSD site. On the eng. site mention that created with NSD Flow. In readme link to eng, generated doc, and flow. Origin adm/engineering.yml 5:5 Uri engineering://nasdanika/modules/togaf/modules/adm/issues/engineering-link Target ADM Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Table.html":{"path":"Products/HTML/Models/Bootstrap/Model/Table","title":"Table","content":"org.nasdanika.html.model.bootstrap.Table Bootstrap table Supertypes TableRowContainer TableConfiguration References body : TableSection Table body. Type TableSection Cardinality 0..1 Changeable true Derived false footer : TableSection Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false header : TableHeader Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false body : TableSection Table body. Type TableSection Cardinality 0..1 Changeable true Derived false footer : TableSection Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false header : TableHeader Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false Table body. Type TableSection Cardinality 0..1 Changeable true Derived false Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/issues/in-browser-editing/index.html":{"path":"Products/Core/Flow/Issues/In-browsing editing feature","title":"In-browsing editing feature","content":"Collaboration, inner source. Create pull request. Related to Data Provenance. Origin flow/engineering/engineering.yml 110:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/in-browser-editing Target Flow Workable"},"modules/core/modules/ncore/Integer.html":{"path":"Products/Core/Ncore/Integer","title":"Integer","content":"org.nasdanika.ncore.Integer Subtypes IntegerProperty Attributes value : EInt Type EInt Cardinality 0..1 Changeable true Derived false value : EInt Type EInt Cardinality 0..1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false"},"issue-categories/good-first-issue/index.html":{"path":"Issue/Categories/Good First Issue","title":"Good First Issue","content":"Origin engineering/nasdanika.yml 33:5 Uri engineering://nasdanika/issue-categories/good-first-issue Issues Issue Module Increment Assignee Start End Duration Completion Extract shape text from drawio XML for searching Common Documentation Issue Module Increment Assignee Start End Duration Completion Extract shape text from drawio XML for searching Common Documentation"},"modules/html/modules/models/modules/bootstrap/modules/model/Page.html":{"path":"Products/HTML/Models/Bootstrap/Model/Page","title":"Page","content":"org.nasdanika.html.model.bootstrap.Page HTML page with bootstrap elements in the head - meta, stylesheets, and scripts. Overview video in Russian. Supertypes Page Attributes cdn : EBoolean If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false theme : Theme Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false cdn : EBoolean If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false theme : Theme Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false"},"personas.html":{"title":"Personas","content":"Java Developer"},"modules/core/modules/exec/modules/gen/issues/include-base/index.html":{"path":"Products/Core/Exec/Generation Adapters/Issues/Include base","title":"Include base","content":"Base shall be resolved relative to the target resource or marker. Use marker first. Origin exec.gen/engineering.yml 11:5 Uri engineering://nasdanika/modules/core/modules/exec/modules/gen/issues/include-base Target Generation Adapters Workable"},"modules/engineering/issues/skills-and-technologies/index.html":{"path":"Products/Engineering/Issues/Skills and Technologies","title":"Skills and Technologies","content":"Engineers have skills which may reference technologies and have level. Projects use technologies. Trees for both skills and technologies. Maybe not skills, but expertise - can be with technologies or other things such as engineered elements - modules, products. Origin engineering.yml 24:6 Uri engineering://nasdanika/modules/engineering/issues/skills-and-technologies Target Engineering Workable"},"issue-priorities/medium/index.html":{"path":"Issue/Priorities/Medium","title":"Medium","content":"Origin engineering/nasdanika.yml 38:5 Uri engineering://nasdanika/issue-priorities/medium"},"modules/core/modules/emf/issues/default-features-with-e-keys/index.html":{"path":"Products/Core/EMF/Issues/Add support of default features with e-keys","title":"Add support of default features with e-keys","content":"ReferenceList. Implemented for homogenous - needs to be tested, implement for heterogenous. Origin emf/engineering.yml 15:7 Uri engineering://nasdanika/modules/core/modules/emf/issues/default-features-with-e-keys Target EMF Workable"},"modules/engineering/modules/model/EngineeredCapability.html":{"path":"Products/Engineering/Model/EngineeredCapability","title":"EngineeredCapability","content":"org.nasdanika.engineering.EngineeredCapability Engineered capability extends both endeavor and capability and is a base class for issue, feature, and release. I.e. it is something that might be required by issues to start working on them and that something takes time, effort, and money to complete. For example an issue \u201cBuild XYZ visualization\u201d for module B may require \u201cVisualizations\u201d feature of product A. Engineered capability can be aligned to aims. E.g. release 1.2.0 may be aligned to meet goals of a particular persona or annual or quarterly objective of an organization. Supertypes Capability Endeavor Subtypes Feature Issue Release Referrers Release References releases : Release* Engineered capabiloity can be planned for zero or more releases. Type Release Cardinality 0..* Changeable true Derived false Opposite capabilities releases : Release* Engineered capabiloity can be planned for zero or more releases. Type Release Cardinality 0..* Changeable true Derived false Opposite capabilities Engineered capabiloity can be planned for zero or more releases. Type Release Cardinality 0..* Changeable true Derived false Opposite capabilities"},"modules/html/modules/models/modules/bootstrap/modules/model/Border.html":{"path":"Products/HTML/Models/Bootstrap/Model/Border","title":"Border","content":"org.nasdanika.html.model.bootstrap.Border Border configuration specifies border location and color. Referrers Appearance Attributes bottom : EBoolean Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false left : EBoolean Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false top : EBoolean Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false bottom : EBoolean Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false left : EBoolean Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false top : EBoolean Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/ncore/Reference.html":{"path":"Products/Core/Ncore/Reference<T>","title":"Reference<T>","content":"org.nasdanika.ncore.Reference Subtypes ActionReference References target : T Type T Cardinality 1 Changeable true Derived false target : T Type T Cardinality 1 Changeable true Derived false Type T Cardinality 1 Changeable true Derived false"},"modules/core/modules/flow/Service.html":{"path":"Products/Core/Flow/Service","title":"Service","content":"org.nasdanika.flow.Service Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\service.md (The system cannot find the path specified) Supertypes FlowElement<Service> Referrers Activity Uses Service Attributes targetKey : EString Key of service target activity relative to the containing package. Type EString Cardinality 1 Changeable true Derived false References target : Activity<?> Target activity of the service. Type Activity<?> Cardinality 0..1 Changeable false Derived true Opposite services targetKey : EString Key of service target activity relative to the containing package. Type EString Cardinality 1 Changeable true Derived false Key of service target activity relative to the containing package. Type EString Cardinality 1 Changeable true Derived false target : Activity<?> Target activity of the service. Type Activity<?> Cardinality 0..1 Changeable false Derived true Opposite services Target activity of the service. Type Activity<?> Cardinality 0..1 Changeable false Derived true Opposite services"},"modules/html/modules/models/modules/html/modules/model/index.html":{"path":"Products/HTML/Models/HTML/Model","title":"Model","content":"HTML model Origin model/html/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/html/modules/model Dependencies HTML Exec Dependants Generation Adapters Model"},"modules/core/modules/flow/issues/model-documentation/index.html":{"path":"Products/Core/Flow/Issues/Fully document the model","title":"Fully document the model","content":"Link to this file - template-action. Origin flow/engineering/engineering.yml 57:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/model-documentation Increment December Target Flow Workable"},"modules/core/modules/flow/EntryPoint.html":{"path":"Products/Core/Flow/EntryPoint","title":"EntryPoint","content":"org.nasdanika.flow.EntryPoint Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\entry-point.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/core/modules/common/features.html":{"path":"Products/Core/Common/Features","title":"Features","content":"Execution Model"},"modules/html/modules/models/modules/app/modules/model/issues/carousel-section-style/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/Carousel section style","title":"Carousel section style","content":"Origin model/app/engineering.yml 8:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/carousel-section-style Target Model Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/ActionGroupItem.html":{"path":"Products/HTML/Models/Bootstrap/Model/ActionGroupItem","title":"ActionGroupItem","content":"org.nasdanika.html.model.bootstrap.ActionGroupItem Base class for action group items Supertypes Item Subtypes ContentActionGroupItem LinkActionGroupItem Referrers ActionGroup References name : EObject* Item name Type EObject Cardinality 0..* Changeable true Derived false name : EObject* Item name Type EObject Cardinality 0..* Changeable true Derived false Item name Type EObject Cardinality 0..* Changeable true Derived false"},"modules/core/modules/ncore/issues/action-prototype/index.html":{"path":"Products/Core/Ncore/Issues/Action prototype","title":"Action prototype","content":"ModelElement action prototype reference. If set and is Action then the action would be copied and then populated. If set and is not action, then adapted to ActionProvider. If not set, then an new action is created using AppFactory. This allows to merge actions generated by other tools or manually authored. E.g. ecore documentation actions or actions referencing ecore documentation. Origin ncore/engineering.yml 29:5 Uri engineering://nasdanika/modules/core/modules/ncore/issues/action-prototype Available Completion 100% Releases 2021.12.2 Status Done Target Ncore Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Column.html":{"path":"Products/HTML/Models/Bootstrap/Model/Column","title":"Column","content":"org.nasdanika.html.model.bootstrap.Column Container row column. Supertypes BootstrapElement Referrers Row References width : ColumnWidth* Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false width : ColumnWidth* Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false"},"modules/core/modules/diagram/modules/gen/index.html":{"path":"Products/Core/Diagram/Generators","title":"Generators","content":"Origin diagram.gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen Dependencies Model mxgraph Model Dependants Flow"},"modules/engineering/modules/gen/issues/rest-api/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/REST API","title":"REST API","content":"Generate static cross-refrencing JSON files which can be used for programmatic access by, say, single-page applications. For example, an issues table with filtering and sorting or by charts. May also generate a JavaScript API on top of the JSON \"dumb\" data - read-only properties returning promises. Ideally, the JSON should be loadable back to the model. Also may publish XMI at the root of the generated site - an alternative to Maven repository. Origin gen/engineering.yml 18:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/rest-api Target Generation Adapters Workable"},"increments/2022/children/Q3/children/aug/index.html":{"path":"Increments/2022/Q3/August","title":"August","content":"Origin engineering/nasdanika.yml 137:13 Uri engineering://nasdanika/increments/2022/children/Q3/children/aug Start Aug 1, 2022 End Sep 1, 2022 Duration 31 days"},"modules/core/modules/flow/issues/durations/index.html":{"path":"Products/Core/Flow/Issues/Durations","title":"Durations","content":"Activity and transition durations. Create DurationProbability class extending Duration in Flow, or just Duration with weight. Weight default value is 1. For flows without explicitly provided durations compute durations from elements. For a low number of permutations use all permutations, for a high use something like Monte Carlo method. In both cases computed results can be grouped into \"slices\" with different weights. Number of computed durations is an attribute with default value, say 10 or 20. Slicing may use the same weight for slices with a large number of samples and make the number of samples equal in each slice. For the tails of distribution and outliers it would use lower weights. The number of simulations to run shall be configurable via flow attribute(s). Options - total number, absolute, relative number - computed from the number of elements, time bound - no more than, say, 10 seconds, combination of thereof, e.g. no more than 10 seconds, but at least 1000 iterations even if it takes more than 10 seconds. Create a feature explaining how it works and how to use it. getDuration(double) method returning duration for a number between 0 and 1 - sum all weights, find an entry which the argument \"falls in\" and return it - running weight (sum) previous is lower, next is higher or there is no next (1). For a single element simply return its duration. Transition type - end-to-start (default), the other 3. Not applicable to calls - may have a diagnostic or throw an error if used on calls. Consider adding support of Duration Observation - value, when, maybe description. Derive distribution from observations if no durations were specified. Consider using some weight scale based on how far in the past, i.e. recent observations have more weight. Maybe a generic observation in Flow or Ncore model which may have individual named metrics - duration, sentiment (rating). Metrics may have individual comments. Observations may be captured in some system using, say, URI as a correlation id, and then be \"injected\" into the model during load. Then clear feature cache. Clear it on any mutation or have some dependency thing to know which mutations clear which cached feature - annotation, say \"depends\"? Origin flow/engineering/engineering.yml 94:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/durations Target Flow Workable"},"modules/core/modules/flow/Package.html":{"path":"Products/Core/Flow/Package","title":"Package","content":"org.nasdanika.flow.Package Package is a container of sub-packages, flows, resources, participants, and artifacts. Supertypes PackageElement<Package> Referrers Package PackageEntry Uses Package References activities : ActivityEntry* Activities and flows. Type ActivityEntry Cardinality 0..* Changeable true Derived false artifacts : ArtifactEntry* Flow artifacts. Type ArtifactEntry Cardinality 0..* Changeable true Derived false participants : ParticipantEntry* Flow participants. Type ParticipantEntry Cardinality 0..* Changeable true Derived false resources : ResourceEntry* Flow resources. Type ResourceEntry Cardinality 0..* Changeable true Derived false subPackages : PackageEntry* Packages contained in this package. Type PackageEntry Cardinality 0..* Changeable true Derived false superPackages : Package* Package can extend other packages and inherit their elements. This reference is required because extends reference is already defined in PackageElement as derived and immutable. For top-level packages extends is the same as this reference. For nested packages extends is a union of containment-derived extensions and this reference. Package own elements overide inherited elements with the same keys. To suppress an inheriIted element define an element with the same key and null value. Multiple inheritance allows to have \u201cmix-in\u201d packages. For example, the primary lineage can follow the organizational hierarchy with base packages defining generic flows and then specializing at the lower levels of the organization, say to specific tools. Then there can be a technology tree, for example different cloud platforms. A set of flows defining development processes for a particular organization and a particular cloud technology would be a mix of the two inheritance hierarchies. Type Package Cardinality 0..* Changeable true Derived false activities : ActivityEntry* Activities and flows. Type ActivityEntry Cardinality 0..* Changeable true Derived false artifacts : ArtifactEntry* Flow artifacts. Type ArtifactEntry Cardinality 0..* Changeable true Derived false participants : ParticipantEntry* Flow participants. Type ParticipantEntry Cardinality 0..* Changeable true Derived false resources : ResourceEntry* Flow resources. Type ResourceEntry Cardinality 0..* Changeable true Derived false subPackages : PackageEntry* Packages contained in this package. Type PackageEntry Cardinality 0..* Changeable true Derived false superPackages : Package* Package can extend other packages and inherit their elements. This reference is required because extends reference is already defined in PackageElement as derived and immutable. For top-level packages extends is the same as this reference. For nested packages extends is a union of containment-derived extensions and this reference. Package own elements overide inherited elements with the same keys. To suppress an inheriIted element define an element with the same key and null value. Multiple inheritance allows to have \u201cmix-in\u201d packages. For example, the primary lineage can follow the organizational hierarchy with base packages defining generic flows and then specializing at the lower levels of the organization, say to specific tools. Then there can be a technology tree, for example different cloud platforms. A set of flows defining development processes for a particular organization and a particular cloud technology would be a mix of the two inheritance hierarchies. Type Package Cardinality 0..* Changeable true Derived false Activities and flows. Type ActivityEntry Cardinality 0..* Changeable true Derived false Flow artifacts. Type ArtifactEntry Cardinality 0..* Changeable true Derived false Flow participants. Type ParticipantEntry Cardinality 0..* Changeable true Derived false Flow resources. Type ResourceEntry Cardinality 0..* Changeable true Derived false Packages contained in this package. Type PackageEntry Cardinality 0..* Changeable true Derived false Package can extend other packages and inherit their elements. This reference is required because extends reference is already defined in PackageElement as derived and immutable. For top-level packages extends is the same as this reference. For nested packages extends is a union of containment-derived extensions and this reference. Package own elements overide inherited elements with the same keys. To suppress an inheriIted element define an element with the same key and null value. Multiple inheritance allows to have \u201cmix-in\u201d packages. For example, the primary lineage can follow the organizational hierarchy with base packages defining generic flows and then specializing at the lower levels of the organization, say to specific tools. Then there can be a technology tree, for example different cloud platforms. A set of flows defining development processes for a particular organization and a particular cloud technology would be a mix of the two inheritance hierarchies. Type Package Cardinality 0..* Changeable true Derived false"},"personas/java-developer/index.html":{"path":"Personas/Java Developer","title":"Java Developer","content":"Origin engineering/nasdanika.yml 22:5 Uri engineering://nasdanika/personas/java-developer Goals Efficiency Generated Documentation Efficiency Generated Documentation"},"modules/core/modules/flow/features/inheritance/index.html":{"path":"Products/Core/Flow/Features/Inheritance","title":"Inheritance","content":"Origin flow/engineering/engineering.yml 22:5 Uri engineering://nasdanika/modules/core/modules/flow/features/inheritance Nasdanika Flow supports package multiple inheritance, i.e. a package may extend one or more other packages. Flow inheritance can be useful in hierarchies such as organizational hierarchies and technology hierarchies. In an organizational hierarchy higher levels can define generic processes and specify which elements can be customized at lower levels and which cannot - final elements. Lower levels of the organization would customize what they need to their specifics, e.g. local regulations. Similar to that, in the world of technology one can define, say, a generic flow explaining how to develop and deploy a SpringBoot microservice. Then that flow can be customized to different ways to deploy, e.g. different cloud providers - private and public, and their offerings. For example, a package containing flows for agile software development using a particular technology, say SpringBoot on AWS, may extends a package containing generic agile flows as well as a package containing AWS-specific flows and other element which are agnostic to a particular development methodology. Extension packages may: * Add elements. * Override elements - replace definitions. * Suppress (remove) elements. This is similar to inheritance in object-oriented languages like lava where subclasses can add and override inherited methods. Method suppression is not available in lava. Similar to Java, elements can be defined as final and abstract - final elements cannot be overridden, and abstract elements must be overridden. For example, there might be an abstract flow for developing a cloud application with concrete elements which are common for different cloud providers and abstract elements which are provider or technology specific. Flow inheritance is also similar to basing Docker images on other images using FRROM, but with support of \u201cmix-in\u201d images with multiple inheritance. Inheritance allows multiple teams to incrementally build a \u201cwhole end-to-end picture\u201d for flow participants. Example AWS Agile Development extends Core Agile Development."},"modules/core/modules/exec/modules/model/Eval.html":{"path":"Products/Core/Exec/Model/Eval","title":"Eval","content":"org.nasdanika.exec.Eval Evaluates JavaScript script. Example exec-eval:\n   script: \n     content-text: 3 * val \n   bindings: \n     val: \n       content-text: 33\n Supertypes ModelElement References bindings : Property* Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false script : EObject Script source Type EObject Cardinality 1 Changeable true Derived false bindings : Property* Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false script : EObject Script source Type EObject Cardinality 1 Changeable true Derived false Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false Script source Type EObject Cardinality 1 Changeable true Derived false"},"modules/core/modules/flow/ServiceProvider.html":{"path":"Products/Core/Flow/ServiceProvider<T>","title":"ServiceProvider<T>","content":"org.nasdanika.flow.ServiceProvider Base class for package elements which an provide services - activities and flows which can be referenced from other activities and flows. For example, an infrastructure team participant may provide a service \u201cCreate a cloud environment\u201d. This service can be either called or referenced using Service from application development flows. E.g. \u201cCreate a DEV cloud environment\u201d, \u201cCreate a PROD cloud environment\u201d. The service itself can be a flow and reference services provided by other service providers. E.g. \u201cCreate a cloud environment\u201d service may call \u201cFinancial approval\u201d service provided by a Finance participant. A programming analogy would be service provider being a class and services being methods called by other classes. A distributed computing analogy would be service provider being a microservice and services being endpoints called by other microservices. Supertypes PackageElement<T> Subtypes Artifact Participant Resource References services : ActivityEntry* Services provided by a this service provider. Type ActivityEntry Cardinality 0..* Changeable true Derived false services : ActivityEntry* Services provided by a this service provider. Type ActivityEntry Cardinality 0..* Changeable true Derived false Services provided by a this service provider. Type ActivityEntry Cardinality 0..* Changeable true Derived false"},"modules/core/modules/flow/ResourceEntry.html":{"path":"Products/Core/Flow/ResourceEntry","title":"ResourceEntry","content":"java.util.Map.Entry Mapping of resource key to a resource. Null value suppresses inherited entry. Referrers Package Resource Attributes key : EString Resource key. Type EString Cardinality 1 Changeable true Derived false References value : Resource Resource. Use null to suppress inherited resource. Type Resource Cardinality 0..1 Changeable true Derived false key : EString Resource key. Type EString Cardinality 1 Changeable true Derived false Resource key. Type EString Cardinality 1 Changeable true Derived false value : Resource Resource. Use null to suppress inherited resource. Type Resource Cardinality 0..1 Changeable true Derived false Resource. Use null to suppress inherited resource. Type Resource Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/ecore/issues/action-template-annotation/index.html":{"path":"Products/HTML/Ecore/Issues/Action template annotation - location of an action resource to load a template from instead of using AppFactory.createAction(). Would allow to merge, say, navigation actions.","title":"Action template annotation - location of an action resource to load a template from instead of using AppFactory.createAction(). Would allow to merge, say, navigation actions.","content":"Origin ecore/engineering.yml 29:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/action-template-annotation Target Ecore Workable"},"modules/core/modules/common/issues/nsdiagram-dialect/index.html":{"path":"Products/Core/Common/Issues/Add support of nsdiagram dialect","title":"Add support of nsdiagram dialect","content":"Diagram YAML in a fenced block - might be easier to author in some cases than, say, PlantUML. As it will result in a circular dependency use a service or some other type of registration. A more radical way is to drop the enum altogether and switch to services. Origin common/engineering/engineering.yml 16:5 Uri engineering://nasdanika/modules/core/modules/common/issues/nsdiagram-dialect Target Common Workable"},"modules/core/modules/exec/modules/model/content/Text.html":{"path":"Products/Core/Exec/Model/Content/Text","title":"Text","content":"org.nasdanika.exec.content.Text Loads resource from a URL specified as resource value. The value is interpolated if interpolate is set to true, and then is resolved relative to the base URL. Use classpath scheme to load classloader resources. E.g. classpath:org/nasdanika/exec/some-resource.md Examples String content-resource: hello.txt\n Map content-resource:\n   description: Full resource definition\n   location: ${my-resources}/hello.txt \n   interpolate: true\n Classpath resource content-resource: classpath:org/nasdanika/exec/gen/tests/content/hello.txt\n Supertypes ModelElement Attributes content : EString Text content. Type EString Cardinality 1 Changeable true Derived false interpolate : EBoolean If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false content : EString Text content. Type EString Cardinality 1 Changeable true Derived false interpolate : EBoolean If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false Text content. Type EString Cardinality 1 Changeable true Derived false If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/app/index.html":{"path":"Products/HTML/Models/Application","title":"Application","content":"Origin model/engineering.yml 17:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app"},"modules/html/modules/models/modules/html/modules/model/ScriptReference.html":{"path":"Products/HTML/Models/HTML/Model/ScriptReference","title":"ScriptReference","content":"org.nasdanika.html.model.html.ScriptReference References external script. Supertypes ModelElement Attributes src : EString Script URL. Type EString Cardinality 1 Changeable true Derived false src : EString Script URL. Type EString Cardinality 1 Changeable true Derived false Script URL. Type EString Cardinality 1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Carousel.html":{"path":"Products/HTML/Models/Bootstrap/Model/Carousel","title":"Carousel","content":"org.nasdanika.html.model.bootstrap.Carousel Supertypes Div Attributes controls : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false crossFade : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false indicator : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false interval : EString Type EString Cardinality 0..1 Changeable true Derived false ride : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false References slides : Slide* Type Slide Cardinality 0..* Changeable true Derived false controls : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false crossFade : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false indicator : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false interval : EString Type EString Cardinality 0..1 Changeable true Derived false ride : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false slides : Slide* Type Slide Cardinality 0..* Changeable true Derived false Type Slide Cardinality 0..* Changeable true Derived false"},"modules/html/releases/2021-12-3/index.html":{"path":"Products/HTML/Releases/2021.12.3","title":"2021.12.3","content":"Origin engineering.yml 5:6 Uri engineering://nasdanika/modules/html/releases/2021-12-3 Issues Issue Module Increment Start End Duration Completion URI copy to clipboard icon EMF 100% Issue Module Increment Start End Duration Completion URI copy to clipboard icon EMF 100%"},"increments/2021/children/Q4/children/dec/index.html":{"path":"Increments/2021/Q4/December","title":"December","content":"Origin engineering/nasdanika.yml 79:13 Uri engineering://nasdanika/increments/2021/children/Q4/children/dec Start Dec 1, 2021 End Jan 1, 2022 Duration 31 days Releases Product Release Start End Duration Completion Core 2021.12.2 Dec 6, 2021 Dec 13, 2021 7 days Issues Issue Target Assignee Categories Priority Severity Status Workable Benefit Cost Effort Remaining cost Remaining effort Releases Contributes to Completion Fully document the model Flow Documentation Open Objectives Test Objective Product Release Start End Duration Completion Core 2021.12.2 Dec 6, 2021 Dec 13, 2021 7 days Issue Target Assignee Categories Priority Severity Status Workable Benefit Cost Effort Remaining cost Remaining effort Releases Contributes to Completion Fully document the model Flow Documentation Open Test Objective"},"modules/html/modules/flow/issues/unresolved-proxies/index.html":{"path":"Products/HTML/Flow/Issues/Unresolved proxies","title":"Unresolved proxies","content":"NPE at FlowStateDiagramGenerator.wire() in the grouping lambda because of unresolved proxy. Unresolved proxies shall be caught earlier in the pipeline. Origin flow/engineering.yml 12:5 Uri engineering://nasdanika/modules/html/modules/flow/issues/unresolved-proxies Target Flow Workable"},"modules/core/modules/exec/modules/model/resources/ReconcileAction.html":{"path":"Products/Core/Exec/Model/Resources/ReconcileAction","title":"ReconcileAction","content":"org.nasdanika.exec.resources.ReconcileAction Defines an action to take when a resource with the same name already exists. Literals Append Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancel Cancels execution if resource already exists. Keep Keeps the existing resource intact. Merge Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrite Overwrites existing resource. For containers - deletes their contents. Uses Resource Append Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancel Cancels execution if resource already exists. Keep Keeps the existing resource intact. Merge Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrite Overwrites existing resource. For containers - deletes their contents. Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancels execution if resource already exists. Keeps the existing resource intact. Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrites existing resource. For containers - deletes their contents. Resource"},"modules/html/modules/emf/issues/uri-copy-to-clipboard-relative/index.html":{"path":"Products/HTML/EMF/Issues/Relative URI copy to clipboard","title":"Relative URI copy to clipboard","content":"Drop-down or a dialog with a base URI field to compute relative URI's. Use of relative URI's may be preferred in models which are intended to be reused and the root URI may change. Origin emf/engineering.yml 29:5 Uri engineering://nasdanika/modules/html/modules/emf/issues/uri-copy-to-clipboard-relative Target EMF Workable"},"modules/html/modules/models/modules/bootstrap/modules/gen/issues/slide-captions/index.html":{"path":"Products/HTML/Models/Bootstrap/Generation Adapters/Issues/Carousel slide captions","title":"Carousel slide captions","content":"Origin model/bootstrap.gen/engineering.yml 10:6 Uri engineering://nasdanika/modules/html/modules/models/modules/bootstrap/modules/gen/issues/slide-captions Target Generation Adapters Workable"},"modules/engineering/modules/model/journey/Journey.html":{"path":"Products/Engineering/Model/Journey/Journey","title":"Journey","content":"org.nasdanika.engineering.journey.Journey Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.engineering\\model\\doc\\flow\\journey.md (The system cannot find the path specified) Supertypes Flow"},"modules/core/modules/flow/Start.html":{"path":"Products/Core/Flow/Start","title":"Start","content":"org.nasdanika.flow.Start Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\start.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/core/modules/exec/index.html":{"path":"Products/Core/Exec","title":"Exec","content":"Origin engineering.yml 20:8 Uri engineering://nasdanika/modules/core/modules/exec Dependants Generation Adapters Model"},"increments/2022/children/Q1/children/jan/index.html":{"path":"Increments/2022/Q1/January","title":"January","content":"Origin engineering/nasdanika.yml 99:13 Uri engineering://nasdanika/increments/2022/children/Q1/children/jan Start Jan 1, 2022 End Feb 1, 2022 Duration 31 days"},"issue-severities/low/index.html":{"path":"Issue/Severities/Low","title":"Low","content":"Origin engineering/nasdanika.yml 49:5 Uri engineering://nasdanika/issue-severities/low"},"modules/html/modules/models/modules/bootstrap/modules/model/ListGroup.html":{"path":"Products/HTML/Models/Bootstrap/Model/ListGroup","title":"ListGroup","content":"org.nasdanika.html.model.bootstrap.ListGroup"},"increments/2021/children/Q4/children/dec/objectives/test-objective/key-results/do-something/index.html":{"path":"Increments/2021/Q4/December/Objectives/Test Objective/Key Results/Do something","title":"Do something","content":"Origin engineering/nasdanika.yml 87:21 Uri engineering://nasdanika/increments/2021/children/Q4/children/dec/objectives/test-objective/key-results/do-something"},"modules/engineering/modules/model/Forum.html":{"path":"Products/Engineering/Model/Forum","title":"Forum","content":"org.nasdanika.engineering.Forum Discussion forum which can contain sub-forums and discussion topics. Engineered element extends forum, which means that discussions are supported at many model elements: Activities and journeys, Documents and document sections, Modules and Products, Personas, engineers, and organizations. Essentially, for engineered elements discussion forums are the means for owners and experts to support element level focused (micro) communities. Supertypes NamedElement Subtypes EngineeredElement Referrers Forum References discussion : Forum* Sub-forums. Type Forum Cardinality 0..* Changeable true Derived false topics : Topic* Discussion topics in this forum. Type Topic Cardinality 0..* Changeable true Derived false discussion : Forum* Sub-forums. Type Forum Cardinality 0..* Changeable true Derived false topics : Topic* Discussion topics in this forum. Type Topic Cardinality 0..* Changeable true Derived false Sub-forums. Type Forum Cardinality 0..* Changeable true Derived false Discussion topics in this forum. Type Topic Cardinality 0..* Changeable true Derived false"},"modules/core/modules/flow/issues/categories/index.html":{"path":"Products/Core/Flow/Issues/Categories","title":"Categories","content":"Grouping mechanism, maybe have it in Ncore. A category is a named element with id (use uuid?). Elements have a list of categories. If it is not empty, elements may be grouped into categories with categories list being a (tree) path. Can be used to group service activities into \"domains\". Categorization does not affect URI's. Origin flow/engineering/engineering.yml 119:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/categories Target Flow Workable"},"modules/core/modules/ncore/Adaptable.html":{"path":"Products/Core/Ncore/Adaptable","title":"Adaptable","content":"org.nasdanika.common.Adaptable Subtypes ModelElement"},"modules/html/modules/models/modules/app/modules/model/SectionStyle.html":{"path":"Products/HTML/Models/Application/Model/SectionStyle","title":"SectionStyle","content":"org.nasdanika.html.model.app.SectionStyle Literals Auto Action group Card Card pill Card tab Header Pill Tab Table Uses Action ContentPanel Auto Action group Card Card pill Card tab Header Pill Tab Table          Action ContentPanel"},"modules/core/modules/flow/ParticipantEntry.html":{"path":"Products/Core/Flow/ParticipantEntry","title":"ParticipantEntry","content":"java.util.Map.Entry Mapping of a participant key to a participant. Null value suppresses inherited entry. Referrers Package Participant Attributes key : EString Participant key. Type EString Cardinality 1 Changeable true Derived false References value : Participant Participant. Use null to suppress inherited participant. Type Participant Cardinality 0..1 Changeable true Derived false key : EString Participant key. Type EString Cardinality 1 Changeable true Derived false Participant key. Type EString Cardinality 1 Changeable true Derived false value : Participant Participant. Use null to suppress inherited participant. Type Participant Cardinality 0..1 Changeable true Derived false Participant. Use null to suppress inherited participant. Type Participant Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/gen/issues/configurable-tables/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Configurable tables","title":"Configurable tables","content":"Sortable, filterable, pagination, column selection - remember in local storage. Consider using Vue, Knockout is obsolete - https://v3.vuejs.org/guide/introduction.html#getting-started Forms doc: https://vuejs.org/v2/guide/forms.html, https://bootstrap-vue.org/docs/components/form-checkbox, https://vuejs.org/v2/guide/events.html Form example: https://codepen.io/riix/pen/MeYogB https://codepen.io/zhaoqize/pen/JWGGrL, https://codepen.io/beyondverage0908/pen/ebWzYj https://codepen.io/pespantelis/pen/ojwgPB, see my modifications in vue.md https://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs Paginated table: https://codepen.io/cslinmiso/pen/pbqALW React is also an option, but Vue seems to be simpler: https://codesandbox.io/embed/table-sorting-example-ur2z9?fontsize=14&hidenavigation=1&theme=dark https://github.com/wenzhixin/bootstrap-table Make a reusable component? Or a method, say buildDynamicTable() similar to buildTable(). Table configuration also bordered, striped, condensed, etc. https://cdnjs.com/libraries/vue https://techformist.com/use-vue-from-url-simple-app/ https://cdn.jsdelivr.net/npm/vue@3.2.24 Also render data as either hidden text or static table for search indexing - configurable. Origin gen/engineering.yml 30:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/configurable-tables Target Generation Adapters Workable"},"issue-priorities/low/index.html":{"path":"Issue/Priorities/Low","title":"Low","content":"Origin engineering/nasdanika.yml 36:5 Uri engineering://nasdanika/issue-priorities/low"},"modules/core/modules/exec/modules/model/Call.html":{"path":"Products/Core/Exec/Model/Call","title":"Call","content":"org.nasdanika.exec.Call Calls a Java method and returns the result. Currently can be used as content. Support of consumer and command will be implemented in the future releases. Can be configured with a String or a Map. In the first case the string is a fully qualified class name. The class is loaded and then is instantiated using the default constructor. See the \u201cLoad specification\u201d for the second case. Constructor and method are selected by matching the number of parameters. The first matched method or constructor is selected for invocation and then an attempt is made to convert arguments to constructor/method types. Examples Default property Class implements Supplier. exec-call: org.nasdanika.exec.gen.tests.TestCall$CallSupplier\n Static method exec-call:\n  class: org.nasdanika.exec.gen.tests.TestCall$CallTarget\n  method: helloWorld\n Constructor and method arguments exec-call:\n  class: org.nasdanika.exec.gen.tests.TestCall$CallTarget\n  method: greet\n  init:\n    content-text: Galaxy\n  arguments:\n    content-text: Hello\n Supertypes ModelElement Attributes method : EString An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false property : EString Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false service : EString Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false type : EString Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false References arguments : EObject* An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false init : EObject* An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false method : EString An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false property : EString Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false service : EString Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false type : EString Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false arguments : EObject* An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false init : EObject* An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false"},"modules/core/modules/flow/Call.html":{"path":"Products/Core/Flow/Call","title":"Call","content":"org.nasdanika.flow.Call Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\call.md (The system cannot find the path specified) Supertypes Transition Referrers Artifact CallEntry FlowElement Attributes responseKeys : EString* Keys of response artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false References response : Artifact* Response artifacts passed back from the target to the source activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite responseFor responseKeys : EString* Keys of response artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of response artifacts relative to the containing package artifacts/ reference. Type EString Cardinality 0..* Changeable true Derived false response : Artifact* Response artifacts passed back from the target to the source activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite responseFor Response artifacts passed back from the target to the source activity. Type Artifact Cardinality 0..* Changeable false Derived true Opposite responseFor"},"modules/engineering/modules/model/IssueCategory.html":{"path":"Products/Engineering/Model/IssueCategory","title":"IssueCategory","content":"org.nasdanika.engineering.IssueCategory A mechanism for grouping/tagging issues. E.g. \u201cGood First Issue\u201d, \u201cDocumentation\u201d, \u201cTechnical Debt\u201d. Issue categories can be organized into a hierarchy, e.g. \u201cTechnology/Java/Cloud/Spring\u201d. Issue category may be assigned weight which can be used for balanced allocation of efforts into \u201cbuckets\u201d. E.g. \u201cTechnical Debt\u201d category may have weight 0.1, which would mean that 10% of each increment shall be spent on addressing technical debt (if there are issues in that category). Issue category may also be marked as \u201ccumulative\u201d, which means that unspent capacity carries over. E.g. if a team spent 8% of their capacity on addressing technical debt in June, then they are expected to spend 12% in July. Supertypes Aim Referrers Allocation Engineer Issue IssueCategory Attributes cumulative : EBoolean If true, unused category weight \u201ccapacity\u201d is carried over to future increments and overused is subtracted from future increments. This allow low-weight categories to accumulate weight over time. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : EDouble Category relative importance. Can be used to allocate issues to increments in a balanced way. Type EDouble Cardinality 0..1 Changeable true Derived false References allocations : Allocation* Allocations for this category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite category children : IssueCategory* Issue categories can form a hierarchy. Type IssueCategory Cardinality 0..* Changeable true Derived false issues : Issue* Issues in the category. Type Issue Cardinality 0..* Changeable false Derived true Opposite categories cumulative : EBoolean If true, unused category weight \u201ccapacity\u201d is carried over to future increments and overused is subtracted from future increments. This allow low-weight categories to accumulate weight over time. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : EDouble Category relative importance. Can be used to allocate issues to increments in a balanced way. Type EDouble Cardinality 0..1 Changeable true Derived false If true, unused category weight \u201ccapacity\u201d is carried over to future increments and overused is subtracted from future increments. This allow low-weight categories to accumulate weight over time. Type EBoolean Cardinality 0..1 Changeable true Derived false Category relative importance. Can be used to allocate issues to increments in a balanced way. Type EDouble Cardinality 0..1 Changeable true Derived false allocations : Allocation* Allocations for this category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite category children : IssueCategory* Issue categories can form a hierarchy. Type IssueCategory Cardinality 0..* Changeable true Derived false issues : Issue* Issues in the category. Type Issue Cardinality 0..* Changeable false Derived true Opposite categories Allocations for this category. Type Allocation Cardinality 0..* Changeable false Derived true Opposite category Issue categories can form a hierarchy. Type IssueCategory Cardinality 0..* Changeable true Derived false Issues in the category. Type Issue Cardinality 0..* Changeable false Derived true Opposite categories"},"increments/2022/children/Q3/children/jul/index.html":{"path":"Increments/2022/Q3/July","title":"July","content":"Origin engineering/nasdanika.yml 133:13 Uri engineering://nasdanika/increments/2022/children/Q3/children/jul Start Jul 1, 2022 End Aug 1, 2022 Duration 31 days"},"modules/core/modules/diagram/modules/model/Connection.html":{"path":"Products/Core/Diagram/Model/Connection","title":"Connection","content":"org.nasdanika.diagram.Connection Connection between two diagram elements. Supertypes Style Referrers DiagramElement Relationship Attributes thickness : EInt Connection thickness. Type EInt Cardinality 0..1 Changeable true Derived false References target : DiagramElement Type DiagramElement Cardinality 0..1 Changeable true Derived false thickness : EInt Connection thickness. Type EInt Cardinality 0..1 Changeable true Derived false Connection thickness. Type EInt Cardinality 0..1 Changeable true Derived false target : DiagramElement Type DiagramElement Cardinality 0..1 Changeable true Derived false Type DiagramElement Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/app/modules/gen/issues/document-search/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters/Issues/Document search","title":"Document search","content":"Document how to implement search. Origin model/app.gen/engineering.yml 34:6 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen/issues/document-search Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generation Adapters Workable"},"modules/core/modules/diagram/modules/model/Diagram.html":{"path":"Products/Core/Diagram/Model/Diagram","title":"Diagram","content":"org.nasdanika.diagram.Diagram A diagram contains connected diagram elements. Supertypes NamedElement Referrers ModelElement RepresentationEntry Attributes context : EInt Depth of context elements to show on the diagram. Default is 0. -1 means no limit. Type EInt Cardinality 0..1 Changeable true Derived false depth : EInt Depth of the diagram partition elements. Default is -1 (no limit). Once the depth is reached content of partitions is not shown. Type EInt Cardinality 0..1 Changeable true Derived false hideEmptyDescription : EBoolean Hides empty descriptions on state diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false hideFootbox : EBoolean Hides footbox on sequence diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false type : EString Diagram type. Supported types: drawio:<location of drawio diagram resource relative to the model resource> - Loads draw.io diagram created in a draw.io web application or desktop application (also available in Microsoft Store) and generates HTML for embedding into a web page. Diagram elements and other attributes are ignored. plantuml:<dialect> - Generates a PlantUML diagram for a given dialect. Supported dialects: uml - sequence, use case, class, activity, component, state, object, deployment, timing, and network diagrams. salt - wireframe diagrams gantt - Gantt charts mindmap - mind maps wbs - work breakdown structures Default type is plantuml:uml. Type EString Cardinality 0..1 Changeable true Derived false vertical : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false References elements : DiagramElement* Type DiagramElement Cardinality 0..* Changeable true Derived false notes : Note* Diagram notes (legend). Type Note Cardinality 0..* Changeable true Derived false properties : Property* Diagram properties. Type Property Cardinality 0..* Changeable true Derived false context : EInt Depth of context elements to show on the diagram. Default is 0. -1 means no limit. Type EInt Cardinality 0..1 Changeable true Derived false depth : EInt Depth of the diagram partition elements. Default is -1 (no limit). Once the depth is reached content of partitions is not shown. Type EInt Cardinality 0..1 Changeable true Derived false hideEmptyDescription : EBoolean Hides empty descriptions on state diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false hideFootbox : EBoolean Hides footbox on sequence diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false type : EString Diagram type. Supported types: drawio:<location of drawio diagram resource relative to the model resource> - Loads draw.io diagram created in a draw.io web application or desktop application (also available in Microsoft Store) and generates HTML for embedding into a web page. Diagram elements and other attributes are ignored. plantuml:<dialect> - Generates a PlantUML diagram for a given dialect. Supported dialects: uml - sequence, use case, class, activity, component, state, object, deployment, timing, and network diagrams. salt - wireframe diagrams gantt - Gantt charts mindmap - mind maps wbs - work breakdown structures Default type is plantuml:uml. Type EString Cardinality 0..1 Changeable true Derived false vertical : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Depth of context elements to show on the diagram. Default is 0. -1 means no limit. Type EInt Cardinality 0..1 Changeable true Derived false Depth of the diagram partition elements. Default is -1 (no limit). Once the depth is reached content of partitions is not shown. Type EInt Cardinality 0..1 Changeable true Derived false Hides empty descriptions on state diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false Hides footbox on sequence diagrams. Type EBoolean Cardinality 0..1 Changeable true Derived false Diagram type. Supported types: drawio:<location of drawio diagram resource relative to the model resource> - Loads draw.io diagram created in a draw.io web application or desktop application (also available in Microsoft Store) and generates HTML for embedding into a web page. Diagram elements and other attributes are ignored. plantuml:<dialect> - Generates a PlantUML diagram for a given dialect. Supported dialects: uml - sequence, use case, class, activity, component, state, object, deployment, timing, and network diagrams. salt - wireframe diagrams gantt - Gantt charts mindmap - mind maps wbs - work breakdown structures Default type is plantuml:uml. Type EString Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false elements : DiagramElement* Type DiagramElement Cardinality 0..* Changeable true Derived false notes : Note* Diagram notes (legend). Type Note Cardinality 0..* Changeable true Derived false properties : Property* Diagram properties. Type Property Cardinality 0..* Changeable true Derived false Type DiagramElement Cardinality 0..* Changeable true Derived false Diagram notes (legend). Type Note Cardinality 0..* Changeable true Derived false Diagram properties. Type Property Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/issues/blog/index.html":{"path":"Products/Engineering/Model/Issues/Blog","title":"Blog","content":"The same reference type as discussion forum. The difference is that a blog starts with an \"answer\" topic and may contain questions, and discussion typicall starts with a question and then contains answers. Origin model/engineering.yml 35:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/blog Target Model Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Tag.html":{"path":"Products/HTML/Models/Bootstrap/Model/Tag","title":"Tag","content":"org.nasdanika.html.model.bootstrap.Tag HTML tag with Bootstrap appearance Supertypes Tag BootstrapElement Subtypes Div"},"modules/html/modules/flow/index.html":{"path":"Products/HTML/Flow","title":"Flow","content":"Origin flow/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/flow Dependencies EMF Dependants Generation Adapters"},"modules/engineering/modules/gen/issues/appearance/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Configurable appearance","title":"Configurable appearance","content":"Showing/hiding/placement - child, navigation, section, .../styling - icons. Perhaps appearance model and not specific just to engineering, but generic and handled at EObjectActionProvider with extensibility. References with eKeys shall make it easy to build such a model - class(ifier) and feature keys. More complex with operations, but it is an edge case. Modal actions. Cascading appearance. Ability to define Bootstrap appearance - extend? Custom properties, e.g. to show/hide columns in issue tables. Origin gen/engineering.yml 9:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/appearance Target Generation Adapters Workable"},"issue-severities/major/index.html":{"path":"Issue/Severities/Major","title":"Major","content":"Origin engineering/nasdanika.yml 45:5 Uri engineering://nasdanika/issue-severities/major"},"modules/engineering/modules/gen/issues/help-dialogs/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Help dialogs","title":"Help dialogs","content":"Markdown help resource. Superscript question mark if present. Origin gen/engineering.yml 24:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/help-dialogs Target Generation Adapters Workable"},"increments/2022/children/Q4/children/nov/index.html":{"path":"Increments/2022/Q4/November","title":"November","content":"Origin engineering/nasdanika.yml 154:13 Uri engineering://nasdanika/increments/2022/children/Q4/children/nov Start Nov 1, 2022 End Dec 1, 2022 Duration 30 days 1 hour"},"modules/core/modules/flow/features/raci/index.html":{"path":"Products/Core/Flow/Features/Responsibility Assignments (RACI)","title":"Responsibility Assignments (RACI)","content":"Origin flow/engineering/engineering.yml 29:5 Uri engineering://nasdanika/modules/core/modules/flow/features/raci TODO -"},"modules/html/releases.html":{"path":"Products/HTML/Releases","title":"Releases","content":"2021.12.3"},"modules/core/modules/exec/modules/model/content/Base64.html":{"path":"Products/Core/Exec/Model/Content/Base64","title":"Base64","content":"org.nasdanika.exec.content.Base64 Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.exec\\model\\doc\\content\\base-64.md (The system cannot find the file specified) Supertypes ModelElement References sources : EObject* Type EObject Cardinality 0..* Changeable true Derived false sources : EObject* Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/Product.html":{"path":"Products/Engineering/Model/Product","title":"Product","content":"org.nasdanika.engineering.Product Product is an object or a system made available for consumer use. Product addresses persona goals via its features. Product may have multiple releases. It can also contain activities and journeys demonstrating how to use the product and its features. Supertypes Module References features : Feature* Product features. Type Feature Cardinality 0..* Changeable true Derived false releases : Release* Product releases. Type Release Cardinality 0..* Changeable true Derived false features : Feature* Product features. Type Feature Cardinality 0..* Changeable true Derived false releases : Release* Product releases. Type Release Cardinality 0..* Changeable true Derived false Product features. Type Feature Cardinality 0..* Changeable true Derived false Product releases. Type Release Cardinality 0..* Changeable true Derived false"},"modules/core/modules/ncore/Marked.html":{"path":"Products/Core/Ncore/Marked","title":"Marked","content":"org.nasdanika.ncore.Marked Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.ncore\\model\\doc\\marked.md (The system cannot find the file specified) Supertypes IMarked Subtypes ModelElement References marker : Marker Type Marker Cardinality 0..1 Changeable true Derived false marker : Marker Type Marker Cardinality 0..1 Changeable true Derived false Type Marker Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/issues/document-features/index.html":{"path":"Products/Core/Flow/Issues/Document features","title":"Document features","content":"Origin flow/engineering/engineering.yml 67:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/document-features Target Flow Workable"},"modules/core/modules/ncore/issues/git-marker/index.html":{"path":"Products/Core/Ncore/Issues/GitMarker","title":"GitMarker","content":"Extends Marker. Method to NcoreUtil to scan a model and replace Markers with GitMarkers leveraging jGit. Method takes Web UI URL computer function - Git provider specific - GitHub uses path, Bitbucket query parameters. Origin(s), references, author, date, commit, blame - line number author. A way to compute line range for an object - from own marker to the next sibling marker. Shall be done at YAML lavel, maybe too involved. Info dialog in the UI showing Git info. Remotes, origin remote is a special case. Or take the first remote and use it as the property label. Analyze whether Marker is GitMarker at the time of injection to EObject. Another option is to handle it at even lower level - YAML/persistence. Would need GitMarker interface and impl. class at that level as well. Optional behavior, true by default - may slow down loading, but should be worth it. Can be used for (remote) branch-specific publishing, e.g. origin/branches/master or origin/branches/tags/rel-1.0 Origin ncore/engineering.yml 16:5 Uri engineering://nasdanika/modules/core/modules/ncore/issues/git-marker Target Ncore Workable"},"modules/engineering/modules/model/Capability.html":{"path":"Products/Engineering/Model/Capability","title":"Capability","content":"org.nasdanika.engineering.Capability Capability is something that can be required by an issue to start working on it. E.g. another issue to be completed or a release to be available. Supertypes NamedElement Period Subtypes EngineeredCapability Referrers Issue Attributes available : EBoolean Indicates that this capability is available and issues which require it are workable, unless they have other unavailable requirements. Type EBoolean Cardinality 0..1 Changeable true Derived false References requiredBy : Issue* Issues requiring this capability. Type Issue Cardinality 0..* Changeable false Derived true Opposite requires available : EBoolean Indicates that this capability is available and issues which require it are workable, unless they have other unavailable requirements. Type EBoolean Cardinality 0..1 Changeable true Derived false Indicates that this capability is available and issues which require it are workable, unless they have other unavailable requirements. Type EBoolean Cardinality 0..1 Changeable true Derived false requiredBy : Issue* Issues requiring this capability. Type Issue Cardinality 0..* Changeable false Derived true Opposite requires Issues requiring this capability. Type Issue Cardinality 0..* Changeable false Derived true Opposite requires"},"modules/core/modules/ncore/Map.html":{"path":"Products/Core/Ncore/Map","title":"Map","content":"org.nasdanika.ncore.Map Subtypes MapProperty References value : Property* Type Property Cardinality 0..* Changeable true Derived false value : Property* Type Property Cardinality 0..* Changeable true Derived false Type Property Cardinality 0..* Changeable true Derived false"},"issue-categories/development/index.html":{"path":"Issue/Categories/Development","title":"Development","content":"Origin engineering/nasdanika.yml 31:5 Uri engineering://nasdanika/issue-categories/development"},"modules/core/modules/exec/modules/model/content/package-summary.html":{"path":"Products/Core/Exec/Model/Content","title":"Content","content":"Content classes are adapted to SupplierFactory<InputStream> to supply content for files, HTTP Call bodies etc. in a form of input streams."},"modules/core/modules/exec/modules/model/resources/Resource.html":{"path":"Products/Core/Exec/Model/Resources/Resource","title":"Resource","content":"org.nasdanika.exec.resources.Resource A base class of File and Container. Supertypes ModelElement Subtypes Container File Referrers Action Uses Container Attributes name : EString Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false reconcileAction : ReconcileAction Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false References contents : EObject* Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false merger : EObject Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false name : EString Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false reconcileAction : ReconcileAction Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false contents : EObject* Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false merger : EObject Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/html/modules/model/Page.html":{"path":"Products/HTML/Models/HTML/Model/Page","title":"Page","content":"org.nasdanika.html.model.html.Page HTML page. The name attribute is output as title tag in the head. Overview video - in Russian. Supertypes ModelElement Subtypes Page Attributes language : EString Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false name : EString Type EString Cardinality 0..1 Changeable true Derived false scripts : EString* Script URL\u2019s Type EString Cardinality 0..* Changeable true Derived false stylesheets : EString* Stylesheet URL\u2019s Type EString Cardinality 0..* Changeable true Derived false References body : EObject* Body content. Type EObject Cardinality 0..* Changeable true Derived false builders : EObject* Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false head : EObject* Head content. Type EObject Cardinality 0..* Changeable true Derived false language : EString Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false name : EString Type EString Cardinality 0..1 Changeable true Derived false scripts : EString* Script URL\u2019s Type EString Cardinality 0..* Changeable true Derived false stylesheets : EString* Stylesheet URL\u2019s Type EString Cardinality 0..* Changeable true Derived false Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false Script URL\u2019s Type EString Cardinality 0..* Changeable true Derived false Stylesheet URL\u2019s Type EString Cardinality 0..* Changeable true Derived false body : EObject* Body content. Type EObject Cardinality 0..* Changeable true Derived false builders : EObject* Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false head : EObject* Head content. Type EObject Cardinality 0..* Changeable true Derived false Body content. Type EObject Cardinality 0..* Changeable true Derived false Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false Head content. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/gen/issues/in-browser-editing/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/In-browsing editing feature","title":"In-browsing editing feature","content":"Collaboration, inner source. Create pull request. Related to Data Provenance. Origin gen/engineering.yml 27:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/in-browser-editing Target Generation Adapters Workable"},"modules/html/modules/ecore/issues/javadoc/index.html":{"path":"Products/HTML/Ecore/Issues/Javadoc link to instance class.","title":"Javadoc link to instance class.","content":"Origin ecore/engineering.yml 31:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/javadoc Target Ecore Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Size.html":{"path":"Products/HTML/Models/Bootstrap/Model/Size","title":"Size","content":"org.nasdanika.html.bootstrap.Size Uses Spacing"},"modules/engineering/releases.html":{"path":"Products/Engineering/Releases","title":"Releases","content":"2021.12.4"},"modules/engineering/modules/model/Persona.html":{"path":"Products/Engineering/Model/Persona","title":"Persona","content":"org.nasdanika.engineering.Persona Personas represent represent the different types of consumers of products and services. Personas may have goals and form an inheritance hierarchy using extends reference. Personas also may define activities or journeys describing how they interact with services and product features. Personas may also have engineers serving as persona representatives and helping the persona owner to refine the persona definition. For example, in a large organization some department may be serving internal customers by providing services or products. Say, a tooling team provides a code generator for developers. In this case the tooling team would create a \u201cDeveloper\u201d persona and work with several developers as that persona representatives to refine the persona definitions and persona goals and then identify code generator features to be implemented to achieve the persona\u2019s goals. Engineer and as such Organization are sub-classes of Persona and therefore may also define goals. Supertypes EngineeredElement Subtypes Engineer Referrers Engineer Persona References extends : Persona* A persona may extend another persona. E.g. \u201cModerator\u201d discussion forum persona extends \u201cUser\u201d persona, which may in turn extend \u201cVisitor\u201d persona. This persona inherits goals for the extended personas. Type Persona Cardinality 0..* Changeable true Derived false Opposite extensions extensions : Persona* Personas extending this persona. Type Persona Cardinality 0..* Changeable false Derived true Opposite extends goals : Goal* Persona goals are used to elicit and align endeavors. E.g. new product features. Type Goal Cardinality 0..* Changeable true Derived false representatives : Engineer* Engineers which represent this persona. E.g. in a hierarchical organization some units or engineers may build products for internal customers - other units or engineers. In this case some of those internal customers act as persona representatives and work with the persona owner to identify persona goals and product features to address those goals. Type Engineer Cardinality 0..* Changeable true Derived false Opposite represents extends : Persona* A persona may extend another persona. E.g. \u201cModerator\u201d discussion forum persona extends \u201cUser\u201d persona, which may in turn extend \u201cVisitor\u201d persona. This persona inherits goals for the extended personas. Type Persona Cardinality 0..* Changeable true Derived false Opposite extensions extensions : Persona* Personas extending this persona. Type Persona Cardinality 0..* Changeable false Derived true Opposite extends goals : Goal* Persona goals are used to elicit and align endeavors. E.g. new product features. Type Goal Cardinality 0..* Changeable true Derived false representatives : Engineer* Engineers which represent this persona. E.g. in a hierarchical organization some units or engineers may build products for internal customers - other units or engineers. In this case some of those internal customers act as persona representatives and work with the persona owner to identify persona goals and product features to address those goals. Type Engineer Cardinality 0..* Changeable true Derived false Opposite represents A persona may extend another persona. E.g. \u201cModerator\u201d discussion forum persona extends \u201cUser\u201d persona, which may in turn extend \u201cVisitor\u201d persona. This persona inherits goals for the extended personas. Type Persona Cardinality 0..* Changeable true Derived false Opposite extensions Personas extending this persona. Type Persona Cardinality 0..* Changeable false Derived true Opposite extends Persona goals are used to elicit and align endeavors. E.g. new product features. Type Goal Cardinality 0..* Changeable true Derived false Engineers which represent this persona. E.g. in a hierarchical organization some units or engineers may build products for internal customers - other units or engineers. In this case some of those internal customers act as persona representatives and work with the persona owner to identify persona goals and product features to address those goals. Type Engineer Cardinality 0..* Changeable true Derived false Opposite represents"},"modules/html/modules/models/modules/bootstrap/modules/model/ColumnWidth.html":{"path":"Products/HTML/Models/Bootstrap/Model/ColumnWidth","title":"ColumnWidth","content":"org.nasdanika.html.model.bootstrap.ColumnWidth Column width for a given breakpoint. Referrers Column Attributes breakpoint : EString Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false width : EString Column width. Type EString Cardinality 0..1 Changeable true Derived false breakpoint : EString Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false width : EString Column width. Type EString Cardinality 0..1 Changeable true Derived false Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false Column width. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Badge.html":{"path":"Products/HTML/Models/Bootstrap/Model/Badge","title":"Badge","content":"org.nasdanika.html.model.bootstrap.Badge Supertypes Div Attributes color : Color Type Color Cardinality 0..1 Changeable true Derived false color : Color Type Color Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/CallEntry.html":{"path":"Products/Core/Flow/CallEntry","title":"CallEntry","content":"java.util.Map.Entry Mapping of call key to a call. Null value suppresses inherited entry. Referrers FlowElement Attributes key : EString Call key. Type EString Cardinality 1 Changeable true Derived false References value : Call Call. Use null to suppress inherited sub-package. Type Call Cardinality 0..1 Changeable true Derived false key : EString Call key. Type EString Cardinality 1 Changeable true Derived false Call key. Type EString Cardinality 1 Changeable true Derived false value : Call Call. Use null to suppress inherited sub-package. Type Call Cardinality 0..1 Changeable true Derived false Call. Use null to suppress inherited sub-package. Type Call Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/html/modules/model/issues/fluent-api/index.html":{"path":"Products/HTML/Models/HTML/Model/Issues/Fluent API","title":"Fluent API","content":"attribute() to add attribute, class(), style(), content(Object) - convert to text if not EObject and add. The goal it to make the model API easier to work with. Review HTMLElement methods and BootstrapElement methods. Implement in the model. Origin model/html/engineering.yml 9:5 Uri engineering://nasdanika/modules/html/modules/models/modules/html/modules/model/issues/fluent-api Target Model Workable"},"increments/2022/children/Q2/children/jun/index.html":{"path":"Increments/2022/Q2/June","title":"June","content":"Origin engineering/nasdanika.yml 124:13 Uri engineering://nasdanika/increments/2022/children/Q2/children/jun Start Jun 1, 2022 End Jul 1, 2022 Duration 30 days"},"modules/html/modules/models/modules/bootstrap/modules/model/TableConfiguration.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableConfiguration","title":"TableConfiguration","content":"org.nasdanika.html.model.bootstrap.TableConfiguration Configuration of bootstrap table Subtypes Table Attributes bordered : EBoolean Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false borderless : EBoolean Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false dark : EBoolean Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false hover : EBoolean If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false small : EBoolean Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false striped : EBoolean Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false bordered : EBoolean Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false borderless : EBoolean Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false dark : EBoolean Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false hover : EBoolean If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false small : EBoolean Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false striped : EBoolean Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/engineering/releases/2021-12-4/index.html":{"path":"Products/Engineering/Releases/2021.12.4","title":"2021.12.4","content":"Origin engineering.yml 5:6 Uri engineering://nasdanika/modules/engineering/releases/2021-12-4"},"modules/html/modules/models/modules/bootstrap/modules/model/ActionGroup.html":{"path":"Products/HTML/Models/Bootstrap/Model/ActionGroup","title":"ActionGroup","content":"org.nasdanika.html.model.bootstrap.ActionGroup List group with actions (links). Supertypes Div Attributes flush : EBoolean Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false References items : ActionGroupItem* Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false flush : EBoolean Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false items : ActionGroupItem* Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/TableCell.html":{"path":"Products/HTML/Models/Bootstrap/Model/TableCell","title":"TableCell","content":"org.nasdanika.html.model.bootstrap.TableCell Table cell - regular or header. Supertypes BootstrapElement Referrers TableRow Attributes background : Color Cell background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false colSpan : EInt Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false color : Color Cell color. Type Color Cardinality 0..1 Changeable true Derived false header : EBoolean If true, table cell is generated as <th> instead of the default <td>. Type EBoolean Cardinality 0..1 Changeable true Derived false rowSpan : EInt Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false background : Color Cell background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false colSpan : EInt Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false color : Color Cell color. Type Color Cardinality 0..1 Changeable true Derived false header : EBoolean If true, table cell is generated as <th> instead of the default <td>. Type EBoolean Cardinality 0..1 Changeable true Derived false rowSpan : EInt Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false Cell background color. Displays differently from \u201cColor\u201d. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false Cell color. Type Color Cardinality 0..1 Changeable true Derived false If true, table cell is generated as <th> instead of the default <td>. Type EBoolean Cardinality 0..1 Changeable true Derived false Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/emf/issues/temporal-rendering/index.html":{"path":"Products/HTML/EMF/Issues/Temporal rendering","title":"Temporal rendering","content":"Implement for relative temporals, generate start/end actions for period subclasses if start/end temporals have offset, base, bounds, or derivatives. Also info icon in render value navigating to the respective actions. Origin emf/engineering.yml 12:5 Uri engineering://nasdanika/modules/html/modules/emf/issues/temporal-rendering Target EMF Workable"},"modules/togaf/modules/adm/issues/migrate-to-maven-plugin/index.html":{"path":"Products/TOGAF/ADM/Issues/Migrate to Maven plug-in","title":"Migrate to Maven plug-in","content":"Migrate generation from tests to Maven plug-in once available. Origin adm/engineering.yml 8:5 Uri engineering://nasdanika/modules/togaf/modules/adm/issues/migrate-to-maven-plugin Target ADM Workable"},"modules/togaf/modules/adm/index.html":{"path":"Products/TOGAF/ADM","title":"ADM","content":"Origin adm/engineering.yml 1:1 Uri engineering://nasdanika/modules/togaf/modules/adm"},"modules/core/modules/ncore/BooleanProperty.html":{"path":"Products/Core/Ncore/BooleanProperty","title":"BooleanProperty","content":"org.nasdanika.ncore.BooleanProperty Supertypes Property Boolean"},"modules/engineering/modules/gen/issues/marker-relative-drawio-representation/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Marker-relative drawio representations","title":"Marker-relative drawio representations","content":"Currently is resolved relative to the instance model. If URL starts with ./ resolve relative to the marker. Or interpolate with ${marker-location} token. Origin gen/engineering.yml 62:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/marker-relative-drawio-representation Target Generation Adapters Workable"},"issue-statuses/done/index.html":{"path":"Issue/Statuses/Done","title":"Done","content":"Origin engineering/nasdanika.yml 56:5 Uri engineering://nasdanika/issue-statuses/done Done Issues Issue Module Increment Assignee Start End Duration Completion Action prototype Ncore Documentation 100% URI copy to clipboard icon EMF Documentation 100% Issue Module Increment Assignee Start End Duration Completion Action prototype Ncore Documentation 100% URI copy to clipboard icon EMF Documentation 100%"},"modules/engineering/modules/model/Alignment.html":{"path":"Products/Engineering/Model/Alignment","title":"Alignment","content":"org.nasdanika.engineering.Alignment An association class between aims and engineered capabilities. Aims can be aligned to higher level aims and engineered capabilities can be aligned to aims. Examples: A team objective can be aligned to a company\u2019s objective key result. The company objective can in turn can be aligned to a company or persona goal. Feature can be aligned to an objective or a goal. Supertypes ModelElement Referrers Aim Alignable Attributes weight : EDouble Alignment weight can be used with Objective and KeyResult aims to indicate how much the containing endeavor contributes to completion of the aim. Type EDouble Cardinality 0..1 Changeable true Derived false References aim : Aim Aim to which the containing element, e.g. endeavor aligns. Type Aim Cardinality 0..1 Changeable true Derived false Opposite alignments weight : EDouble Alignment weight can be used with Objective and KeyResult aims to indicate how much the containing endeavor contributes to completion of the aim. Type EDouble Cardinality 0..1 Changeable true Derived false Alignment weight can be used with Objective and KeyResult aims to indicate how much the containing endeavor contributes to completion of the aim. Type EDouble Cardinality 0..1 Changeable true Derived false aim : Aim Aim to which the containing element, e.g. endeavor aligns. Type Aim Cardinality 0..1 Changeable true Derived false Opposite alignments Aim to which the containing element, e.g. endeavor aligns. Type Aim Cardinality 0..1 Changeable true Derived false Opposite alignments"},"modules/html/modules/models/modules/bootstrap/modules/model/BootstrapElement.html":{"path":"Products/HTML/Models/Bootstrap/Model/BootstrapElement","title":"BootstrapElement","content":"org.nasdanika.html.model.bootstrap.BootstrapElement An HTML element with Bootstrap appearance. Supertypes HtmlElement Subtypes Column Container Label Modal Page PagePart Row TableCell TableRow TableRowContainer Tag Referrers Card Modal References appearance : Appearance Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false appearance : Appearance Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/ContentActionGroupItem.html":{"path":"Products/HTML/Models/Bootstrap/Model/ContentActionGroupItem","title":"ContentActionGroupItem","content":"org.nasdanika.html.model.bootstrap.ContentActionGroupItem Action Group Item with content. Click on the item shows the content in the content container. Supertypes ActionGroupItem References content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Color.html":{"path":"Products/HTML/Models/Bootstrap/Model/Color","title":"Color","content":"org.nasdanika.html.bootstrap.Color Uses Alert Appearance Badge Border Button Item NavigationBar TableCell TableRow Text"},"modules/engineering/modules/model/Objective.html":{"path":"Products/Engineering/Model/Objective","title":"Objective","content":"org.nasdanika.engineering.Objective Objective is something that should be achieved as part of endeavor such as an increment or a release. An Objective sets the direction \u2014 like a destination on a map - where the engineer or an organization want to go. For example, a quarterly objective or an objective for release 1.0. Objectives can be contained by engineers and reference endeavors, or they may be contained by endeavors and in this case the endeavor assignee is the \u201cowner\u201d of the objective. Objectives can contain sub-objectives or they can point to a parent objective contained elsewhere. Objectives may contain key results, which are a way to measure progress towards the objective. Both objectives and key results extend aim and as such endeavors and other aims can be aligned to them. Example Joe Doe works for Acme Corp. Acme Corps defines an annual objective aligned to the corporate goals. Then it defines quarterly objectives aligned to the annual objective and key results for quarterly objectives. When the corporate objectives are published, Joe Doe creates his quarterly objectives and links them with a parent link to several key results of the corporate quarterly objectives. Then he defines key results under his objectives and aligns his endeavors to the key results. As he progresses through the endeavors and completes them, completion of the key results gets updated and rolls-up to his objectives and the corporate objectives. Supertypes KeyResult Referrers Endeavor Engineer Objective References children : Objective* Sub-objectives of this objective. Type Objective Cardinality 0..* Changeable true Derived false endeavor : Endeavor Endeavor for which containing engineer has this objective for. E.g. \u201cAchieve XYZ in Q2\u201d. Objectives can also be contained in endeavors directly. In this case they are assumed to be objectives of the assignee. Type Endeavor Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives keyResults : KeyResult* Key results for this objective. Type KeyResult Cardinality 0..* Changeable true Derived false linkedObjectives : Objective* Objectives linked to this one via the parent reference. Type Objective Cardinality 0..* Changeable false Derived true Opposite parent parent : Objective Objective can be linked to a parent objective it is not already a child of objective, i.e. is contained by an engineer or endeavor. Type Objective Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives subObjectives : Objective* A union of children and linked objectives. Type Objective Cardinality 0..* Changeable false Derived true children : Objective* Sub-objectives of this objective. Type Objective Cardinality 0..* Changeable true Derived false endeavor : Endeavor Endeavor for which containing engineer has this objective for. E.g. \u201cAchieve XYZ in Q2\u201d. Objectives can also be contained in endeavors directly. In this case they are assumed to be objectives of the assignee. Type Endeavor Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives keyResults : KeyResult* Key results for this objective. Type KeyResult Cardinality 0..* Changeable true Derived false linkedObjectives : Objective* Objectives linked to this one via the parent reference. Type Objective Cardinality 0..* Changeable false Derived true Opposite parent parent : Objective Objective can be linked to a parent objective it is not already a child of objective, i.e. is contained by an engineer or endeavor. Type Objective Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives subObjectives : Objective* A union of children and linked objectives. Type Objective Cardinality 0..* Changeable false Derived true Sub-objectives of this objective. Type Objective Cardinality 0..* Changeable true Derived false Endeavor for which containing engineer has this objective for. E.g. \u201cAchieve XYZ in Q2\u201d. Objectives can also be contained in endeavors directly. In this case they are assumed to be objectives of the assignee. Type Endeavor Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives Key results for this objective. Type KeyResult Cardinality 0..* Changeable true Derived false Objectives linked to this one via the parent reference. Type Objective Cardinality 0..* Changeable false Derived true Opposite parent Objective can be linked to a parent objective it is not already a child of objective, i.e. is contained by an engineer or endeavor. Type Objective Cardinality 0..1 Changeable true Derived false Opposite linkedObjectives A union of children and linked objectives. Type Objective Cardinality 0..* Changeable false Derived true"},"modules/core/modules/diagram/modules/model/index.html":{"path":"Products/Core/Diagram/Model","title":"Model","content":"Abstraction level for help with generating diagrams for multiple targets with PlantUML being the primary target. Origin diagram/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/diagram/modules/model Dependencies Ncore Dependants Generators Flow"},"modules/html/modules/ecore/issues/ekeys/index.html":{"path":"Products/HTML/Ecore/Issues/EKeys as qualifiers - similar to EMaps. Report in documentation.","title":"EKeys as qualifiers - similar to EMaps. Report in documentation.","content":"Origin ecore/engineering.yml 25:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/ekeys Target Ecore Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Collapse.html":{"path":"Products/HTML/Models/Bootstrap/Model/Collapse","title":"Collapse","content":"org.nasdanika.html.model.bootstrap.Collapse"},"modules/core/modules/flow/Flow.html":{"path":"Products/Core/Flow/Flow","title":"Flow","content":"org.nasdanika.flow.Flow Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\journey.md (The system cannot find the path specified) Supertypes Activity<Flow> Subtypes Journey Uses Flow Attributes partition : EBoolean If true, this flow shall be displayed as a partition on the parent flow diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false References elements : FlowElementEntry* Elements of this journey. Type FlowElementEntry Cardinality 0..* Changeable true Derived false partition : EBoolean If true, this flow shall be displayed as a partition on the parent flow diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false If true, this flow shall be displayed as a partition on the parent flow diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false elements : FlowElementEntry* Elements of this journey. Type FlowElementEntry Cardinality 0..* Changeable true Derived false Elements of this journey. Type FlowElementEntry Cardinality 0..* Changeable true Derived false"},"modules/core/modules/flow/TransitionEntry.html":{"path":"Products/Core/Flow/TransitionEntry","title":"TransitionEntry","content":"java.util.Map.Entry Mapping of output key to a transition. Null value suppresses inherited entry. Referrers FlowElement Attributes key : EString Output key. Type EString Cardinality 1 Changeable true Derived false References value : Transition Output transition. Use null to suppress inherited relationship. Type Transition Cardinality 0..1 Changeable true Derived false key : EString Output key. Type EString Cardinality 1 Changeable true Derived false Output key. Type EString Cardinality 1 Changeable true Derived false value : Transition Output transition. Use null to suppress inherited relationship. Type Transition Cardinality 0..1 Changeable true Derived false Output transition. Use null to suppress inherited relationship. Type Transition Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/emf/index.html":{"path":"Products/HTML/EMF","title":"EMF","content":"Origin emf/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/emf Dependencies HTML EMF Dependants Ecore Flow"},"issue-severities/critical/index.html":{"path":"Issue/Severities/Critical","title":"Critical","content":"Origin engineering/nasdanika.yml 43:5 Uri engineering://nasdanika/issue-severities/critical"},"modules/engineering/modules/model/Principle.html":{"path":"Products/Engineering/Model/Principle","title":"Principle","content":"org.nasdanika.engineering.Principle Principles are general rules and guidelines, intended to be enduring and seldom amended, that inform and support the way in which an engineer or an organization sets about achieving its goals or addressing goals of their consumers modeled as personas. Principles aims which form the basis for making decisions. For example, \u201cMobile First\u201d can be a principle for UI development, and \u201cCloud First\u201d can be a server-side development principle with the 12 factors as children (sub-principles). Supertypes Aim Referrers EngineeredElement Principle References children : Principle* Principles can be nested. E.g. Architectural Principles may contain Data Architecture principles. Type Principle Cardinality 0..* Changeable true Derived false children : Principle* Principles can be nested. E.g. Architectural Principles may contain Data Architecture principles. Type Principle Cardinality 0..* Changeable true Derived false Principles can be nested. E.g. Architectural Principles may contain Data Architecture principles. Type Principle Cardinality 0..* Changeable true Derived false"},"objectives/test-objective/key-results/do-something/index.html":{"path":"Objectives/Test Objective/Key Results/Do something","title":"Do something","content":"Origin engineering/nasdanika.yml 19:9 Uri engineering://nasdanika/objectives/test-objective/key-results/do-something"},"modules/core/modules/ncore/Duration.html":{"path":"Products/Core/Ncore/Duration","title":"Duration","content":"java.time.Duration Duration is an amount of time in the ISO-8601 Duration format. Supports days and smaller units. Weeks, months and years are not supported. Example: P28DT10H. Uses Period Temporal"},"modules/core/modules/exec/modules/model/Map.html":{"path":"Products/Core/Exec/Model/Map","title":"Map","content":"org.nasdanika.exec.Map Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.exec\\model\\doc\\map.md (The system cannot find the file specified) Supertypes ModelElement References entries : Property* Map entries. Type Property Cardinality 0..* Changeable true Derived false entries : Property* Map entries. Type Property Cardinality 0..* Changeable true Derived false Map entries. Type Property Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/html/index.html":{"path":"Products/HTML/Models/HTML","title":"HTML","content":"Origin model/engineering.yml 5:5 Uri engineering://nasdanika/modules/html/modules/models/modules/html"},"modules/core/modules/flow/features/data-provenance/index.html":{"path":"Products/Core/Flow/Features/Data Provenance","title":"Data Provenance","content":"Origin flow/engineering/engineering.yml 36:5 Uri engineering://nasdanika/modules/core/modules/flow/features/data-provenance Tracing definitions to Git files, lines, and commits."},"issue-categories.html":{"path":"Issue/Categories","title":"Categories","content":"Development Good First Issue"},"modules/core/modules/ncore/String.html":{"path":"Products/Core/Ncore/String","title":"String","content":"org.nasdanika.ncore.String Subtypes StringProperty Attributes value : EString Type EString Cardinality 0..1 Changeable true Derived false value : EString Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Alert.html":{"path":"Products/HTML/Models/Bootstrap/Model/Alert","title":"Alert","content":"org.nasdanika.html.model.bootstrap.Alert Supertypes Div Attributes color : Color Type Color Cardinality 0..1 Changeable true Derived false color : Color Type Color Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/issues/fluent-api/index.html":{"path":"Products/HTML/Models/Bootstrap/Model/Issues/Fluent API","title":"Fluent API","content":"Fluent API. e.g. appearance().margin().top(1) - creates apperance and margin on access. Model after the Bootstrap API Origin model/bootstrap/engineering.yml 9:5 Uri engineering://nasdanika/modules/html/modules/models/modules/bootstrap/modules/model/issues/fluent-api Target Model Workable"},"modules/engineering/modules/model/Capacity.html":{"path":"Products/Engineering/Model/Capacity","title":"Capacity","content":"org.nasdanika.engineering.Capacity Capacity is contained under Engineer and defines how much total effort or funds the containing engineer has to spend on a particular endeavor. It may also define rate applicable to that endeavor. For example, Acme Inc. has $1000 to spend in May increment and Joe Doe has 80 hours to spend on feature X. Engineer\u2019s capacity is allocated to engineered elements with an option to specify issue category. Supertypes ModelElement Subtypes Allocation Referrers Endeavor Engineer Attributes effort : EDouble For capacitly - amount of effort which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - amount of effort which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false funds : EDouble For capacitly - monetary amount which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - monetary amount which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false rate : EDouble For effort capacity, containing engineer rate, if different from the engineer\u2019s default rate. Type EDouble Cardinality 0..1 Changeable true Derived false References endeavor : Endeavor Endeavor for which containing engineer has this capacity for. Type Endeavor Cardinality 1 Changeable true Derived false Opposite capacity effort : EDouble For capacitly - amount of effort which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - amount of effort which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false funds : EDouble For capacitly - monetary amount which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - monetary amount which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false rate : EDouble For effort capacity, containing engineer rate, if different from the engineer\u2019s default rate. Type EDouble Cardinality 0..1 Changeable true Derived false For capacitly - amount of effort which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - amount of effort which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false For capacitly - monetary amount which the containing engineer can spend on the capacity\u2019s endeavor. For allocation - monetary amount which allocation\u2019s engineer can spend on the containing engineered element and, optionally, issue category. Type EDouble Cardinality 0..1 Changeable true Derived false For effort capacity, containing engineer rate, if different from the engineer\u2019s default rate. Type EDouble Cardinality 0..1 Changeable true Derived false endeavor : Endeavor Endeavor for which containing engineer has this capacity for. Type Endeavor Cardinality 1 Changeable true Derived false Opposite capacity Endeavor for which containing engineer has this capacity for. Type Endeavor Cardinality 1 Changeable true Derived false Opposite capacity"},"modules/html/modules/models/modules/app/modules/gen/issues/table-component/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters/Issues/Table component improvements","title":"Table component improvements","content":"Filterable flag to fields, also store, filterable column in the configuration table. Sortable flag to fields, also store, sortable column in the configuration table. Search using visible text, not HTML markup - an extra field, see if there are table facilities, use own filter function otherwise. Jsoup to produce text from markup during generation. Table configuration (style) - pagination, border, ... - two tabs in the dialog - Columns and Style. Primary key prop. Origin model/app.gen/engineering.yml 14:6 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen/issues/table-component Total cost 8.0 Effort 8.0 Remaining effort 8.0 Target Generation Adapters Workable"},"modules/core/modules/flow/InputPin.html":{"path":"Products/Core/Flow/InputPin","title":"InputPin","content":"org.nasdanika.flow.InputPin Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\input-pin.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/engineering/modules/model/Alignable.html":{"path":"Products/Engineering/Model/Alignable","title":"Alignable","content":"org.nasdanika.engineering.Alignable Something that can be aligned to aims by alignments - aims or endeavors. Subtypes Aim Endeavor References aligns : Alignment* Aims to which this alignable aligns. E.g. a module level principle may align to organization pirinciples. Type Alignment Cardinality 0..* Changeable true Derived false aligns : Alignment* Aims to which this alignable aligns. E.g. a module level principle may align to organization pirinciples. Type Alignment Cardinality 0..* Changeable true Derived false Aims to which this alignable aligns. E.g. a module level principle may align to organization pirinciples. Type Alignment Cardinality 0..* Changeable true Derived false"},"modules/engineering/issues/diagramming/index.html":{"path":"Products/Engineering/Issues/Diagramming","title":"Diagramming","content":"Diagramming model - PlantUML is the first generation target. mxGraph is the next - option to specify layout and merge updates with manually laid out diagrams - match by ID (URI digest), update only the semantic part if found. Delete if no match, some primitive layout for new - below all or similar to text wrapping - grow proportionally. First, validate compatibility of mxGraph-produced output with draw.io - mxGraph is end of life, but it is ostensibly used by draw.io If no compatibility - a primitive XML-based output - don't need much functionality. Longer-term potentially - diagram editing plug-in for Eclipse. Two levels of draw.io support: a) Token expansion on hand-crafted diagrams - decompress, expand tokens, re-compress and embed - handle at the core. b) Generation of (initial) diagrams and merging of changes - handle at its own product, try to leverage mxGraph. Support of Mermaid output. Origin engineering.yml 11:6 Uri engineering://nasdanika/modules/engineering/issues/diagramming Target Engineering Workable"},"modules/engineering/modules/model/EngineeredElement.html":{"path":"Products/Engineering/Model/EngineeredElement","title":"EngineeredElement","content":"org.nasdanika.engineering.EngineeredElement Engineered element is something that is \u201cbrought about\u201d by engineers working on issues associated with the engineered element. For example: One engineer may be trained by another engineer, Persona definition and goals my be elicited by interviewing persona representatives. Software Module source code can be modified to add new functionality. Document can be updated by adding new sections or elaborating existing content. Directory can be populated with resources. Organization can improve its efficiency by formally defining its services as activities and journeys. Engineered element may have owning engineers, who have authority over the element, and expert engineers, who know how to use the element, but do not have authority. E.g. a software library can be owned by a team of engineers and have experts who use the library in their solutions. Engineered element can define principles to support decision making and align engineered capabilities, e.g. issues. Published formally documented principles are important for Open and Inner Source projects to ensure contribution process efficiency. Engineers may be allocated some capacity to work on the engineered element\u2019s issues for a particular endeavor and issue category. Engineered element is a a subclass of Period and can have start, duration, and end. Semantics of those features depend on a subclass of engineered element. For example: JourneyElement - duration specifies how long it takes to complete an activity. E.g. P1D - one day, or PT2H15M - two hours and 15 minutes. Document, Module and Product - inception and retirement. Persona - when support of a given persona shall start and end. Engineer - when an engineer starts and ends their engagement. Organization - organization formation and disbandment. Supertypes Forum Period Subtypes Directory Document Domain Module Persona Referrers Domain Engineer Issue References allIssues : Issue* Issues (work items) for this element. Type Issue Cardinality 0..* Changeable false Derived true allocations : Allocation* Allocations of engineer\u2019s capacity to work on this engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable true Derived false experts : Engineer* Experts have expertise with the element, but no authority. E.g. they can help others with using the element, but cannot make changes in the element without owners\u2019 approval. Type Engineer Cardinality 0..* Changeable true Derived false Opposite expertise issues : Issue* Issues (work items) for this element. Type Issue Cardinality 0..* Changeable true Derived false owners : Engineer* Element owners have both expertise and authority over the element. Type Engineer Cardinality 0..* Changeable true Derived false Opposite owns principles : Principle* Principles associated with this element to support decision making. Type Principle Cardinality 0..* Changeable true Derived false allIssues : Issue* Issues (work items) for this element. Type Issue Cardinality 0..* Changeable false Derived true allocations : Allocation* Allocations of engineer\u2019s capacity to work on this engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable true Derived false experts : Engineer* Experts have expertise with the element, but no authority. E.g. they can help others with using the element, but cannot make changes in the element without owners\u2019 approval. Type Engineer Cardinality 0..* Changeable true Derived false Opposite expertise issues : Issue* Issues (work items) for this element. Type Issue Cardinality 0..* Changeable true Derived false owners : Engineer* Element owners have both expertise and authority over the element. Type Engineer Cardinality 0..* Changeable true Derived false Opposite owns principles : Principle* Principles associated with this element to support decision making. Type Principle Cardinality 0..* Changeable true Derived false Issues (work items) for this element. Type Issue Cardinality 0..* Changeable false Derived true Allocations of engineer\u2019s capacity to work on this engineered element issues for a particular endeavor and issue category. Type Allocation Cardinality 0..* Changeable true Derived false Experts have expertise with the element, but no authority. E.g. they can help others with using the element, but cannot make changes in the element without owners\u2019 approval. Type Engineer Cardinality 0..* Changeable true Derived false Opposite expertise Issues (work items) for this element. Type Issue Cardinality 0..* Changeable true Derived false Element owners have both expertise and authority over the element. Type Engineer Cardinality 0..* Changeable true Derived false Opposite owns Principles associated with this element to support decision making. Type Principle Cardinality 0..* Changeable true Derived false"},"modules/core/modules/emf/issues/map-markers/index.html":{"path":"Products/Core/EMF/Issues/Carry-over markers from Map entries to List elements","title":"Carry-over markers from Map entries to List elements","content":"ReferenceList - 81, 93. Origin emf/engineering.yml 9:7 Uri engineering://nasdanika/modules/core/modules/emf/issues/map-markers Target EMF Workable"},"modules/engineering/modules/gen/issues/issues-table/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/issuesTable() methods","title":"issuesTable() methods","content":"Generate items for all available features or at least the most of them. Take arguments for feature/column visibility, sortability, and filterability. Support of keying by model element and by string for computed features. Origin gen/engineering.yml 53:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/issues-table Target Generation Adapters Workable"},"modules/engineering/modules/model/issues/reporter/index.html":{"path":"Products/Engineering/Model/Issues/Reporter","title":"Reporter","content":"Add reported Engineer reference to Issue. Opposite reference reportedIssues - nav action similar to All Issues. Origin model/engineering.yml 27:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/reporter Target Model Workable"},"modules/html/modules/ecore/issues/association-classes/index.html":{"path":"Products/HTML/Ecore/Issues/Consider support of association classes using annotations. E.g. an annotation on the association class with target reference name. Say ``association-class-reference`` key with reference name.","title":"Consider support of association classes using annotations. E.g. an annotation on the association class with target reference name. Say ``association-class-reference`` key with reference name.","content":"Origin ecore/engineering.yml 27:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/association-classes Target Ecore Workable"},"modules/core/modules/exec/modules/gen/issues/maven-classloader/index.html":{"path":"Products/Core/Exec/Generation Adapters/Issues/Maven classloader","title":"Maven classloader","content":"For the call. Might be heavy, but powerful, it is not that much about the speed but about the result. https://stackoverflow.com/questions/35598239/load-maven-artifact-via-classloader. Origin exec.gen/engineering.yml 14:5 Uri engineering://nasdanika/modules/core/modules/exec/modules/gen/issues/maven-classloader Target Generation Adapters Workable"},"modules/html/modules/models/modules/html/modules/model/Script.html":{"path":"Products/HTML/Models/HTML/Model/Script","title":"Script","content":"org.nasdanika.html.model.html.Script Script with code stored in the model element source reference. Supertypes Filter"},"modules/html/modules/models/modules/app/modules/model/issues/js-tree-context-items/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/JsTree context items","title":"JsTree context items","content":"Label context list of labels. If present use JsTree context menu in the tree and on the page - find how it is done in the old server code on GitHub. In the content panel as well. Origin model/app/engineering.yml 16:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/js-tree-context-items Target Model Workable"},"increments/2021/children/Q4/index.html":{"path":"Increments/2021/Q4","title":"Q4","content":"Origin engineering/nasdanika.yml 74:9 Uri engineering://nasdanika/increments/2021/children/Q4 Start Oct 1, 2021 End Jan 1, 2022 Duration 92 days 1 hour"},"modules/core/modules/ncore/Instant.html":{"path":"Products/Core/Ncore/Instant","title":"Instant","content":"java.time.Instant Instant is a single instantaneous point on the time-line. If instant specification contains Z, then it is parsed using Instant.parse() method. Otherwise the specification is used to construct java.util.Date which is then converted to instant. Examples: 2021-12-03T10:15:30.00Z - loaded using Instant.parse() 10/1/2021 - loaded using new Date() and then converted to instant. Uses Temporal"},"index.html":{"title":"Documentation","content":"Origin engineering/nasdanika.yml 1:1 Uri engineering://nasdanika This page provides an overview of Nasdanika products. The primary target audience of the Nasdanika product line are Java developers who use Maven. The main theme can be expressed as \u201cEfficient knowledge capture and dissemination\u201d using Domain-Driven Design, Model-based Systems Engineering (MBSE) and code generation being the means to efficiently codify knowledge and then disseminate it. Well, it\u2019s a mouthful! Let\u2019s elaborate a bit! First of all, \u201cefficiency\u201d above means minimal requirements of human and computing resources per \u201cunit of knowledge\u201d. It also means hyper-local and hyper-focused experiences because humans are notoriously bad at context switching. One of approaches to minimize context switching is use of code generation using Java, e.g. generation of Bootstrap Web applications using fluent Java API. Another one is an option to author models in YAML without having to use a specialized model editor. Computing resources-wise - no need in server components, you can use Nasdanika products on a flash drive in a bunker or in the wilderness with no network: --everything-is-hyper-local, paraphrasing the Git motto. Access to the Internet would be needed only to pull the required libraries from Maven Central or a mirror. Sample scenario Models Engineering Flow Domain Meta-Model creation Meta-Model documentation Production of Meta-Model binaries Model editing Consumption of Meta-Model binaries Consumption of model content Use of the models Populate the model YAML or JSON Tree editor Diagram editor Specialized text editor Custom resources and factories Web application Programmatic Products overview Sample scenario You\u2019ve got an idea of a new \u201csomething\u201d - not necessarily software. Depending on the problem at hand, how your brain is wired, and who you need to communicate your idea to, you may start with а domain model, flow model, or the engineering model. Models Engineering With the engineering model you can define consumers of what you want to create - personas - and their goals. This will allow you to better understand and communicate the Why of your idea. It will also allow you enlist help of others, e.g. potential users, to elaborate the personas and their goals - they likely know better than you what they want, unless you are building it for yourself. Then1 you may define products and their features. You may break down products into modules. Align features to goals. This would define the What of your idea tied to the Why. Then, define releases, issues, increments, engineers. Assign features to releases, issues to features or releases, and releases to increments. Assign issues to engineers. You may also assign responsible engineers to releases, features, and increments. This would define the How and the When both traceable to the What (features) and the Why (persona goals). As it was mentioned above, all of that can be done on a local computer - you don\u2019t need any server component, you don\u2019t even need to keep it under version control, although it is a good idea. So, if you have a super-secret idea you can keep everything on an encrypted thumb drive and work on it at night in your basement. In a team environment you can use an isolated network to collaborate. One more advantage of everything is local is that you may produce self-contained idea definitions which can be archived, copied/forked etc. It allows to establish a discovery-delivery pipeline where many ideas can be brought to high enough level of detail to allow efficient selection for delivery later. Having shared definitions of personas, goals, principles, and objectives would simplify comparison of ideas based on their benefit and cost. There is more to it, see the engineering model documentation and a list of features for more details. Flow With Nasdanika Flow you can create and publish models of flows - graphs of activities performed by participants using resources and consuming and producing artifacts. With Nasdanika Flow you can model customer journeys and team processes. Services allow to build flows \u201cin terms\u201d of other flows, e.g. a customer journey flow referencing an internal process as an activity. Inheritance allows to define common flows and then customize them. For example, in an IT organization there might be core development process and then technology and regions specific extensions. The flow concepts are very similar to the concepts of a programming language, such as Java, or of a distributed system, such as a cloud application. In other words with Nasdanika Flow you can \u201cprogram\u201d or \u201ccodify\u201d operations of an organization. The journey package in the engineering model (work in progress) aims to provide a bridge between the flow model and then engineering model in order to allow to define flows at persona level, reference personas from participant definitions, products/features from resource definitions, etc. With that it would be possible to build persona (customer) journeys in terms of product features and services provided by the organization and its engineers. Domain Problem domain structure is captured in a form of EMF Ecore (meta) model using Ecore Tools, which are part of Eclipse Modeling Tools Package. You can use a diagram or a tree editor to create domain models. Flow and Engineering models mentioned above are examples of domain models for different problem domains. Domain models serve the following purposes: Form a Ubiquitous Language - a common rigorous language between users and developers. Nasdanika HTML Ecore allows to generate documentation from Ecore models, \u201cpublish a dictionary\u201d so to speak. It automatically generates pacakge diagrams, class context and inheritance diagrams. Documentation can be defined in annotations or loaded from external resources. Model documentation is written in Markdown and can contain embedded diagrams. Generate Java code to load, diagnose, manipulate and save models. EMF Ecore provides capabilities to load models from and save to XML (XMI). Nasdanika EMF adds an ability to load models from an arbitrary storage of maps, lists, and scalars - YAML, JSON, properties files. When loading from YAML the loaded injects markers into the loaded objects to trace data elements to resource (file), line, column where they were loaded from. If a Git repository is detected then a GitMarker is injected instead with information about remotes and the commit hash. In a a model loaded from multiple resources residing in multiple Git repositories it allows to trace data elements to their source in \u201cspace\u201d (repository, file, line and column) and time (commit). You\u2019ve probably heard before that \u201call models are wrong, but some are useful\u201d. Models are wrong by definition because their purpose to reflect an aspect of interest of reality. If we define usefulness as positive ROI and short time to market, then with Nasdanika approach to modeling it is easier to create a useful model because production and publication of a model requires less effort than alternative approaches as explained below. Meta-Model creation Use Ecore Tools. Meta-Model documentation Nasdanika: Generate HTML with visualizations from models, mount it to a larger site. This site is an example of this approach. Alternatives: Manual or Javadoc from generated model classes. Production of Meta-Model binaries Nasdanika: Maven Java build publishing to a Maven repository. Alternatives: Maven Tycho build generating a p2 site which needs to be hosted somewhere. Model editing Nasdanika: Any text editor to author YAML or JSON - use load specification from the generation documentation to create model instances. Alternatives: An editor shall be created and published to a p2 site and used from Eclipse. Or a web server is needed to host an in-browser editor. Consumption of Meta-Model binaries To programmatically read or write models. Nasdanika: Any Maven application - add a dependency. Alternatives: Eclipse product, OSGi bundle dependency. Consumption of model content Nasdanika: Generate an HTML site from the model. Alternatives: Requires Eclipse IDE and an editor/viewer or a server to host a web viewer One area where Nasdanika approach to modeling may be useful is disposable/situational models - use a modeling approach to solve a problem which is small enough to justify investment into graphical editors, p2 hosting etc., but large enough to benefit from automation. Metaphorically speaking, Nasdanika uses r-selection - create cheap models quickly, see which one is useful and then invest more if needed. The alternatives tend to be closer to the K end of the spectrum requiring larger up-front investment. Use of the models Populate the model Once there is a domain Ecore (meta) model you can start creating model resources containing definitions of model elements. E.g. if your meta-model contains classes Organization and Engineer, you may define organization, \u201cAcme Corp.\u201d with an engineer \u201cJoe Doe\u201d. There are multiple ways to populate the model. Some of them are listed below. You don\u2019t to use one particular way - they can be used in combination. Some resources in your model may be defined YAML and edited in a text editor, some other may be defined in XMI and edited with, say, a diagram editor. There resources can cross-reference each other. YAML or JSON You can create models in YAML. With this approach, unlike the others listed below, you don\u2019t need to create a specialized editor - just use a YAML or text editor and load specification pages of the generated model documentation as a reference. Because models are defined in text they are easy to collaborate on without the use of specialized merge tools - use traditional diff and merge as for other textual artifacts such as Java files. This approach also allows to relatively easily load data from external systems which have no knowledge of your models\u2019 XMI format. Data can be loaded from REST endpoints or from data exports. Tree editor You can generate a tree editor for your models using Ecore Tools. It is a relatively small effort, but you\u2019ll need to build it, publish to a p2 repository (update site) and model authors will need to have Eclipse IDE and to be able to install the editor. Diagram editor With Eclipse Sirius you can generate visual diagram editors and with Sirius Web you can provide a web interface for editing models. Specialized text editor With Xtext you can create a specialized text editor with syntax highlighting, code completions, live validation and other features. Custom resources and factories You can also load data from external sources by implementing a custom Resource and Resource.Factory. YamlResource and YamlResourceFactory are examples of such implementation. For example, you may create a resource to load issue information from Jira using Jira Java API. In Domain-Driven Design terminology such resource and a resource factory would act as an Anti-Corruption Layer. Web application So you\u2019ve captured quite a bit of knowledge in your models, now it is time to share it! One way to share knowledge with humans is to generate a web site. For example, this site was generated from multiple engineering models stored in multiple Git repositories with documentation generated from Ecore models \u201cmounted\u201d to it. You can add dynamic read-only behavior to the generated site using Single-page applications which use model data. All issues page is an example of such an application built with Vue.js and BootstrapVue. It uses browser local storage for user preferences. This approach allows to have highly focused mini-apps injected into a static web site. Shall you need more dynamic behavior you can use helper web services. In this case model data can be used as input to the services in addition to user-provided data putting user input into a context. E.g. a single site may have multiple mini-apps calling the same service but with different inputs. Programmatic Model data can also be used by computers. In Java you use the generated model classes. You may load your model from multiple sources and then save it to XMI which can be published to a binary repository or on a web site. In non-java scenarios you may generate code in the target language. E.g. cross-referencing JSON files for a static REST API or JavaScript files to use model information in the browser. It can be done in combination with generating a static file, i.e. your site would contain both HTML and JSON/JavaScript. In this case JSON/JavaScript can be used by the mini-apps. Products overview This section provides a brief overview of Nasdanika products and their modules. Core - foundational functionality CLI - classes which allow to call execution model Command from a command line. Common - common functionality such as the execution model, resource and persistence frameworks. Diagram - Diagram EMF model is a level of abstraction to create diagram visualizations using Java API and then generate PlantUML and diagrams.net diagrams from it. EMF - classes for working with Ecore models, e.g. classes for loading models from YAML files. Exec - Ecore models and adapters to execution model participants to build code generators and to load model content from different sources. Flow - Ecore flow model to capture customer journeys/business processes. mxgraph - Maven jar packaging of mxgraph sources. It is used to generate diagrams.net diagrams. Ncore - Ecore model containing common classes used/extended in other models. HTML - Java API\u2019s and models for generating HTML Bootstrap - Fluent Java API to generate Bootstrap 4 markup. Ecore - Classes to generate documentation of Ecore models as action models (see Models/Application below). EMF - Base classes for building generators of action models from Ecore model elements. Flow - Generators of action models from the flow model elements. HTML - Fluent Java API to generate HTML 5 markup. jsTree - Java API for generating jsTree JSON. Models - Ecore models to build HTML pages and applications. HTML - Ecore model representing HTML elements and generation adapters. Bootstrap - Ecore model representing Bootstrap 4 elements and generation adapters. Application - Ecore model representing a web site/application as a hierarchy of actions. Adapters to generate HTML sites (resource models) from action models. Engineering - Ecore model representing (software) engineering concepts such as an organization, engineer, product, release, feature, issue, \u2026 Adapters for generating HTML sites from engineering models. TOGAF - Models representing TOGAF concepts. ADM - flow model of TOGAF Architecture Development Method. Nasdanika products are Java-based, hosted on GitHub Nasdanika organization and published to Maven Central: Core HTML Engineering Or before, or in parallel - totally up to you. Start somewhere, expand from there. ↩"},"modules/core/modules/exec/modules/model/Fail.html":{"path":"Products/Core/Exec/Model/Fail","title":"Fail","content":"org.nasdanika.exec.Fail Fails execution with a supplied message. Can be used in control flow components such as switch or if. Example exec-fail: Some error message\n Supertypes ModelElement Attributes message : EString Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false message : EString Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/app/modules/model/NavigationPanel.html":{"path":"Products/HTML/Models/Application/Model/NavigationPanel","title":"NavigationPanel","content":"org.nasdanika.html.model.app.NavigationPanel Navigation panel contains navigation items. Supports several styles. Supertypes PagePart Referrers Action ContentPanel Page Attributes collapsible : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false id : EString ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false labelTrimLength : EInt Type EInt Cardinality 0..1 Changeable true Derived false style : NavigationPanelStyle Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false collapsible : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false id : EString ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false labelTrimLength : EInt Type EInt Cardinality 0..1 Changeable true Derived false style : NavigationPanelStyle Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Button.html":{"path":"Products/HTML/Models/Bootstrap/Model/Button","title":"Button","content":"org.nasdanika.html.model.bootstrap.Button TODO - size - enum? Block, active, disabled. Supertypes Div Attributes color : Color Type Color Cardinality 0..1 Changeable true Derived false outline : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Type Color Cardinality 0..1 Changeable true Derived false outline : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/Dropdown.html":{"path":"Products/HTML/Models/Bootstrap/Model/Dropdown","title":"Dropdown","content":"org.nasdanika.html.model.bootstrap.Dropdown"},"objectives/test-objective/index.html":{"path":"Objectives/Test Objective","title":"Test Objective","content":"Origin engineering/nasdanika.yml 16:5 Uri engineering://nasdanika/objectives/test-objective Key Results Do something Do something"},"increments/2022/children/Q3/index.html":{"path":"Increments/2022/Q3","title":"Q3","content":"Origin engineering/nasdanika.yml 128:9 Uri engineering://nasdanika/increments/2022/children/Q3 Start Jul 1, 2022 End Oct 1, 2022 Duration 92 days"},"modules/core/modules/ncore/Period.html":{"path":"Products/Core/Ncore/Period","title":"Period","content":"org.nasdanika.ncore.Period Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.ncore\\model\\doc\\period.md (The system cannot find the file specified) Supertypes ModelElement Subtypes Capability Endeavor EngineeredElement Attributes duration : Duration Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false References end : Temporal Period end. Type Temporal Cardinality 0..1 Changeable true Derived false start : Temporal Period start. Type Temporal Cardinality 0..1 Changeable true Derived false duration : Duration Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false end : Temporal Period end. Type Temporal Cardinality 0..1 Changeable true Derived false start : Temporal Period start. Type Temporal Cardinality 0..1 Changeable true Derived false Period end. Type Temporal Cardinality 0..1 Changeable true Derived false Period start. Type Temporal Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/FlowElementEntry.html":{"path":"Products/Core/Flow/FlowElementEntry","title":"FlowElementEntry","content":"java.util.Map.Entry Mapping of flow element key to a flow element. Null value suppresses inherited entry. Referrers Flow Attributes key : EString Flow element key. Type EString Cardinality 1 Changeable true Derived false References value : FlowElement<?> Flow element. Use null to suppress inherited sub-package. Type FlowElement<?> Cardinality 0..1 Changeable true Derived false key : EString Flow element key. Type EString Cardinality 1 Changeable true Derived false Flow element key. Type EString Cardinality 1 Changeable true Derived false value : FlowElement<?> Flow element. Use null to suppress inherited sub-package. Type FlowElement<?> Cardinality 0..1 Changeable true Derived false Flow element. Use null to suppress inherited sub-package. Type FlowElement<?> Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/ncore/StringProperty.html":{"path":"Products/Core/Ncore/StringProperty","title":"StringProperty","content":"org.nasdanika.ncore.StringProperty Supertypes Property String"},"modules/html/modules/models/modules/app/modules/model/NavigationPanelStyle.html":{"path":"Products/HTML/Models/Application/Model/NavigationPanelStyle","title":"NavigationPanelStyle","content":"org.nasdanika.html.model.app.NavigationPanelStyle Literals Auto Cards Collapsible cards Tree Uses NavigationPanel Auto Cards Collapsible cards Tree     NavigationPanel"},"modules/core/modules/flow/issues/git-provenance/index.html":{"path":"Products/Core/Flow/Issues/Git provenance","title":"Git provenance","content":"Conversion of file URI's in markers to Git upstream URI's using jGit and then to URL's of, say, GitHub. Generic marker processing approach and then Git implementation with GitHub implementation as an extension. Would allow to navigate to the source location of model elements. Shall be very useful in the case of flow inheritance where elements may reside in multiple source repositories. Origin flow/engineering/engineering.yml 69:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/git-provenance Target Flow Workable"},"modules/html/modules/ecore/issues/engineering-generation-target/index.html":{"path":"Products/HTML/Ecore/Issues/Engineering generation target","title":"Engineering generation target","content":"Generate engineering model instead of action model. This would allow to link issues, owners, etc. to model elements. Need support for merging. Origin ecore/engineering.yml 18:5 Uri engineering://nasdanika/modules/html/modules/ecore/issues/engineering-generation-target Target Ecore Workable"},"modules/core/modules/exec/modules/model/Configurator.html":{"path":"Products/Core/Exec/Model/Configurator","title":"Configurator","content":"org.nasdanika.exec.Configurator Configurator allows to inject additional properties to the context. Configured with a map with the following keys: properties - a map of properties to add to the the context. target - component to execute with the augmented context. Example exec-configurator:\n   target: \n     content-text: Hello, ${name} \n   properties: \n     name: \n       content-text: Extended ${name}\n In this example target is a text which is interpolated with context properties. Property name uses property name passed to the configurator context and shadows it. Supertypes ModelElement References properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false target : EObject Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false target : EObject Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false"},"modules/html/modules/models/issues/components/index.html":{"path":"Products/HTML/Models/Issues/Reintroduce components","title":"Reintroduce components","content":"Origin model/engineering.yml 24:5 Uri engineering://nasdanika/modules/html/modules/models/issues/components Target Models Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Navbar.html":{"path":"Products/HTML/Models/Bootstrap/Model/Navbar","title":"Navbar","content":"org.nasdanika.html.model.bootstrap.Navbar"},"issue-statuses.html":{"path":"Issue/Statuses","title":"Statuses","content":"Open In Progress Done Cancelled"},"modules/engineering/modules/model/IssuePriority.html":{"path":"Products/Engineering/Model/IssuePriority","title":"IssuePriority","content":"org.nasdanika.engineering.IssuePriority Issue priority, e.g. Low, Medium, High. Issue priority defines the order in which issues shall be worked on. Higher priority workable issues shall be worked on before lower priority issues. Supertypes NamedElement Referrers Engineer Issue References issues : Issue* Issues in this priority Type Issue Cardinality 0..* Changeable false Derived true Opposite priority issues : Issue* Issues in this priority Type Issue Cardinality 0..* Changeable false Derived true Opposite priority Issues in this priority Type Issue Cardinality 0..* Changeable false Derived true Opposite priority"},"modules/core/modules/flow/issues/drawio-styling/index.html":{"path":"Products/Core/Flow/Issues/Drawio styling for pseudo-states","title":"Drawio styling for pseudo-states","content":"Choice, join, ... PlantUML layout shall take care of port positioning. Origin flow/engineering/engineering.yml 64:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/drawio-styling Target Flow Workable"},"modules/core/modules/flow/ArtifactEntry.html":{"path":"Products/Core/Flow/ArtifactEntry","title":"ArtifactEntry","content":"java.util.Map.Entry Mapping of artifact key to an artifact. Null value suppresses inherited entry. Referrers Artifact Package Attributes key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false References value : Artifact Flow artifact. Use null to suppress inherited sub-package. Type Artifact Cardinality 0..1 Changeable true Derived false key : EString Artifact key. Type EString Cardinality 1 Changeable true Derived false Artifact key. Type EString Cardinality 1 Changeable true Derived false value : Artifact Flow artifact. Use null to suppress inherited sub-package. Type Artifact Cardinality 0..1 Changeable true Derived false Flow artifact. Use null to suppress inherited sub-package. Type Artifact Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/ncore/Temporal.html":{"path":"Products/Core/Ncore/Temporal","title":"Temporal","content":"org.nasdanika.ncore.Temporal Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.ncore\\model\\doc\\temporal.md (The system cannot find the file specified) Supertypes ModelElement Subtypes Event Referrers Period Temporal Uses Temporal Attributes instant : Instant An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false offset : Duration Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false References base : Temporal Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives derivatives : Temporal* Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base lowerBounds : Temporal* Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false upperBounds : Temporal* Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Operations after : EBooleanObject Tests if this temporal is after the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 before : EBooleanObject Tests if this temporal is before the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 coincides : EBooleanObject Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 copy : Temporal Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 minus : Duration Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, e.g. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 minus : Temporal Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 normalize : Temporal Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and offset would be the sum of all offsets. Type Temporal Cardinality 0..1 plus : Temporal Returns a temporal based on this one offset by the argument duration. Duration can be null. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 instant : Instant An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false offset : Duration Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false base : Temporal Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives derivatives : Temporal* Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base lowerBounds : Temporal* Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false upperBounds : Temporal* Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false after : EBooleanObject Tests if this temporal is after the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 before : EBooleanObject Tests if this temporal is before the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 coincides : EBooleanObject Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 copy : Temporal Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 minus : Duration Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, e.g. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 minus : Temporal Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 normalize : Temporal Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and offset would be the sum of all offsets. Type Temporal Cardinality 0..1 plus : Temporal Returns a temporal based on this one offset by the argument duration. Duration can be null. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 Tests if this temporal is after the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Tests if this temporal is before the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, e.g. two unrelated events. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, e.g. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 offset : Duration Type Duration Cardinality 0..1 Type Duration Cardinality 0..1 Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and offset would be the sum of all offsets. Type Temporal Cardinality 0..1 Returns a temporal based on this one offset by the argument duration. Duration can be null. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 offset : Duration Type Duration Cardinality 0..1 Type Duration Cardinality 0..1"},"modules/html/modules/emf/issues/hierarchical-tables/index.html":{"path":"Products/HTML/EMF/Issues/Hierarchical tables","title":"Hierarchical tables","content":"RowBuilder provider similar as for lists. Perhaps needs to take depth argument so can build indent in the first column. Origin emf/engineering.yml 9:5 Uri engineering://nasdanika/modules/html/modules/emf/issues/hierarchical-tables Target EMF Workable"},"modules/core/modules/flow/ArtifactParticipantResponsibility.html":{"path":"Products/Core/Flow/ArtifactParticipantResponsibility","title":"ArtifactParticipantResponsibility","content":"org.nasdanika.flow.ArtifactParticipantResponsibility Supertypes ParticipantResponsibility<ArtifactParticipantResponsibility> Referrers Artifact FlowElement Uses ArtifactParticipantResponsibility Attributes artifactKey : EString Key of the responsibility artifact relative to the containing package artifacts/ reference. Type EString Cardinality 1 Changeable true Derived false suppress : EBoolean If true, suppresses inherited responsibility for this responsibility\u2019s artifact. Type EBoolean Cardinality 0..1 Changeable true Derived false References artifact : Artifact Transition target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite responsibilities artifactKey : EString Key of the responsibility artifact relative to the containing package artifacts/ reference. Type EString Cardinality 1 Changeable true Derived false suppress : EBoolean If true, suppresses inherited responsibility for this responsibility\u2019s artifact. Type EBoolean Cardinality 0..1 Changeable true Derived false Key of the responsibility artifact relative to the containing package artifacts/ reference. Type EString Cardinality 1 Changeable true Derived false If true, suppresses inherited responsibility for this responsibility\u2019s artifact. Type EBoolean Cardinality 0..1 Changeable true Derived false artifact : Artifact Transition target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite responsibilities Transition target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite responsibilities"},"modules/html/modules/models/modules/bootstrap/modules/model/ButtonGroup.html":{"path":"Products/HTML/Models/Bootstrap/Model/ButtonGroup","title":"ButtonGroup","content":"org.nasdanika.html.model.bootstrap.ButtonGroup"},"modules/core/modules/diagram/modules/gen/issues/word-wrapping/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Word wrapping","title":"Word wrapping","content":"If there are new lines - replace with space, set word wrapping to true, count lines and adjust width and heights according to the longes line and the number of lines. Origin diagram.gen/engineering.yml 71:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/word-wrapping Target Generators Workable"},"modules/html/modules/flow/issues/predicate/index.html":{"path":"Products/HTML/Flow/Issues/Predicate","title":"Predicate","content":"Add support of filtered generation using a predicate service in Context. Perhaps have a specialized interface instead of java function predicate to avoid accidental clash. Also the predicate interface may have a method for filtering typed elements - structural features and operations. E.g. hide URI's. Perhaps have this interface in the same package with EObjectActionProvider or even as a nested interface. getPredicate() returns a predicate which accepts everything - to avoid null checks all over. Origin flow/engineering.yml 15:5 Uri engineering://nasdanika/modules/html/modules/flow/issues/predicate Target Flow Workable"},"increments/2022/children/Q1/children/feb/index.html":{"path":"Increments/2022/Q1/February","title":"February","content":"Origin engineering/nasdanika.yml 103:13 Uri engineering://nasdanika/increments/2022/children/Q1/children/feb Start Feb 1, 2022 End Mar 1, 2022 Duration 28 days"},"modules/html/modules/models/modules/app/modules/model/ActionReference.html":{"path":"Products/HTML/Models/Application/Model/ActionReference","title":"ActionReference","content":"org.nasdanika.html.model.app.ActionReference Supertypes Reference<Action>"},"modules/engineering/modules/model/Topic.html":{"path":"Products/Engineering/Model/Topic","title":"Topic","content":"org.nasdanika.engineering.Topic Topic is a group of related messages in a forum. Topic itself is a message, i.e. it is the first message in the group, for example a question. Supertypes Message Referrers Forum References messages : Message* Messages in this topic. Type Message Cardinality 0..* Changeable true Derived false messages : Message* Messages in this topic. Type Message Cardinality 0..* Changeable true Derived false Messages in this topic. Type Message Cardinality 0..* Changeable true Derived false"},"modules/core/modules/exec/modules/model/index.html":{"path":"Products/Core/Exec/Model","title":"Model","content":"Nasdanika Core Exec model classes can be used to create models for generation of resources such as files and their content. To use in the Maven environment search for the latest version on Maven Central and copy/paste a dependency declaration to the pom.xml. Maven dependency Example as of the time of writing: <dependency>\n  <groupId>org.nasdanika.core<\/groupId>\n  <artifactId>exec<\/artifactId>\n  <version>2021.8.0<\/version>\n<\/dependency>\n TODO - Update code snippets and content below. Java code Suppliers To load and execute content components which implement org.nasdanika.common.SupplierFactory<<a href=\u2018https://docs.oracle.com/javase/8/docs/api/index.html?java/io/InputStream.html\u2019>java.io.InputStream> from a YAML resource use code like this: import java.io.InputStream;\nimport java.util.Map;\n\nimport org.nasdanika.common.Context;\nimport org.nasdanika.common.persistence.ObjectLoader;\nimport org.nasdanika.common.PrintStreamProgressMonitor;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.common.Supplier;\nimport org.nasdanika.common.SupplierFactory;\nimport org.nasdanika.common.Util;\nimport org.nasdanika.exec.Iterator;\nimport org.nasdanika.exec.Loader;\nimport org.yaml.snakeyaml.Yaml;\n\n...\n\n// Create a loader. There is a constructor which takes a chain loader for processing unmatched types.\nObjectLoader loader = Loader();\n\n// Progress monitor which outputs to the console. \nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\n\n// Loading YAML from a classloader resource.\nObject iterator = loader.loadYaml(TestExec.class.getResource(\"iterator-spec.yml\"), monitor);\n\t\t\n// Loading context, also from a YAML classloader resource.\t\t\nMap<String, Object> yaml = new Yaml().load(TestExec.class.getResourceAsStream(\"iterator-config.yml\"));\nContext context = Context.wrap(yaml::get);\n\t\t\n// Executing the object - in this case we are getting InputStream as a result.\nInputStream result = callSupplier(context, monitor, iterator);\n\n// Or, to get a string, use Util to convert InputStream to String \nString result = Util.toString(context, supplier.execute(monitor));\n Consumers To load and execute resource components which implement org.nasdanika.common.ConsumerFactory<<a href=\u2018https://docs.nasdanika.org/modules/core/modules/common/apidocs/index.html?org/nasdanika/common/resources/BinaryEntityContainer.html\u2019>org.nasdanika.common.resources.BinaryEntityContainer> from a YAML resource use code like this: import org.nasdanika.common.Context;\nimport org.nasdanika.common.persistence.ObjectLoader;\nimport org.nasdanika.common.PrintStreamProgressMonitor;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.common.Consumer;\nimport org.nasdanika.common.ConsumerFactory;\nimport org.nasdanika.common.Util;\nimport org.nasdanika.exec.Loader;\nimport org.yaml.snakeyaml.Yaml;\n\n...\nObjectLoader loader = new Loader();\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(specURL, monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\");\noutDir.mkdirs();\nContext context = Context.EMPTY_CONTEXT;\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\t\t\n Helper methods Code snippets in components documentation and the code snippets above use two helper methods - callSupplier() and callConsumer(). These methods cover full lifecycle of supplier and consumer execution participants (see Execution model) - diagnose, execute, commit/rollback, and close. The methods use JUnit fail() to report problems. Adjust as needed - throw an exception or return an exit or status code. callSupplier() /**\n * Executes full supplier lifecycle - diagnose, execute, commit/rollback, close.\n * @param context\n * @param monitor\n * @param component\n * @return\n * @throws Exception\n */\nstatic InputStream callSupplier(Context context, ProgressMonitor monitor, Object component) throws Exception {\n\ttry (Supplier<InputStream> supplier = Loader.asSupplierFactory(component).create(context); ProgressMonitor progressMonitor = monitor.setWorkRemaining(3).split(\"Calling component\", 3)) {\n\t\tDiagnostic diagnostic = supplier.splitAndDiagnose(progressMonitor);\n\t\tif (diagnostic.getStatus() == Status.ERROR) {\n\t\t\tdiagnostic.dump(System.err, 4);\n\t\t\tfail(\"Diagnostic failed: \" + diagnostic.getMessage());\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tInputStream result = supplier.splitAndExecute(progressMonitor);\n\t\t\tsupplier.splitAndCommit(progressMonitor);\n\t\t\treturn result;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tif (e instanceof DiagnosticException) {\n\t\t\t\t((DiagnosticException) e).getDiagnostic().dump(System.err, 4);\n\t\t\t}\n\t\t\tif (supplier.splitAndRollback(progressMonitor)) {\n\t\t\t\tfail(\"Exception \" + e + \", rollback successful\");\n\t\t\t} else {\n\t\t\t\tfail(\"Exception \" + e + \", rollback failed\");\t\t\t\t\t\t\n\t\t\t}\n\t\t\tthrow new NasdanikaException(\"Never get here\");\n\t\t}\n\t}\n}\n callConsumer() /**\n * Executes full consumer lifecycle - diagnose, execute, commit/rollback, close.\n * @param context\n * @param monitor\n * @param component\n * @return\n * @throws Exception\n */\nstatic void callConsumer(Context context, ProgressMonitor monitor, Object component, BinaryEntityContainer container) throws Exception {\n\ttry (Consumer<BinaryEntityContainer> consumer = Loader.asConsumerFactory(component).create(context); ProgressMonitor progressMonitor = monitor.setWorkRemaining(3).split(\"Calling component\", 3)) {\n\t\tDiagnostic diagnostic = consumer.splitAndDiagnose(progressMonitor);\n\t\tif (diagnostic.getStatus() == Status.ERROR) {\n\t\t\tdiagnostic.dump(System.err, 4);\n\t\t\tfail(\"Diagnostic failed: \" + diagnostic.getMessage());\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tconsumer.splitAndExecute(container, progressMonitor);\n\t\t\tconsumer.splitAndCommit(progressMonitor);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tif (e instanceof DiagnosticException) {\n\t\t\t\t((DiagnosticException) e).getDiagnostic().dump(System.err, 4);\n\t\t\t}\n\t\t\tif (consumer.splitAndRollback(progressMonitor)) {\n\t\t\t\tfail(\"Exception \" + e + \", rollback successful\");\n\t\t\t} else {\n\t\t\t\tfail(\"Exception \" + e + \", rollback failed\");\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}\n Collecting execution results In some situations it might be needed to return information from execution participants to the calling code. For example, an ID of a generated resource or commit ID of pushed code. This section outlines several ways of achieving this task: Anonymous execution participants - the calling code defines a custom loader which creates an anonymous sub-class of an execution participant. The subclass overrides one of methods to report execution result to some form of a result collector in the enclosing scope. Custom or customized execution participants - client code developer creates a custom execution participant or a sub-class of an existing execution participant class. The custom class takes some form of result collector in its constructor and stores it to an instance variable. Custom class uses the result collector to report execution result to the result collector. The sub-class overrides one of methods to report execution result to the result collector. Client code developer also creates a custom loader which takes the result collector as its constructor argument. The loader then passes the result collector to the customized execution participant constructor. This technique can be combined with the first one. For example, the loader may be anonymous and the custom component may be not, or vice versa. Also loaders can be sub-classed or chained. Context service - results collector is passed to execution participants as a context service. If the service is present in the context, execution participants report results to the service. Context property - results collector is passed as a context property. A disadvantage of this approach over the previous one is that property name may change as a result of mapping or a property may become unavailable to downstream components unless explicitly mapped. Progress monitor - results are reported as data to the progress monitor. The calling code inspects progress data to collect execution results. Exceptions - exception type and associated data is used to analyze the cause of failure. Can be used in conjunction with the progress monitor approach if the execution participant reporting failure also reports data associate with the failure to the progress monitor. The following sections provide examples of implementing the first five of the above approaches. All the examples use the same YAML specification: # Testing container and file\nfile:\n   name: hello.txt\n   contents:\n      custom-component: {}\n Anonymous execution participants // Results collector in enclosing scope.\nString[] result = {null};\n\nObjectLoader loader = new Loader() {\n\n\t@Override\n\tpublic Object create(ObjectLoader loader, String type, Object config, URL base,\tProgressMonitor progressMonitor, Marker marker) throws Exception {\n\t\t\n\t\tif (\"custom-component\".equals(type)) {\n\t\t\treturn new SupplierFactory<InputStream>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Supplier<InputStream> create(Context context) throws Exception {\n\t\t\t\t\treturn new Supplier<InputStream>() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic double size() {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String name() {\n\t\t\t\t\t\t\treturn \"Custom content supplier\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic InputStream execute(ProgressMonitor progressMonitor) throws Exception {\n\t\t\t\t\t\t\t// Setting result value and returning the same value.\n\t\t\t\t\t\t\tresult[0] = new Date().toString(); \n\t\t\t\t\t\t\treturn Util.toStream(context, result[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn super.create(loader, type, config, base, progressMonitor, marker);\n\t}\n\t\n};\n\n// Execution\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(TestExec.class.getResource(\"results-collection.yml\"), monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\" + File.separator + \"results-collection\" + File.separator + \"anonymous\");\noutDir.mkdirs();\nContext context = Context.EMPTY_CONTEXT;\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\n\n// Accessing result\nSystem.out.println(result[0]);\n Custom execution participant Custom content supplier and custom loader with chaining. Custom supplier public class CustomSupplierFactory implements SupplierFactory<InputStream> {\n\t\n\tprivate Consumer<String> resultsCollector;\n\n\tpublic CustomSupplierFactory(java.util.function.Consumer<String> resultsCollector) {\n\t\tthis.resultsCollector = resultsCollector;\n\t}\n\n\t@Override\n\tpublic Supplier<InputStream> create(Context context) throws Exception {\n\t\treturn new Supplier<InputStream>() {\n\n\t\t\t@Override\n\t\t\tpublic double size() {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String name() {\n\t\t\t\treturn \"Custom content supplier\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic InputStream execute(ProgressMonitor progressMonitor) throws Exception {\n\t\t\t\tString result = new Date().toString();\n\t\t\t\tresultsCollector.accept(result);\n\t\t\t\treturn Util.toStream(context, result);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n};\n Custom loader public class CustomLoader extends ObjectLoader {\n\t\n\tprivate Consumer<String> resultsCollector;\n\n\tpublic CustomLoader(java.util.function.Consumer<String> resultsCollector, ObjectLoader chain) {\n\t\tthis.resultsCollector = resultsCollector;\n\t\tthis.chain = chain;\n\t}\n\t\t\n\tprivate org.nasdanika.common.ObjectLoader chain;\n\n\t@Override\n\tpublic Object create(ObjectLoader loader, String type, Object config, URL base, ProgressMonitor progressMonitor, Marker marker) throws Exception {\n\t\t\n\t\ttry (ProgressMonitor subMonitor = progressMonitor.setWorkRemaining(10).split(\"Creating \" + type, 1, marker)) {\n\t\t\tswitch (type) {\n\t\t\tcase \"custom-component\":\n\t\t\t\treturn new CustomSupplierFactory(resultsCollector);\t\t\t\n\t\t\tdefault:\n\t\t\t\tif (chain == null) {\n\t\t\t\t\tthrow new ConfigurationException(\"Unsupported type: \" + type, marker);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn chain.create(loader, type, config, base, subMonitor, marker);\n\t\t\t}\n\t\t}\n\t}\n\n}\n Client code // Results consumer.\njava.util.function.Consumer<String> resultsConsumer = System.out::println;\n\nObjectLoader loader = new CustomLoader(resultsConsumer, new Loader());\n\n// Execution\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(TestExec.class.getResource(\"results-collection.yml\"), monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\" + File.separator + \"results-collection\" + File.separator + \"anonymous\");\noutDir.mkdirs();\nContext context = Context.EMPTY_CONTEXT;\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\n Context service In the below example a service interface is defined for collecting results. An instance of the interface is passed as a context service down to executor. Results collecting service This example uses an interface, but it is also possible to define a results collecting class. public interface ResultsCollector {\n\t\n\tvoid onMyResult(String result);\n\n}\n Custom component public class CustomSupplierFactoryTwo implements SupplierFactory<InputStream> {\n\t\n\t@Override\n\tpublic Supplier<InputStream> create(Context context) throws Exception {\n\t\treturn new Supplier<InputStream>() {\n\n\t\t\t@Override\n\t\t\tpublic double size() {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String name() {\n\t\t\t\treturn \"Custom content supplier\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic InputStream execute(ProgressMonitor progressMonitor) throws Exception {\n\t\t\t\tString result = new Date().toString();\n\t\t\t\tResultsCollector resultsCollector = context.get(ResultsCollector.class);\n\t\t\t\tif (resultsCollector != null) {\n\t\t\t\t\tresultsCollector.onMyResult(result);\n\t\t\t\t}\n\t\t\t\treturn Util.toStream(context, result);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n};\n Custom loader public class CustomLoaderTwo extends ObjectLoader {\n\n\tpublic CustomLoaderTwo(ObjectLoader chain) {\n\t\tthis.chain = chain;\n\t}\n\t\t\n\tprivate org.nasdanika.common.ObjectLoader chain;\n\n\t@Override\n\tpublic Object create(ObjectLoader loader, String type, Object config, URL base, ProgressMonitor progressMonitor, Marker marker) throws Exception {\n\t\t\n\t\ttry (ProgressMonitor subMonitor = progressMonitor.setWorkRemaining(10).split(\"Creating \" + type, 1, marker)) {\n\t\t\tswitch (type) {\n\t\t\tcase \"custom-component\":\n\t\t\t\treturn new CustomSupplierFactoryTwo();\t\t\t\n\t\t\tdefault:\n\t\t\t\tif (chain == null) {\n\t\t\t\t\tthrow new ConfigurationException(\"Unsupported type: \" + type, marker);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn chain.create(loader, type, config, base, subMonitor, marker);\n\t\t\t}\n\t\t}\n\t}\n\n}\n Client code // Results collector.\nResultsCollector resultCollector = new ResultsCollector() {\n\t\n\t@Override\n\tpublic void onMyResult(String result) {\n\t\tSystem.out.println(\"*** My result: \" + result);\n\t\t\n\t}\n};\n\nObjectLoader loader = new CustomLoaderTwo(new Loader());\n\n// Execution\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(TestExec.class.getResource(\"results-collection.yml\"), monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\" + File.separator + \"results-collection\" + File.separator + \"context-service\");\noutDir.mkdirs();\nContext context = Context.singleton(ResultsCollector.class, resultCollector);\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\n Context property Custom component public class CustomSupplierFactoryThree implements SupplierFactory<InputStream> {\n\t\n\t@Override\n\tpublic Supplier<InputStream> create(Context context) throws Exception {\n\t\treturn new Supplier<InputStream>() {\n\n\t\t\t@Override\n\t\t\tpublic double size() {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String name() {\n\t\t\t\treturn \"Custom content supplier\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic InputStream execute(ProgressMonitor progressMonitor) throws Exception {\n\t\t\t\tString result = new Date().toString();\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tjava.util.function.Consumer<String> resultsCollector = context.get(\"results-collector\", java.util.function.Consumer.class);\n\t\t\t\tif (resultsCollector != null) {\n\t\t\t\t\tresultsCollector.accept(result);\n\t\t\t\t}\n\t\t\t\treturn Util.toStream(context, result);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n};\n Custom loader public class CustomLoaderThree extends ObjectLoader {\n\n\tpublic CustomLoaderThree(ObjectLoader chain) {\n\t\tthis.chain = chain;\n\t}\n\t\t\n\tprivate org.nasdanika.common.ObjectLoader chain;\n\n\t@Override\n\tpublic Object create(ObjectLoader loader, String type, Object config, URL base, ProgressMonitor progressMonitor, Marker marker) throws Exception {\n\t\t\n\t\ttry (ProgressMonitor subMonitor = progressMonitor.setWorkRemaining(10).split(\"Creating \" + type, 1, marker)) {\n\t\t\tswitch (type) {\n\t\t\tcase \"custom-component\":\n\t\t\t\treturn new CustomSupplierFactoryThree();\t\t\t\n\t\t\tdefault:\n\t\t\t\tif (chain == null) {\n\t\t\t\t\tthrow new ConfigurationException(\"Unsupported type: \" + type, marker);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn chain.create(loader, type, config, base, subMonitor, marker);\n\t\t\t}\n\t\t}\n\t}\n\n}\n Client code ObjectLoader loader = new CustomLoaderThree(new Loader());\n\n// Execution\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(TestExec.class.getResource(\"results-collection.yml\"), monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\" + File.separator + \"results-collection\" + File.separator + \"context-service\");\noutDir.mkdirs();\nContext context = Context.singleton(\"results-collector\", (java.util.function.Consumer<String>) System.out::println);\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\n Progress monitor Custom supplier public class CustomSupplierFactoryFour implements SupplierFactory<InputStream> {\n\t\n\t@Override\n\tpublic Supplier<InputStream> create(Context context) throws Exception {\n\t\treturn new Supplier<InputStream>() {\n\n\t\t\t@Override\n\t\t\tpublic double size() {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String name() {\n\t\t\t\treturn \"Custom content supplier\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic InputStream execute(ProgressMonitor progressMonitor) throws Exception {\n\t\t\t\tString result = new Date().toString();\n\t\t\t\tprogressMonitor.worked(1.0, \"My execution result\", CustomSupplierFactoryFour.this, result);\n\t\t\t\treturn Util.toStream(context, result);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n};\n Custom loader public class CustomLoaderFour extends ObjectLoader {\n\n\tpublic CustomLoaderFour(ObjectLoader chain) {\n\t\tthis.chain = chain;\n\t}\n\t\t\n\tprivate org.nasdanika.common.ObjectLoader chain;\n\n\t@Override\n\tpublic Object create(ObjectLoader loader, String type, Object config, URL base, ProgressMonitor progressMonitor, Marker marker) throws Exception {\n\t\t\n\t\ttry (ProgressMonitor subMonitor = progressMonitor.setWorkRemaining(10).split(\"Creating \" + type, 1, marker)) {\n\t\t\tswitch (type) {\n\t\t\tcase \"custom-component\":\n\t\t\t\treturn new CustomSupplierFactoryFour();\t\t\t\n\t\t\tdefault:\n\t\t\t\tif (chain == null) {\n\t\t\t\t\tthrow new ConfigurationException(\"Unsupported type: \" + type, marker);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn chain.create(loader, type, config, base, subMonitor, marker);\n\t\t\t}\n\t\t}\n\t}\n\n}\n Client code This code uses a subclass of FilterProgressMonitor to suppress reporting of the result to the print stream monitor. If suppression is not required monitor composition using compose() method can be used instead of filtering. ObjectLoader loader = new CustomLoaderFour(new Loader());\n\n// Execution\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(TestExec.class.getResource(\"results-collection.yml\"), monitor);\n\t\t\nFile outDir = new File(\"target\" + File.separator + \"test-output\" + File.separator + \"results-collection\" + File.separator + \"progress-monitor\");\noutDir.mkdirs();\nContext context = Context.EMPTY_CONTEXT;\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\n\nclass FilterMonitor extends FilterProgressMonitor {\n\t\n\tpublic FilterMonitor(ProgressMonitor target) {\n\t\tsuper(target);\n\t}\n\n\t@Override\n\tpublic void worked(Status status, double work, String progressMessage, Object... data) {\t\t\t\t\n\t\tif (Status.SUCCESS == status \n\t\t\t\t&& data != null \n\t\t\t\t&& data.length == 2 \n\t\t\t\t&& CustomSupplierFactoryFour.class.isInstance(data[0])) {\n\t\t\t\n\t\t\tSystem.out.println(\"Gotcha: \" + data[1]);\n\t\t} else {\n\t\t\tsuper.worked(status, work, progressMessage, data);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ProgressMonitor split(String taskName, double size, Object... data) {\n\t\treturn new FilterMonitor(super.split(taskName, size, data));\n\t}\n\t\n}\n\n// Filtering worked notification to get to what we need by analyzing arguments, e.g. data.\ncallConsumer(context, new FilterMonitor(monitor), container, out);\n Origin exec/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/exec/modules/model Dependencies EMF Dependants Generators"},"modules/core/modules/emf/index.html":{"path":"Products/Core/EMF","title":"EMF","content":"Origin emf/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/emf Dependencies CLI Ncore Dependants Model EMF"},"modules/core/modules/diagram/modules/model/Style.html":{"path":"Products/Core/Diagram/Model/Style","title":"Style","content":"org.nasdanika.diagram.Style Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.diagram\\model\\doc\\style.md (The system cannot find the file specified) Subtypes Connection DiagramElement Attributes bold : EBoolean Bold border style. Type EBoolean Cardinality 0..1 Changeable true Derived false color : EString Element color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false dashed : EBoolean Dashed border style. Type EBoolean Cardinality 0..1 Changeable true Derived false dotted : EBoolean Dotted border style. Type EBoolean Cardinality 0..1 Changeable true Derived false type : EString For connections - connection type. E.g. --> or ..>. To support styling connection type shall contain ${style} token which will be expanded during generation. E.g. -${style}->. For diagram elements - element type e.g. component, join, \u2026 Type EString Cardinality 0..1 Changeable true Derived false References description : EObject* Composite connection description to support having links in the description. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false notes : Note* Element notes. Type Note Cardinality 0..* Changeable true Derived false properties : Property* Type Property Cardinality 0..* Changeable true Derived false bold : EBoolean Bold border style. Type EBoolean Cardinality 0..1 Changeable true Derived false color : EString Element color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false dashed : EBoolean Dashed border style. Type EBoolean Cardinality 0..1 Changeable true Derived false dotted : EBoolean Dotted border style. Type EBoolean Cardinality 0..1 Changeable true Derived false type : EString For connections - connection type. E.g. --> or ..>. To support styling connection type shall contain ${style} token which will be expanded during generation. E.g. -${style}->. For diagram elements - element type e.g. component, join, \u2026 Type EString Cardinality 0..1 Changeable true Derived false Bold border style. Type EBoolean Cardinality 0..1 Changeable true Derived false Element color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false Dashed border style. Type EBoolean Cardinality 0..1 Changeable true Derived false Dotted border style. Type EBoolean Cardinality 0..1 Changeable true Derived false For connections - connection type. E.g. --> or ..>. To support styling connection type shall contain ${style} token which will be expanded during generation. E.g. -${style}->. For diagram elements - element type e.g. component, join, \u2026 Type EString Cardinality 0..1 Changeable true Derived false description : EObject* Composite connection description to support having links in the description. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false notes : Note* Element notes. Type Note Cardinality 0..* Changeable true Derived false properties : Property* Type Property Cardinality 0..* Changeable true Derived false Composite connection description to support having links in the description. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false Element notes. Type Note Cardinality 0..* Changeable true Derived false Type Property Cardinality 0..* Changeable true Derived false"},"increments/2021/children/Q4/children/dec/objectives/test-objective/index.html":{"path":"Increments/2021/Q4/December/Objectives/Test Objective","title":"Test Objective","content":"Origin engineering/nasdanika.yml 84:17 Uri engineering://nasdanika/increments/2021/children/Q4/children/dec/objectives/test-objective Key Results Do something Do something"},"modules/core/issues/merge-to-master/index.html":{"path":"Products/Core/Issues/Merge to master","title":"Merge to master","content":"Origin engineering.yml 30:5 Uri engineering://nasdanika/modules/core/issues/merge-to-master Target Core Workable"},"modules/engineering/modules/model/Event.html":{"path":"Products/Engineering/Model/Event","title":"Event","content":"org.nasdanika.engineering.Event Event is a named temporal. Usage scenario: Define an empty event, e.g. \u201cProject start\u201d or \u201cSecond round of funding\u201d. Define other temporals, e.g. phase starts relative to the event. Generated Web UI will show start/end relative to the event date. Once the event absolute or relative date in known, enter it to the model. Generated Web UI will show absolute dates or dates relative to the event root base. Supertypes NamedElement Temporal"},"modules/engineering/modules/model/journey/package-summary.html":{"path":"Products/Engineering/Model/Journey","title":"Journey","content":"Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.engineering\\model\\doc\\journey\\package-summary.md (The system cannot find the file specified)"},"modules/html/modules/emf/issues/search/index.html":{"path":"Products/HTML/EMF/Issues/Search functionality","title":"Search functionality","content":"Pluggable - some context service for indexing, search functionality in the navigation tree - default (node text) and custom - full text. Lunrjs implementation. Minisearch is also an option. One possibility is to add search configuration to Action, e.g. searchFields String->String map - this may have a problem with unavailability of all text because it may be generated or loaded at a later time. So, maybe scanning the generated pages, parsing them with Jsoup and extracting text from nsd-app-content-panel-content-row and title from nsd-app-content-panel-title or nsd-app-content-panel-title-and-items-row > col > h1 is the way to go. Generate search index and store it in the root similar to sitemap.xml. Perhaps ignore Javadoc initially. Origin emf/engineering.yml 17:5 Uri engineering://nasdanika/modules/html/modules/emf/issues/search Target EMF Workable"},"modules/core/modules/flow/issues/critical-path/index.html":{"path":"Products/Core/Flow/Issues/Critical path","title":"Critical path","content":"Computation. Probability/frequency/distribution. Visualization - arrow width, thick border. Origin flow/engineering/engineering.yml 113:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/critical-path Target Flow Workable"},"modules/engineering/modules/model/journey/Activity.html":{"path":"Products/Engineering/Model/Journey/Activity","title":"Activity","content":"org.nasdanika.engineering.journey.Activity Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.engineering\\model\\doc\\flow\\activity.md (The system cannot find the path specified) Supertypes Activity<Activity> Referrers Engineer Uses Activity"},"increments/2021/index.html":{"path":"Increments/2021","title":"2021","content":"Origin engineering/nasdanika.yml 69:5 Uri engineering://nasdanika/increments/2021 Start Jan 1, 2021 End Jan 1, 2022 Duration 365 days"},"modules/core/modules/flow/issues/change-comment/index.html":{"path":"Products/Core/Flow/Issues/Change comment","title":"Change comment","content":"Add support for providing a reason for adding/suppressing/overriding package elements. Generate a changelog. Origin flow/engineering/engineering.yml 79:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/change-comment Target Flow Workable"},"modules/core/modules/exec/modules/model/issues/includes/index.html":{"path":"Products/Core/Exec/Model/Issues/Includes","title":"Includes","content":"Fenced blocks for includes similar to Interpolator - include, include-markdown. No need in include-styled-markdown. Handle include-markdown not as tokens but by actually including markdown, include recursively. Origin exec/engineering.yml 8:5 Uri engineering://nasdanika/modules/core/modules/exec/modules/model/issues/includes Target Model Workable"},"modules/core/modules/mxgraph/index.html":{"path":"Products/Core/mxgraph","title":"mxgraph","content":"Origin mxgraph/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/mxgraph Dependants Generators"},"modules/core/modules/flow/Activity.html":{"path":"Products/Core/Flow/Activity<T>","title":"Activity<T>","content":"org.nasdanika.flow.Activity Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\activity.md (The system cannot find the path specified) Supertypes FlowElement<T> Subtypes Activity Flow Referrers ActivityEntry Service Uses Activity References services : Service* Derived opposite to Service target. Type Service Cardinality 0..* Changeable false Derived true Opposite target services : Service* Derived opposite to Service target. Type Service Cardinality 0..* Changeable false Derived true Opposite target Derived opposite to Service target. Type Service Cardinality 0..* Changeable false Derived true Opposite target"},"modules/engineering/modules/model/Increment.html":{"path":"Products/Engineering/Model/Increment","title":"Increment","content":"org.nasdanika.engineering.Increment Increment is a period of time to plan releases and schedule issues for. Increments may represent: Fixed \u201cphysical\u201d periods of time like a month or a quarter, \u201cLogical\u201d periods of time, like phases or stages, e.g. \u201cPhase 1\u201d or \u201cIntroduction\u201d and \u201cGrowth\u201d stages. Increments can be organized into a hierarchy. For example, year, quarter, month. Increments are used for roadmapping and progress tracking. One approach to using increments is a logarithmic scale, e.g. if it is Jan 2021, then define months for Q1 2021, the rest of the quarters for 2021, and just 2022. As time progresses and Q2 approaches - define months for Q2 and reschedule whatever was planned for Q2 to its months. Then, as a month approaches, set end dates for releases and issues. Use the same approach for years, e.g. in Q3 2021 define 2022 quarters and move releases and issues planned for 2022 to its quarters. Supertypes NamedElement Endeavor Referrers Engineer Increment Issue Release References children : Increment* Increment children, e.g. quarters for a year or months for a quarter. Type Increment Cardinality 0..* Changeable true Derived false issues : Issue* Issues scheduled to work on in this increment Type Issue Cardinality 0..* Changeable false Derived true Opposite increment releases : Release* Releases scheduled to be made available in this increment Type Release Cardinality 0..* Changeable false Derived true Opposite increment children : Increment* Increment children, e.g. quarters for a year or months for a quarter. Type Increment Cardinality 0..* Changeable true Derived false issues : Issue* Issues scheduled to work on in this increment Type Issue Cardinality 0..* Changeable false Derived true Opposite increment releases : Release* Releases scheduled to be made available in this increment Type Release Cardinality 0..* Changeable false Derived true Opposite increment Increment children, e.g. quarters for a year or months for a quarter. Type Increment Cardinality 0..* Changeable true Derived false Issues scheduled to work on in this increment Type Issue Cardinality 0..* Changeable false Derived true Opposite increment Releases scheduled to be made available in this increment Type Release Cardinality 0..* Changeable false Derived true Opposite increment"},"issue-statuses/in-progress/index.html":{"path":"Issue/Statuses/In Progress","title":"In Progress","content":"Origin engineering/nasdanika.yml 54:5 Uri engineering://nasdanika/issue-statuses/in-progress"},"modules/core/modules/flow/ActivityEntry.html":{"path":"Products/Core/Flow/ActivityEntry","title":"ActivityEntry","content":"java.util.Map.Entry Mapping of activity key to an activity or a flow. Null value suppresses inherited entry. Referrers Package ServiceProvider Attributes key : EString Activity key. Type EString Cardinality 1 Changeable true Derived false References value : Activity<?> Activity or flow. Use null to suppress inherited sub-package. Type Activity<?> Cardinality 0..1 Changeable true Derived false key : EString Activity key. Type EString Cardinality 1 Changeable true Derived false Activity key. Type EString Cardinality 1 Changeable true Derived false value : Activity<?> Activity or flow. Use null to suppress inherited sub-package. Type Activity<?> Cardinality 0..1 Changeable true Derived false Activity or flow. Use null to suppress inherited sub-package. Type Activity<?> Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/features/visualizations/index.html":{"path":"Products/Core/Flow/Features/Visualizations","title":"Visualizations","content":"Origin flow/engineering/engineering.yml 15:5 Uri engineering://nasdanika/modules/core/modules/flow/features/visualizations PlantUML and Draw.io. TODO - how to configure representations and how to edit Draw.io diagrams - where to place."},"modules/engineering/modules/model/issues/increment-matching/index.html":{"path":"Products/Engineering/Model/Issues/Increment matching","title":"Increment matching","content":"Defined at either engineer or increment level. Options - explicit/none - endeavor must specify increment, validation of end or overlap, start, end, duration (shall fit into the increment for the entire duration). Explicit assignment overrides matching - can be used for endeavors spanning several increments and perhaps not matching any. E.g. a long running feature spanning two or more years. Origin model/engineering.yml 17:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/increment-matching Target Model Workable"},"modules/html/modules/models/modules/app/modules/model/Action.html":{"path":"Products/HTML/Models/Application/Model/Action","title":"Action","content":"org.nasdanika.html.model.app.Action Actions form a hierarchy. Application pages are generated from actions. Supertypes Link Referrers Action Uses ActionReference Attributes inline : EBoolean Inline action\u2019s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false modalActivator : EBoolean Inline action\u2019s content is displayed in a modal dialog which opens on a click on the action\u2019s link. Type EBoolean Cardinality 0..1 Changeable true Derived false sectionColumns : EInt Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false References anonymous : Action* Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false navigation : EObject* Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false resources : Resource* Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false rightNavigation : NavigationPanel Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : Action* Actions which are generated into content sections. Id\u2019s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false inline : EBoolean Inline action\u2019s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false modalActivator : EBoolean Inline action\u2019s content is displayed in a modal dialog which opens on a click on the action\u2019s link. Type EBoolean Cardinality 0..1 Changeable true Derived false sectionColumns : EInt Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Inline action\u2019s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false Inline action\u2019s content is displayed in a modal dialog which opens on a click on the action\u2019s link. Type EBoolean Cardinality 0..1 Changeable true Derived false Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false anonymous : Action* Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false navigation : EObject* Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false resources : Resource* Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false rightNavigation : NavigationPanel Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : Action* Actions which are generated into content sections. Id\u2019s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Actions which are generated into content sections. Id\u2019s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false"},"modules/togaf/index.html":{"path":"Products/TOGAF","title":"TOGAF","content":"Origin engineering.yml 1:1 Uri engineering://nasdanika/modules/togaf"},"modules/core/modules/exec/modules/model/Property.html":{"path":"Products/Core/Exec/Model/Property","title":"Property","content":"java.util.Map.Entry Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.exec\\model\\doc\\property.md (The system cannot find the file specified) Referrers Appearance Call Configurator Eval HtmlElement Map Attributes key : EString Type EString Cardinality 1 Changeable true Derived false References value : EObject Type EObject Cardinality 1 Changeable true Derived false key : EString Type EString Cardinality 1 Changeable true Derived false Type EString Cardinality 1 Changeable true Derived false value : EObject Type EObject Cardinality 1 Changeable true Derived false Type EObject Cardinality 1 Changeable true Derived false"},"modules/core/modules/ncore/ModelElement.html":{"path":"Products/Core/Ncore/ModelElement","title":"ModelElement","content":"org.nasdanika.ncore.ModelElement Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.ncore\\model\\doc\\model-element.md (The system cannot find the file specified) Supertypes Marked Adaptable Subtypes Base64 Block Call Configurator Eval Fail Filter HtmlElement Item List Map ModelElement NamedElement Page Period Resource Resource ScriptReference StylesheetReference Temporal Text Attributes description : EString Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false uri : EString If element\u2019s URI is not set then its default value is derived from the container URI and containment reference. This is a logical URI and it can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..1 Changeable true Derived false uuid : EString Type EString Cardinality 0..1 Changeable true Derived false References actionPrototype : EObject If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false description : EString Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false uri : EString If element\u2019s URI is not set then its default value is derived from the container URI and containment reference. This is a logical URI and it can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..1 Changeable true Derived false uuid : EString Type EString Cardinality 0..1 Changeable true Derived false Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false If element\u2019s URI is not set then its default value is derived from the container URI and containment reference. This is a logical URI and it can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false actionPrototype : EObject If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false"},"increments/2022/children/Q4/children/dec/index.html":{"path":"Increments/2022/Q4/December","title":"December","content":"Origin engineering/nasdanika.yml 158:13 Uri engineering://nasdanika/increments/2022/children/Q4/children/dec Start Dec 1, 2022 End Jan 1, 2023 Duration 31 days"},"modules/core/modules/mxgraph/issues/bundle-resources/index.html":{"path":"Products/Core/mxgraph/Issues/Bundle resources","title":"Bundle resources","content":"Modify pom.xml to include non-java files from the source folder - take a look at git history for model projects. Will need to modify version, e.g. 4.2.2.1 or 4.2.2-a Origin mxgraph/engineering.yml 5:5 Uri engineering://nasdanika/modules/core/modules/mxgraph/issues/bundle-resources Target mxgraph Workable"},"modules/core/modules/common/features/execution-model/index.html":{"path":"Products/Core/Common/Features/Execution Model","title":"Execution Model","content":"Origin common/engineering/engineering.yml 6:5 Uri engineering://nasdanika/modules/core/modules/common/features/execution-model This page explains the Nasdanika execution model, which is used by a number of Nasdanika products and modules, e.g. Exec. The execution process consists of the following steps: Create a participant factory (org.nasdanika.common.ExecutionParticipantFactory). Factories can be composed as explained in the subsequent sections. Create an instance of org.nasdanika.common.Context. Pass the context to the factory create() method to create a participant. Create an instance of org.nasdanika.common.ProgressMonitor. Walk the participant through the lifecycle methods. All lifecycle methods except execute() have the same signature for all paricipant types. diagnose() - performs diagnostic of the participant configuration and returns org.nasdanika.common.Diagnostic. If the diagnostic status is ERROR further execution is aborted. Diagnose may prepare the participant for further execution by initializing internal structures, e.g. resolving URL\u2019s. However, this method shall not perform any modifications in resources which might have to be rolled back, e.g. it shall not create or delete files or database records. The default implementation returns status SUCCESS. execute() - Executes participant\u2019s logic. May modify resources, e.g. write to files, create database records. Different participant types have different signatures of this method. There is no default implementation for this method. commit() - Commits changes performed by execute() if all execution participants were executed successfully, i.e. without throwing an exception. The default implementation does nothing. rollback() - Rolls back changes performed by execute() if some other participant executed after this one has thrown an exception. Returns boolean value indicating whether rollback was successful or not. The default implementation does nothing and returns true. close() - Releases any resources used during execution. E.g. closes database connections, shuts down executor pulls. Overrides close() in java.lang.AutoCloseable so participants can be used in try-with-resources. The default implementation does nothing. Execution participant types org.nasdanika.common.Supplier<T> - T execute(ProgressMonitor) - returns value. org.nasdanika.common.Function<T,R> - R execute(T,ProgressMonitor) - takes an argument and returns value. org.nasdanika.common.Consumer<T> - void execute(T,ProgressMonitor) - takes an argument, does not return value. org.nasdanika.common.Command - void execute(ProgressMonitor) Composition Execution participants can be composed using subclasses of org.nasdanika.common.CompoundExecutionParticipant. Result producing participants - suppliers and functions - can be composed as lists or maps. Consumers can be composed as list and maps. Commands are always composed as lists. Chaining Result producing participants (supplier and function) and their factories have then method which takes value-consuming participant (function or consumer) and returns a participant (or a factory for such a participant) which executes the first participant, takes the returned value and passes it to the second participant. The participants can be chained as follows: Supplier<T>.then(Function<? super T,R>) -> Supplier<R> Supplier<T>.then(Consumer<? super T>) -> Command Function<T,R>.then(Function<? super R,V>) -> Function<T,V> Function<T,R>.then(Consumer<? super R>) -> Consumer<T> asFunction Suppler and Consumer have asFunction methods and their factories have asFunctionFactory methods to allow chaining of supplier and consumer execution. For suppliers asFunction method returns org.nasdanika.common.BiSupplier with the function argument available via getFirst() method and the supplier result via getSecond(). For consumers asFunction creates a pass-through function which executes the consumer and then returns its argument. Contextification Contextification is a form of chaining of execution participant factories where the first factory is a SupplierFactory<Context>. Context returned by the first factory\u2019s supplier is passed to the execution participant created by the second factory. Contextification is done using contextify() method of execution participant factories. Bridging to java.util.function Execution participants have static fromXXX methods for constructing from objects implementing java.util.function interfaces, e.g. java.util.function.Function. Utility methods org.nasdanika.common.Util class contains methods for walking execution participants through their lifecycle (call methods) as well as helper execution participant factories. Client code Client code shall walk the top-level execution participant through the lifecycle methods. Composition and chaining classes methods take care of invoking lifecycle methods of their constituents. The below code snippet shows how to call Supplier: Context context = ...;\t\t\nSupplierFactory<InputStream> supplierFactory = ...;\nProgressMonitor monitor = ...;\n\ntry (Supplier<InputStream> supplier = supplierFactory.create(context); ProgressMonitor progressMonitor = monitor.split(\"Calling \" + supplier.name(), 3 * supplier.size())) {\n\tDiagnostic diagnostic = supplier.splitAndDiagnose(progressMonitor);\n\tif (diagnostic.getStatus() == Status.ERROR) {\n\t\t// Handle diagnostic error - dump to console or log, throw an exception or return error code or status.\n\t\tdiagnostic.dump(System.err, 4);\n\t\t// Calling JUnit.fail() here\n\t\tfail(\"Supplier diagnostic failed: \" + diagnostic.getMessage());\n\t}\n\t\t\t\n\ttry {\n\t\tInputStream result = supplier.splitAndExecute(progressMonitor);\n\t\t// process result here\n\t\t...\n\t\tsupplier.splitAndCommit(progressMonitor);\t\t\t\t\t\t\n\t} catch (Exception e) {\n\t\t// Rollback and handle exception. \n\t\t// In some cases diagnostic exception may be thrown during execution.\n\t\tif (e instanceof DiagnosticException) {\n\t\t\t((DiagnosticException) e).getDiagnostic().dump(System.err, 4);\n\t\t}\n\t\tif (supplier.splitAndRollback(progressMonitor)) {\n\t\t\tfail(\"Exception \" + e + \", rollback successful\");\n\t\t} else {\n\t\t\t// Automated cleanup failed - perhaps notify somebody/something to performs manual/external cleanup\n\t\t\tfail(\"Exception \" + e + \", rollback failed\");\t\t\t\t\t\t\n\t\t}\n\t}\n}"},"modules/core/modules/flow/issues/style-inheritance-from-templates/index.html":{"path":"Products/Core/Flow/Issues/Artifact inheritance of representation properties from templates","title":"Artifact inheritance of representation properties from templates","content":"Cascading inheritance, merging of properties. Would allow to define a library of artifact templates (building blocks) and assemble composite artifacts from them. E.g. cloud components - storage, compute, cache, networking. Generated diagrams would have styles like images readily available. Origin flow/engineering/engineering.yml 52:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/style-inheritance-from-templates Target Flow Workable"},"modules/html/modules/models/modules/bootstrap/index.html":{"path":"Products/HTML/Models/Bootstrap","title":"Bootstrap","content":"Origin model/engineering.yml 11:5 Uri engineering://nasdanika/modules/html/modules/models/modules/bootstrap"},"modules/html/modules/models/modules/app/modules/model/issues/inheritance/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/Ability to inherit action hierarchies and override specific actions","title":"Ability to inherit action hierarchies and override specific actions","content":"Override by ID. Children will have to be derived and will need \"ownChildren\" reference with \"children\" load key. Origin model/app/engineering.yml 13:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/inheritance Target Model Workable"},"modules/core/modules/flow/features/validation/index.html":{"path":"Products/Core/Flow/Features/Validation","title":"Validation","content":"Origin flow/engineering/engineering.yml 43:5 Uri engineering://nasdanika/modules/core/modules/flow/features/validation"},"modules/core/modules/flow/issues/builders/index.html":{"path":"Products/Core/Flow/Issues/Builders","title":"Builders","content":"A list of EObjects adapted to Consumer and invoked in apply(). Context and progress monitor, apply and createInstance either throws Exception or wraps it maybe in ConfigurationException and injects builder's marker. InterpolatingBuilder - interpolates tokens in features. Own properties, flag to chain with context and path. Features to interpolate - all String features by default. CallBuilder - similar to Call in Exec, possibly extract common functionality to Ncore or use Call as-is - shall be adaptable to consumer then. Origin flow/engineering/engineering.yml 88:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/builders Target Flow Workable"},"modules/engineering/modules/model/IssueStatus.html":{"path":"Products/Engineering/Model/IssueStatus","title":"IssueStatus","content":"org.nasdanika.engineering.IssueStatus Issue status, e.g. Open, In Progress, Done. Status can be set at the issue level, or note level. Is status is not set at the issue, the status of the last note is considered to be the status of the issue. If issue status done attribute is set to true it means that the issue outcome has been achieved and: Issues which require this issue can be worked on. Releases and features which this issue is planned for and contributes to are considered to be available unless there other not yet done issues. Note that an issue can be completed (remaining effort and cost are zero) but not done, e.g. it may be cancelled. Supertypes NamedElement Referrers Engineer Issue Note Attributes done : EBoolean If true, indicates that the issue in this status is successfully completed and issues requiring is are now workable. Issue can be completed (completion = 1), but not done, e.g. it can be cancelled. Type EBoolean Cardinality 0..1 Changeable true Derived false References issues : Issue* Issues in this status. Type Issue Cardinality 0..* Changeable false Derived true Opposite status done : EBoolean If true, indicates that the issue in this status is successfully completed and issues requiring is are now workable. Issue can be completed (completion = 1), but not done, e.g. it can be cancelled. Type EBoolean Cardinality 0..1 Changeable true Derived false If true, indicates that the issue in this status is successfully completed and issues requiring is are now workable. Issue can be completed (completion = 1), but not done, e.g. it can be cancelled. Type EBoolean Cardinality 0..1 Changeable true Derived false issues : Issue* Issues in this status. Type Issue Cardinality 0..* Changeable false Derived true Opposite status Issues in this status. Type Issue Cardinality 0..* Changeable false Derived true Opposite status"},"modules/engineering/modules/model/Document.html":{"path":"Products/Engineering/Model/Document","title":"Document","content":"org.nasdanika.engineering.Document Document may contain content, table of contents, and other documents as sections. Sections can be nested. User Guide is an example of a document. User Guide Sources. Document is a type of engineered element and as such it can be owned by engineer, have issues associated with it, discussion forums, etc. Supertypes EngineeredElement Referrers ModelElement Attributes content : EString Document/section content in HTML. Type EString Cardinality 0..1 Changeable true Derived false markdownContent : EString Document/section content in Markdown. Type EString Cardinality 0..1 Changeable true Derived false content : EString Document/section content in HTML. Type EString Cardinality 0..1 Changeable true Derived false markdownContent : EString Document/section content in Markdown. Type EString Cardinality 0..1 Changeable true Derived false Document/section content in HTML. Type EString Cardinality 0..1 Changeable true Derived false Document/section content in Markdown. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/modules/bootstrap/modules/model/InputGroup.html":{"path":"Products/HTML/Models/Bootstrap/Model/InputGroup","title":"InputGroup","content":"org.nasdanika.html.model.bootstrap.InputGroup"},"modules/core/modules/diagram/modules/model/End.html":{"path":"Products/Core/Diagram/Model/End","title":"End","content":"org.nasdanika.diagram.End End pseudo-state. Supertypes DiagramElement"},"modules/core/modules/diagram/modules/gen/issues/support-mermaid-js/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Add support of Mermaid-js","title":"Add support of Mermaid-js","content":"https://mermaid-js.github.io/mermaid/#/, Specifically add support of user journey diagram to use in flows - https://mermaid-js.github.io/mermaid/#/user-journey. Sentiment value and participants from properties or element description. Origin diagram.gen/engineering.yml 49:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/support-mermaid-js Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generators Workable"},"modules/html/modules/models/modules/app/modules/gen/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters","title":"Generation Adapters","content":"Origin model/app.gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen Dependencies Model Generation Adapters jsTree"},"modules/engineering/modules/gen/index.html":{"path":"Products/Engineering/Generation Adapters","title":"Generation Adapters","content":"Origin gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/engineering/modules/gen Dependencies Model Flow"},"modules/engineering/modules/gen/issues/git-marker-message-enrichment/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/GitMarker Message Enrichment","title":"GitMarker Message Enrichment","content":"Enrhich topic messages and topics themselves with GitMarker information - author, date if not set. May not work correctly with pull requests - need to check - maybe author remains and only committer changes. Origin gen/engineering.yml 47:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/git-marker-message-enrichment Target Generation Adapters Workable"},"modules/core/modules/common/index.html":{"path":"Products/Core/Common","title":"Common","content":"Origin common/engineering/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/common Dependants CLI Ncore HTML"},"modules/engineering/modules/model/Decision.html":{"path":"Products/Engineering/Model/Decision","title":"Decision","content":"org.nasdanika.engineering.Decision Decision is an issue, which is also an aim, i.e. endeavors, such as issues, and other aims such as other decisions may be aligned to it. Decision chaining can be done via alignment or via requires dependency. Alignment indicates that the \u201cpremise\u201d decision affects the aligned decision, but the aligned decision can be in effect if the premise decision is not in effect. Requirement dependency indicates that the requiring decision can be in effect only when the required decision is in effect. Decisions can have effective dates and can be superceded by other decisions. This class does not specify the decision making process. Future releases or extensions may provide decision subclasses which support different decision analysis methodologies, e.g. Multiple-criteria decision analysis methodologies such as Analytic Hierarchy Process or Weighted Sum Model. Supertypes Issue Aim Referrers Decision Attributes effectiveEnd : EDate Date when decision stops being in effect if it was in effect before. If not set, the decision is effective indefinitely if it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false effectiveStart : EDate Date when this decision goes into effect once it is available (done). If not set, decision goes into effect once it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false resolution : EString Documentation of what has been decided (decision process outcome). Type EString Cardinality 0..1 Changeable true Derived false References supercededBy : Decision* Decisions which (will) supercede this decision when (if ever) they are effective. Type Decision Cardinality 0..* Changeable false Derived true Opposite supercedes supercedes : Decision* Decisions which this decision supercedes once (if ever) it goes into effect. Type Decision Cardinality 0..* Changeable true Derived false Opposite supercededBy effectiveEnd : EDate Date when decision stops being in effect if it was in effect before. If not set, the decision is effective indefinitely if it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false effectiveStart : EDate Date when this decision goes into effect once it is available (done). If not set, decision goes into effect once it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false resolution : EString Documentation of what has been decided (decision process outcome). Type EString Cardinality 0..1 Changeable true Derived false Date when decision stops being in effect if it was in effect before. If not set, the decision is effective indefinitely if it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false Date when this decision goes into effect once it is available (done). If not set, decision goes into effect once it is in a done status. Type EDate Cardinality 0..1 Changeable true Derived false Documentation of what has been decided (decision process outcome). Type EString Cardinality 0..1 Changeable true Derived false supercededBy : Decision* Decisions which (will) supercede this decision when (if ever) they are effective. Type Decision Cardinality 0..* Changeable false Derived true Opposite supercedes supercedes : Decision* Decisions which this decision supercedes once (if ever) it goes into effect. Type Decision Cardinality 0..* Changeable true Derived false Opposite supercededBy Decisions which (will) supercede this decision when (if ever) they are effective. Type Decision Cardinality 0..* Changeable false Derived true Opposite supercedes Decisions which this decision supercedes once (if ever) it goes into effect. Type Decision Cardinality 0..* Changeable true Derived false Opposite supercededBy"},"modules/core/modules/flow/issues/inputs-outputs-validation/index.html":{"path":"Products/Core/Flow/Issues/Inputs/Outputs validation","title":"Inputs/Outputs validation","content":"If both element and transitions/calls specify artifacts - input, output, payload, response - then validate consistency, e.g. that transition payload is in the list of activity output artifacts. Take resources into account which serve as artifact repositories. The goal is to catch situations when input artifacts appear from nowhere - don't come through inputs or call responses and cannot be retrieved from repository resorces. For output artifacts - make sure that an artifact does not disappear - it shall either be listed as a payload of a call or transition, or stored into a repository resource. Origin flow/engineering/engineering.yml 82:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/inputs-outputs-validation Target Flow Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Theme.html":{"path":"Products/HTML/Models/Bootstrap/Model/Theme","title":"Theme","content":"org.nasdanika.html.bootstrap.Theme Uses Page"},"modules/core/modules/emf/issues/multiple-e-keys/index.html":{"path":"Products/Core/EMF/Issues/Add support of multiple e-keys","title":"Add support of multiple e-keys","content":"ReferenceList - 98. Nested maps. Origin emf/engineering.yml 12:7 Uri engineering://nasdanika/modules/core/modules/emf/issues/multiple-e-keys Target EMF Workable"},"modules/html/modules/models/modules/html/modules/model/HtmlElement.html":{"path":"Products/HTML/Models/HTML/Model/HtmlElement","title":"HtmlElement","content":"org.nasdanika.html.model.html.HtmlElement Base class for other HTML and bootstrap elements. Supertypes ModelElement Subtypes BootstrapElement Tag References attributes : Property* Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false attributes : Property* Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/core/modules/exec/modules/gen/index.html":{"path":"Products/Core/Exec/Generation Adapters","title":"Generation Adapters","content":"Origin exec.gen/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/exec/modules/gen Dependencies Exec Dependants Flow Generation Adapters"},"modules/html/modules/html/index.html":{"path":"Products/HTML/HTML","title":"HTML","content":"Origin html/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/html Dependencies Common Dependants Bootstrap EMF jsTree Model Generation Adapters"},"modules/html/modules/models/modules/app/modules/model/ContentPanel.html":{"path":"Products/HTML/Models/Application/Model/ContentPanel","title":"ContentPanel","content":"org.nasdanika.html.model.app.ContentPanel Content panel displays the primary page conent and can have a navigation bar and several navigation panels. Supertypes PagePart Referrers ContentPanel Page Attributes sectionColumns : EInt Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false References breadcrumb : Label* Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false rightNavigation : NavigationPanel Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : ContentPanel* Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false title : Label Content title Type Label Cardinality 0..1 Changeable true Derived false sectionColumns : EInt Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Applicable to section style \u201cCard\u201d. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false breadcrumb : Label* Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false rightNavigation : NavigationPanel Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : ContentPanel* Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false title : Label Content title Type Label Cardinality 0..1 Changeable true Derived false Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false Content title Type Label Cardinality 0..1 Changeable true Derived false"},"principles/ecore-data/index.html":{"path":"Principles/Stateful objects shall be modeled in ECore","title":"Stateful objects shall be modeled in ECore","content":"Generation of documentation, validation, multiple source formats, multiple editors - tree, form, diagram, web-based. TODO - to Markdown, links to resources. Name/statement/rationale/implications. Origin engineering/nasdanika.yml 62:5 Uri engineering://nasdanika/principles/ecore-data"},"modules/core/modules/diagram/modules/gen/issues/drawio-customize-editor-url/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Customize drawio editor URL","title":"Customize drawio editor URL","content":"Ability to send to edit to a site other than diagrams.net Origin diagram.gen/engineering.yml 64:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/drawio-customize-editor-url Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generators Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Item.html":{"path":"Products/HTML/Models/Bootstrap/Model/Item","title":"Item","content":"org.nasdanika.html.model.bootstrap.Item Base class for model elements which can be active, disabled, and have color. Supertypes ModelElement Subtypes ActionGroupItem Label Attributes active : EBoolean Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false disabled : EBoolean Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false active : EBoolean Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false disabled : EBoolean Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"objectives.html":{"title":"Objectives","content":"Test Objective"},"modules/core/modules/ncore/issues/object-signing/index.html":{"path":"Products/Core/Ncore/Issues/Object signing","title":"Object signing","content":"Similar to code signing - during the load process digests are computed for objects and stored in the object if it implements Signed interface. For nested objects signatures are used in computing the container signature for contained objects which implement Signed. Signing is performed if the loading context provides Signer service. Object signing can be used in combination with markers to track and prove data provenance. Possibly use JWT - build a JSON Object, sign, get the signature and store in the object. Perhaps sign the root object and just compute hashes of contained objects. Origin ncore/engineering.yml 8:5 Uri engineering://nasdanika/modules/core/modules/ncore/issues/object-signing Target Ncore Workable"},"issue-statuses/open/index.html":{"path":"Issue/Statuses/Open","title":"Open","content":"Origin engineering/nasdanika.yml 52:5 Uri engineering://nasdanika/issue-statuses/open Issues Issue Module Increment Assignee Start End Duration Completion Merge to master Core Documentation Update dependencies - end of 2021 Core Documentation Persistence Service Core Documentation Add support of nsdiagram dialect Common Documentation Extract shape text from drawio XML for searching Common Documentation Use PlantUML to layout Generators Documentation Processing of Drawio diagrams Generators Documentation Implement styling of mxcells Generators Documentation Add support of Mermaid-js Generators Documentation Support of multi-page diagrams Generators Documentation Customize drawio editor URL Generators Documentation Connection ID's Generators Documentation Word wrapping Generators Documentation Gantt representation Generators Documentation Carry-over markers from Map entries to List elements EMF Documentation Add support of multiple e-keys EMF Documentation Add support of default features with e-keys EMF Documentation Type selectors EMF Documentation Homogenous to typed EMF Documentation Includes Model Documentation Embedded image data Generation Adapters Documentation Include base Generation Adapters Documentation Maven classloader Generation Adapters Documentation Link Validator Generation Adapters Documentation Artifact inheritance of representation properties from templates Flow Documentation Fully document the model Flow December Documentation Children only representation Flow Documentation Drawio styling for pseudo-states Flow Documentation Document features Flow Documentation Git provenance Flow Documentation Pseudo-state links Flow Documentation Change comment Flow Documentation Inputs/Outputs validation Flow Documentation Builders Flow Documentation Durations Flow Documentation In-browsing editing feature Flow Documentation Critical path Flow Documentation Group-by Flow Documentation Categories Flow Documentation Bundle resources mxgraph Documentation Object signing Ncore Documentation GitMarker Ncore Documentation Updgrade to Bootstrap 5 Bootstrap Documentation Action template Ecore Documentation Engineering generation target Ecore Documentation Display EMaps directly to the value class with a different relationship, e.g. ``#--`` Ecore Documentation EKeys as qualifiers - similar to EMaps. Report in documentation. Ecore Documentation Consider support of association classes using annotations. E.g. an annotation on the association class with target reference name. Say ``association-class-reference`` key with reference name. Ecore Documentation Action template annotation - location of an action resource to load a template from instead of using AppFactory.createAction(). Would allow to merge, say, navigation actions. Ecore Documentation Javadoc link to instance class. Ecore Documentation Hierarchical tables EMF Documentation Temporal rendering EMF Documentation Search functionality EMF Documentation Relative URI copy to clipboard EMF Documentation Generation API Flow Documentation Unresolved proxies Flow Documentation Predicate Flow Documentation Reintroduce components Models Documentation BootstrapVue model and generation adapters Models Documentation Fluent API Model Documentation Fluent API Model Documentation Carousel slide captions Generation Adapters Documentation Carousel section style Model Documentation Site map Model Documentation Ability to inherit action hierarchies and override specific actions Model Documentation JsTree context items Model Documentation Vue table component Model Documentation Vue table component column filtering Model Documentation Implement support of remaining section styles and section columns in the Content panel Generation Adapters Documentation Table component improvements Generation Adapters Documentation Table component column order Generation Adapters Documentation Content modes Generation Adapters Documentation Document search Generation Adapters Documentation Diagramming Engineering Documentation Branch progress Engineering Documentation Skills and Technologies Engineering Documentation Move Event to Ncore Model Documentation Relative dates feature Model Documentation Past Due Validations Model Documentation Increment matching Model Documentation Answer ranking Model Documentation Reporter Model Documentation Technology Stack Model Documentation Blog Model Documentation Configurable appearance Generation Adapters Documentation REST API Generation Adapters Documentation Help dialogs Generation Adapters Documentation In-browsing editing feature Generation Adapters Documentation Configurable tables Generation Adapters Documentation GitMarker Message Enrichment Generation Adapters Documentation Engineer activity Generation Adapters Documentation issuesTable() methods Generation Adapters Documentation Element table methods Generation Adapters Documentation Element icons from action prototypes Generation Adapters Documentation Marker-relative drawio representations Generation Adapters Documentation Engineering Link ADM Documentation Migrate to Maven plug-in ADM Documentation Deliverables and Artifacts folders ADM Documentation Issue Module Increment Assignee Start End Duration Completion Merge to master Core Documentation Update dependencies - end of 2021 Core Documentation Persistence Service Core Documentation Add support of nsdiagram dialect Common Documentation Extract shape text from drawio XML for searching Common Documentation Use PlantUML to layout Generators Documentation Processing of Drawio diagrams Generators Documentation Implement styling of mxcells Generators Documentation Add support of Mermaid-js Generators Documentation Support of multi-page diagrams Generators Documentation Customize drawio editor URL Generators Documentation Connection ID's Generators Documentation Word wrapping Generators Documentation Gantt representation Generators Documentation Carry-over markers from Map entries to List elements EMF Documentation Add support of multiple e-keys EMF Documentation Add support of default features with e-keys EMF Documentation Type selectors EMF Documentation Homogenous to typed EMF Documentation Includes Model Documentation Embedded image data Generation Adapters Documentation Include base Generation Adapters Documentation Maven classloader Generation Adapters Documentation Link Validator Generation Adapters Documentation Artifact inheritance of representation properties from templates Flow Documentation Fully document the model Flow December Documentation Children only representation Flow Documentation Drawio styling for pseudo-states Flow Documentation Document features Flow Documentation Git provenance Flow Documentation Pseudo-state links Flow Documentation Change comment Flow Documentation Inputs/Outputs validation Flow Documentation Builders Flow Documentation Durations Flow Documentation In-browsing editing feature Flow Documentation Critical path Flow Documentation Group-by Flow Documentation Categories Flow Documentation Bundle resources mxgraph Documentation Object signing Ncore Documentation GitMarker Ncore Documentation Updgrade to Bootstrap 5 Bootstrap Documentation Action template Ecore Documentation Engineering generation target Ecore Documentation Display EMaps directly to the value class with a different relationship, e.g. ``#--`` Ecore Documentation EKeys as qualifiers - similar to EMaps. Report in documentation. Ecore Documentation Consider support of association classes using annotations. E.g. an annotation on the association class with target reference name. Say ``association-class-reference`` key with reference name. Ecore Documentation Action template annotation - location of an action resource to load a template from instead of using AppFactory.createAction(). Would allow to merge, say, navigation actions. Ecore Documentation Javadoc link to instance class. Ecore Documentation Hierarchical tables EMF Documentation Temporal rendering EMF Documentation Search functionality EMF Documentation Relative URI copy to clipboard EMF Documentation Generation API Flow Documentation Unresolved proxies Flow Documentation Predicate Flow Documentation Reintroduce components Models Documentation BootstrapVue model and generation adapters Models Documentation Fluent API Model Documentation Fluent API Model Documentation Carousel slide captions Generation Adapters Documentation Carousel section style Model Documentation Site map Model Documentation Ability to inherit action hierarchies and override specific actions Model Documentation JsTree context items Model Documentation Vue table component Model Documentation Vue table component column filtering Model Documentation Implement support of remaining section styles and section columns in the Content panel Generation Adapters Documentation Table component improvements Generation Adapters Documentation Table component column order Generation Adapters Documentation Content modes Generation Adapters Documentation Document search Generation Adapters Documentation Diagramming Engineering Documentation Branch progress Engineering Documentation Skills and Technologies Engineering Documentation Move Event to Ncore Model Documentation Relative dates feature Model Documentation Past Due Validations Model Documentation Increment matching Model Documentation Answer ranking Model Documentation Reporter Model Documentation Technology Stack Model Documentation Blog Model Documentation Configurable appearance Generation Adapters Documentation REST API Generation Adapters Documentation Help dialogs Generation Adapters Documentation In-browsing editing feature Generation Adapters Documentation Configurable tables Generation Adapters Documentation GitMarker Message Enrichment Generation Adapters Documentation Engineer activity Generation Adapters Documentation issuesTable() methods Generation Adapters Documentation Element table methods Generation Adapters Documentation Element icons from action prototypes Generation Adapters Documentation Marker-relative drawio representations Generation Adapters Documentation Engineering Link ADM Documentation Migrate to Maven plug-in ADM Documentation Deliverables and Artifacts folders ADM Documentation"},"modules/html/modules/emf/issues/uri-copy-to-clipboard/index.html":{"path":"Products/HTML/EMF/Issues/URI copy to clipboard icon","title":"URI copy to clipboard icon","content":"navigator.clipboard.writeText(\"Australia\"); far fa-clipboard or far fa-copy as on GitHub. Use data-uri attribute? this.getAttribute('data-uri') Origin emf/engineering.yml 24:5 Uri engineering://nasdanika/modules/html/modules/emf/issues/uri-copy-to-clipboard Available Completion 100% Releases 2021.12.3 Status Done Target EMF Workable"},"modules/html/modules/models/modules/app/modules/model/PagePart.html":{"path":"Products/HTML/Models/Application/Model/PagePart","title":"PagePart","content":"org.nasdanika.html.model.app.PagePart Base class for page parts. Supertypes BootstrapElement Subtypes ContentPanel Footer Header NavigationBar NavigationPanel References items : EObject* Navigation items. Type EObject Cardinality 0..* Changeable true Derived false items : EObject* Navigation items. Type EObject Cardinality 0..* Changeable true Derived false Navigation items. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/app/modules/model/Page.html":{"path":"Products/HTML/Models/Application/Model/Page","title":"Page","content":"org.nasdanika.html.model.app.Page Application page consisting of several parts - header, navigation bar, navigation panel, content panel, and footer. Page extends Tag, but name attribute shall not be used - it defaults to div. Supertypes BootstrapElement Attributes fluid : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false References contentPanel : ContentPanel Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false contentRowAppearance : Appearance Type Appearance Cardinality 0..1 Changeable true Derived false footer : Footer Type Footer Cardinality 0..1 Changeable true Derived false header : Header Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false navigationBar : NavigationBar Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false navigationPanel : NavigationPanel Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false fluid : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false contentPanel : ContentPanel Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false contentRowAppearance : Appearance Type Appearance Cardinality 0..1 Changeable true Derived false footer : Footer Type Footer Cardinality 0..1 Changeable true Derived false header : Header Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false navigationBar : NavigationBar Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false navigationPanel : NavigationPanel Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false Type Appearance Cardinality 0..1 Changeable true Derived false Type Footer Cardinality 0..1 Changeable true Derived false Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false"},"modules/html/modules/models/index.html":{"path":"Products/HTML/Models","title":"Models","content":"Origin model/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models"},"modules/html/modules/models/modules/bootstrap/modules/model/Card.html":{"path":"Products/HTML/Models/Bootstrap/Model/Card","title":"Card","content":"org.nasdanika.html.model.bootstrap.Card Bootstrap card. Supertypes Div References body : BootstrapElement Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false body : BootstrapElement Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/RelationshipEntry.html":{"path":"Products/Core/Flow/RelationshipEntry","title":"RelationshipEntry","content":"java.util.Map.Entry Mapping of relationship keys (qualifiers) to a relationships. Null value suppresses inherited entry. Referrers Artifact Attributes key : EString Relationship key. Type EString Cardinality 1 Changeable true Derived false References value : Relationship Outbound relationshipt. Use null to suppress inherited relationship. Type Relationship Cardinality 0..1 Changeable true Derived false key : EString Relationship key. Type EString Cardinality 1 Changeable true Derived false Relationship key. Type EString Cardinality 1 Changeable true Derived false value : Relationship Outbound relationshipt. Use null to suppress inherited relationship. Type Relationship Cardinality 0..1 Changeable true Derived false Outbound relationshipt. Use null to suppress inherited relationship. Type Relationship Cardinality 0..1 Changeable true Derived false"},"modules/engineering/modules/model/issues/technology-stack/index.html":{"path":"Products/Engineering/Model/Issues/Technology Stack","title":"Technology Stack","content":"Containment reference in Engineer, similar to Domains, render in the navigation menu - idented table or a tree. Experts/expertise - a way track skills. Origin model/engineering.yml 31:5 Uri engineering://nasdanika/modules/engineering/modules/model/issues/technology-stack Target Model Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/Tooltip.html":{"path":"Products/HTML/Models/Bootstrap/Model/Tooltip","title":"Tooltip","content":"org.nasdanika.html.model.bootstrap.Tooltip"},"increments/2022/index.html":{"path":"Increments/2022","title":"2022","content":"Origin engineering/nasdanika.yml 89:5 Uri engineering://nasdanika/increments/2022 Start Jan 1, 2022 End Jan 1, 2023 Duration 365 days"},"modules/core/issues/persistence-service/index.html":{"path":"Products/Core/Issues/Persistence Service","title":"Persistence Service","content":"A service for storing state by single-page applications generated from YAML models Likely a template/framework. Space (origin), reference/environment (branch, tag), containment path. REST API, backed by container. Container is configurable - file system, NO-SQL, Git, relational, ... MongoDB - JSON/Map entity container? Rating, analytics (page visits). SpringBoot, Waffle for windows authentication For file/git containers extension means file, e.g. something.yml. Ability to CRUD on internal pieces, e.g. something.json/mything Some kind of application-level auth - what an application can do, specified at generation time - JWT? Origin engineering.yml 34:5 Uri engineering://nasdanika/modules/core/issues/persistence-service Target Core Workable"},"modules/core/modules/flow/issues/group-by/index.html":{"path":"Products/Core/Flow/Issues/Group-by","title":"Group-by","content":"Support of grouping by not only participants, but, say, responsible. Origin flow/engineering/engineering.yml 116:5 Uri engineering://nasdanika/modules/core/modules/flow/issues/group-by Target Flow Workable"},"modules/core/modules/flow/ParticipantResponsibility.html":{"path":"Products/Core/Flow/ParticipantResponsibility<T>","title":"ParticipantResponsibility<T>","content":"org.nasdanika.flow.ParticipantResponsibility Supertypes PackageElement<T> Subtypes Artifact ArtifactParticipantResponsibility FlowElement Referrers Participant Attributes accountableKeys : EString* Keys of accountable participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false consultedKeys : EString* Keys of consulted participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false informedKeys : EString* Keys of informed participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false responsibleKeys : EString* Keys of responsible participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false References accountable : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite accountable consulted : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite consulted informed : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite informed responsible : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite responsible accountableKeys : EString* Keys of accountable participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false consultedKeys : EString* Keys of consulted participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false informedKeys : EString* Keys of informed participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false responsibleKeys : EString* Keys of responsible participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of accountable participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of consulted participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of informed participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of responsible participants relative to the containing package participants/ reference. Type EString Cardinality 0..* Changeable true Derived false accountable : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite accountable consulted : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite consulted informed : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite informed responsible : Participant* Type Participant Cardinality 0..* Changeable false Derived true Opposite responsible Type Participant Cardinality 0..* Changeable false Derived true Opposite accountable Type Participant Cardinality 0..* Changeable false Derived true Opposite consulted Type Participant Cardinality 0..* Changeable false Derived true Opposite informed Type Participant Cardinality 0..* Changeable false Derived true Opposite responsible"},"modules/html/modules/models/modules/bootstrap/modules/model/LinkActionGroupItem.html":{"path":"Products/HTML/Models/Bootstrap/Model/LinkActionGroupItem","title":"LinkActionGroupItem","content":"org.nasdanika.html.model.bootstrap.LinkActionGroupItem Click on the item navigates to the link URL. Supertypes ActionGroupItem Attributes url : EString Link URL. Type EString Cardinality 1 Changeable true Derived false url : EString Link URL. Type EString Cardinality 1 Changeable true Derived false Link URL. Type EString Cardinality 1 Changeable true Derived false"},"issue-severities.html":{"path":"Issue/Severities","title":"Severities","content":"Critical Major Medium Low"},"modules/core/modules/flow/ExpansionInput.html":{"path":"Products/Core/Flow/ExpansionInput","title":"ExpansionInput","content":"org.nasdanika.flow.ExpansionInput Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\expansion-input.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/html/modules/models/modules/bootstrap/modules/model/Container.html":{"path":"Products/HTML/Models/Bootstrap/Model/Container","title":"Container","content":"org.nasdanika.html.model.bootstrap.Container Bootstrap layout container contains rows which in turn contain columns. Supertypes BootstrapElement Attributes fluid : EBoolean Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false References rows : Row* Container rows. Type Row Cardinality 0..* Changeable true Derived false fluid : EBoolean Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false rows : Row* Container rows. Type Row Cardinality 0..* Changeable true Derived false Container rows. Type Row Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/html/modules/model/Stylesheet.html":{"path":"Products/HTML/Models/HTML/Model/Stylesheet","title":"Stylesheet","content":"org.nasdanika.html.model.html.Stylesheet CSS stylesheet with code stored in the model element code attribute. Supertypes Filter"},"modules/core/modules/flow/Artifact.html":{"path":"Products/Core/Flow/Artifact","title":"Artifact","content":"org.nasdanika.flow.Artifact Supertypes ParticipantResponsibility<Artifact> ServiceProvider<Artifact> Referrers Artifact ArtifactEntry ArtifactParticipantResponsibility Call FlowElement Participant Relationship Resource Transition Uses Artifact Attributes partition : EBoolean If true, this composite artifact shall be displayed as a partition on the parent component diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false repositoryKeys : EString* Keys of artifact\u2019s repositories relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false templateKeys : EString* Keys of artifact\u2019s templates relative to the artifact URI. Type EString Cardinality 0..* Changeable true Derived false References children : ArtifactEntry* Artifacts can be organized into a hierarchy (Product Breakdown Structure). Type ArtifactEntry Cardinality 0..* Changeable true Derived false inboundRelationships : Relationship* Relationships which have this artifact as a target. Type Relationship Cardinality 0..* Changeable false Derived true Opposite target inputFor : FlowElement<?>* Flow elements which take this artifact as an input. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite inputArtifacts instances : Artifact* Derived opposite to templates. Type Artifact Cardinality 0..* Changeable false Derived true Opposite templates outboundRelationships : RelationshipEntry* Outbound relationships to other artifacts. Type RelationshipEntry Cardinality 0..* Changeable true Derived false outputFor : FlowElement<?>* Flow elements which output this artifact. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite outputArtifacts payloadFor : Transition* Derived opposite to Transition payload. Type Transition Cardinality 0..* Changeable false Derived true Opposite payload repositories : Resource* Type Resource Cardinality 0..* Changeable false Derived true Opposite artifacts responseFor : Call* Derived opposite to Call response. Type Call Cardinality 0..* Changeable false Derived true Opposite response responsibilities : ArtifactParticipantResponsibility* Responsibilities for this artifact at a flow element level. Type ArtifactParticipantResponsibility Cardinality 0..* Changeable false Derived true Opposite artifact style : DiagramElement Diagram element style for component diagrams. Type DiagramElement Cardinality 0..1 Changeable true Derived false templates : Artifact* Type Artifact Cardinality 0..* Changeable false Derived true Opposite instances usedBy : Participant* Participants use this artifact in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite artifacts partition : EBoolean If true, this composite artifact shall be displayed as a partition on the parent component diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false repositoryKeys : EString* Keys of artifact\u2019s repositories relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false templateKeys : EString* Keys of artifact\u2019s templates relative to the artifact URI. Type EString Cardinality 0..* Changeable true Derived false If true, this composite artifact shall be displayed as a partition on the parent component diagram. Type EBoolean Cardinality 0..1 Changeable true Derived false Keys of artifact\u2019s repositories relative to the containing package resources/ reference. Type EString Cardinality 0..* Changeable true Derived false Keys of artifact\u2019s templates relative to the artifact URI. Type EString Cardinality 0..* Changeable true Derived false children : ArtifactEntry* Artifacts can be organized into a hierarchy (Product Breakdown Structure). Type ArtifactEntry Cardinality 0..* Changeable true Derived false inboundRelationships : Relationship* Relationships which have this artifact as a target. Type Relationship Cardinality 0..* Changeable false Derived true Opposite target inputFor : FlowElement<?>* Flow elements which take this artifact as an input. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite inputArtifacts instances : Artifact* Derived opposite to templates. Type Artifact Cardinality 0..* Changeable false Derived true Opposite templates outboundRelationships : RelationshipEntry* Outbound relationships to other artifacts. Type RelationshipEntry Cardinality 0..* Changeable true Derived false outputFor : FlowElement<?>* Flow elements which output this artifact. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite outputArtifacts payloadFor : Transition* Derived opposite to Transition payload. Type Transition Cardinality 0..* Changeable false Derived true Opposite payload repositories : Resource* Type Resource Cardinality 0..* Changeable false Derived true Opposite artifacts responseFor : Call* Derived opposite to Call response. Type Call Cardinality 0..* Changeable false Derived true Opposite response responsibilities : ArtifactParticipantResponsibility* Responsibilities for this artifact at a flow element level. Type ArtifactParticipantResponsibility Cardinality 0..* Changeable false Derived true Opposite artifact style : DiagramElement Diagram element style for component diagrams. Type DiagramElement Cardinality 0..1 Changeable true Derived false templates : Artifact* Type Artifact Cardinality 0..* Changeable false Derived true Opposite instances usedBy : Participant* Participants use this artifact in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite artifacts Artifacts can be organized into a hierarchy (Product Breakdown Structure). Type ArtifactEntry Cardinality 0..* Changeable true Derived false Relationships which have this artifact as a target. Type Relationship Cardinality 0..* Changeable false Derived true Opposite target Flow elements which take this artifact as an input. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite inputArtifacts Derived opposite to templates. Type Artifact Cardinality 0..* Changeable false Derived true Opposite templates Outbound relationships to other artifacts. Type RelationshipEntry Cardinality 0..* Changeable true Derived false Flow elements which output this artifact. Type FlowElement<?> Cardinality 0..* Changeable false Derived true Opposite outputArtifacts Derived opposite to Transition payload. Type Transition Cardinality 0..* Changeable false Derived true Opposite payload Type Resource Cardinality 0..* Changeable false Derived true Opposite artifacts Derived opposite to Call response. Type Call Cardinality 0..* Changeable false Derived true Opposite response Responsibilities for this artifact at a flow element level. Type ArtifactParticipantResponsibility Cardinality 0..* Changeable false Derived true Opposite artifact Diagram element style for component diagrams. Type DiagramElement Cardinality 0..1 Changeable true Derived false Type Artifact Cardinality 0..* Changeable false Derived true Opposite instances Participants use this artifact in their activities. Type Participant Cardinality 0..* Changeable false Derived true Opposite artifacts"},"increments/2022/children/Q1/children/mar/index.html":{"path":"Increments/2022/Q1/March","title":"March","content":"Origin engineering/nasdanika.yml 107:13 Uri engineering://nasdanika/increments/2022/children/Q1/children/mar Start Mar 1, 2022 End Apr 1, 2022 Duration 30 days 23 hours"},"modules/core/modules/flow/Relationship.html":{"path":"Products/Core/Flow/Relationship","title":"Relationship","content":"org.nasdanika.flow.Relationship Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\relationship.md (The system cannot find the path specified) Supertypes PackageElement<Relationship> Referrers Artifact RelationshipEntry Uses Relationship Attributes targetKey : EString Key of relationship target relative to the containing artifact. Type EString Cardinality 1 Changeable true Derived false References style : Connection Connection style for component diagrams. Type Connection Cardinality 0..1 Changeable true Derived false target : Artifact Relationship target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite inboundRelationships targetKey : EString Key of relationship target relative to the containing artifact. Type EString Cardinality 1 Changeable true Derived false Key of relationship target relative to the containing artifact. Type EString Cardinality 1 Changeable true Derived false style : Connection Connection style for component diagrams. Type Connection Cardinality 0..1 Changeable true Derived false target : Artifact Relationship target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite inboundRelationships Connection style for component diagrams. Type Connection Cardinality 0..1 Changeable true Derived false Relationship target. Type Artifact Cardinality 0..1 Changeable false Derived true Opposite inboundRelationships"},"modules/engineering/modules/gen/issues/element-icons/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Element icons from action prototypes","title":"Element icons from action prototypes","content":"Update action providers to set an icon only if it is not already set by a prototype action. Origin gen/engineering.yml 59:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/element-icons Target Generation Adapters Workable"},"modules/html/modules/models/modules/app/modules/model/index.html":{"path":"Products/HTML/Models/Application/Model","title":"Model","content":"Application model. Origin model/app/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model Dependencies Model Dependants Generation Adapters Model"},"modules/html/modules/models/modules/app/modules/model/NavigationBar.html":{"path":"Products/HTML/Models/Application/Model/NavigationBar","title":"NavigationBar","content":"org.nasdanika.html.model.app.NavigationBar Navigation bar has a brand and navigation items. Supertypes PagePart Referrers Page Attributes background : Color Type Color Cardinality 0..1 Changeable true Derived false dark : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false expand : Breakpoint Type Breakpoint Cardinality 0..1 Changeable true Derived false References brand : Label Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false background : Color Type Color Cardinality 0..1 Changeable true Derived false dark : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false expand : Breakpoint Type Breakpoint Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type Breakpoint Cardinality 0..1 Changeable true Derived false brand : Label Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false"},"issue-priorities/high/index.html":{"path":"Issue/Priorities/High","title":"High","content":"Origin engineering/nasdanika.yml 40:5 Uri engineering://nasdanika/issue-priorities/high"},"modules/core/modules/diagram/modules/gen/issues/drawio-diagram-processing/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Processing of Drawio diagrams","title":"Processing of Drawio diagrams","content":"For existing diagrams - loading, building a graph, passing it to a method which returns a graph - the same or a different. If returned graph is not null then its model gets encoded. Optionally replace the original file with the processed one if file URI. Default implementation iterates over all cells and passes them to a cell processing/filtering method. The cell processing method shall return boolean to indicate that the cell was changed. The graph processing method shall return the same graph if any of the cells were modified or null. URI processing - if a cell has uri attribute - resolve, set relative links. If there is style - merge. Element style overrides uri style entries. Size - boolean property to indicate that cell shall be resized if element at the URI specifies size. This approach would allow to create manual diagrams referencing existing model elements and have a consistent appearance of diagram elements across multiple diagrams. Also element look will be automatically updated on all diagrams if it changes. Sync boolean property in diagram elements and diagrams - if true the diagram (representation) and the element shall be updated when the backing model changes, e.g. label, or deleted if the element is not present in the model anymore. True by default, can be set to false by the modeler in the model (YAML) or in Drawio editor. URI is used for correlation. Perhaps sync may be a list of what should be synced with true meaning all, false nothing and a comma-separated list for fine-grained definitions. For example, it might be needed to update style if it was generated from the model and the model definition changed. One option of deling with style is to compute style digest during generation and store as a property. Update style only if the style was not changed since last generation, i.e. computed digest is the same as stored digest. In this case sync style would have some value e.g. sync=style=unmodified;label=true - i.e. sync style only if it was not changed manually and always update label. May use the same approach for label - label-digest (or hash) property. Users can force update of style or label by removing/clearing respective -hash property. One more aspect of processing is validation. E.g. validation of links, especially relative links. Origin diagram.gen/engineering.yml 21:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/drawio-diagram-processing Total cost 8.0 Effort 8.0 Remaining effort 8.0 Target Generators Workable"},"modules/html/modules/models/modules/html/modules/model/StylesheetReference.html":{"path":"Products/HTML/Models/HTML/Model/StylesheetReference","title":"StylesheetReference","content":"org.nasdanika.html.model.html.StylesheetReference Reference to an external stylesheet. Supertypes ModelElement Attributes target : EString Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false target : EString Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false"},"modules/core/modules/exec/modules/model/content/Filter.html":{"path":"Products/Core/Exec/Model/Content/Filter","title":"Filter","content":"org.nasdanika.exec.content.Filter Supertypes ModelElement Subtypes Interpolator Markdown Script Stylesheet References source : EObject Type EObject Cardinality 1 Changeable true Derived false source : EObject Type EObject Cardinality 1 Changeable true Derived false Type EObject Cardinality 1 Changeable true Derived false"},"modules/core/releases.html":{"path":"Products/Core/Releases","title":"Releases","content":"2021.12.2"},"increments/2022/children/Q4/index.html":{"path":"Increments/2022/Q4","title":"Q4","content":"Origin engineering/nasdanika.yml 145:9 Uri engineering://nasdanika/increments/2022/children/Q4 Start Oct 1, 2022 End Jan 1, 2023 Duration 92 days 1 hour"},"modules/core/modules/exec/modules/gen/issues/link-validator/index.html":{"path":"Products/Core/Exec/Generation Adapters/Issues/Link Validator","title":"Link Validator","content":"Validation of links. Should work on a file system and on a resource model. Base (target) URI for link resolution and a predicate for URL's to validate, e.g. all URL's under a particular URL (internal links). Use Jsoup. Origin exec.gen/engineering.yml 17:5 Uri engineering://nasdanika/modules/core/modules/exec/modules/gen/issues/link-validator Target Generation Adapters Workable"},"modules/html/modules/models/modules/app/modules/gen/issues/section-styles/index.html":{"path":"Products/HTML/Models/Application/Generation Adapters/Issues/Implement support of remaining section styles and section columns in the Content panel","title":"Implement support of remaining section styles and section columns in the Content panel","content":"table, cards, card tabs, card pills. Origin model/app.gen/engineering.yml 10:6 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/gen/issues/section-styles Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generation Adapters Workable"},"modules/core/modules/diagram/modules/gen/issues/styling-of-mxcells/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Implement styling of mxcells","title":"Implement styling of mxcells","content":"DrawioGenerator - for diagram elements and connections. Translation of style types to shapes, e.g. node to cube. Shapes for start and end. A library of styles - from the drawio palette, exensible. Protected method in the generator, perhaps a service so multiple jars can contribute. Create a feature with documentation how to use. Or maybe Drawio support feature and document there, or a hierarchy of features. Origin diagram.gen/engineering.yml 42:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/styling-of-mxcells Total cost 4.0 Effort 4.0 Remaining effort 4.0 Target Generators Workable"},"modules/html/modules/models/modules/bootstrap/modules/model/TextAlignment.html":{"path":"Products/HTML/Models/Bootstrap/Model/TextAlignment","title":"TextAlignment","content":"org.nasdanika.html.bootstrap.Text.Alignment Uses Text"},"modules/html/modules/models/modules/app/modules/model/Link.html":{"path":"Products/HTML/Models/Application/Model/Link","title":"Link","content":"org.nasdanika.html.model.app.Link Supertypes Label Subtypes Action Attributes confirmation : EString Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false location : EString Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false name : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false script : EString Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false target : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false References modal : Modal Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false confirmation : EString Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false location : EString Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false name : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false script : EString Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false target : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false modal : Modal Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/diagram/index.html":{"path":"Products/Core/Diagram","title":"Diagram","content":"Origin engineering.yml 13:8 Uri engineering://nasdanika/modules/core/modules/diagram"},"modules/html/modules/bootstrap/index.html":{"path":"Products/HTML/Bootstrap","title":"Bootstrap","content":"Origin bootstrap/engineering.yml 1:1 Uri engineering://nasdanika/modules/html/modules/bootstrap Dependencies HTML Dependants Model Generation Adapters"},"modules/html/modules/models/modules/app/modules/model/issues/vue-table-component-column-filtering/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/Vue table component column filtering","title":"Vue table component column filtering","content":"Column-level filtering - funnel icon in the header opens a modal. If filter is applied the funnel icon changes las la-filter if no filter is applied fas fa-filter if applied. May also simply change color os stack icons, e.g. put in a circle Choices in column specs, e.g. issue statuses. Support of trees - checkbox lists or jsTree with checkboxes. Host as CSS and other JS - GitHub -> jsdelivr. Option to apply filters on columns which are not visible. Clear all filters button. Origin model/app/engineering.yml 26:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/vue-table-component-column-filtering Total cost 6.0 Effort 6.0 Remaining effort 6.0 Target Model Workable"},"modules/core/modules/diagram/modules/model/NotePlacement.html":{"path":"Products/Core/Diagram/Model/NotePlacement","title":"NotePlacement","content":"org.nasdanika.diagram.NotePlacement Note placement for diagram elements. Ignored for connections. Literals Top Bottom Left Right Uses Note Top Bottom Left Right     Note"},"modules/core/modules/exec/modules/model/resources/package-summary.html":{"path":"Products/Core/Exec/Model/Resources","title":"Resources","content":"Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.exec\\model\\doc\\resources\\package-summary.md (The system cannot find the file specified)"},"modules/core/modules/ncore/List.html":{"path":"Products/Core/Ncore/List","title":"List","content":"org.nasdanika.ncore.List Subtypes ListProperty References value : EObject* Type EObject Cardinality 0..* Changeable true Derived false value : EObject* Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false"},"modules/core/modules/diagram/modules/gen/issues/gantt-representation/index.html":{"path":"Products/Core/Diagram/Generators/Issues/Gantt representation","title":"Gantt representation","content":"With support of events and relative durations. Transition durations. Origin diagram.gen/engineering.yml 74:5 Uri engineering://nasdanika/modules/core/modules/diagram/modules/gen/issues/gantt-representation Target Generators Workable"},"modules/core/modules/flow/ExpansionOutput.html":{"path":"Products/Core/Flow/ExpansionOutput","title":"ExpansionOutput","content":"org.nasdanika.flow.ExpansionOutput Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\expansion-output.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/core/modules/ncore/ListProperty.html":{"path":"Products/Core/Ncore/ListProperty","title":"ListProperty","content":"org.nasdanika.ncore.ListProperty Supertypes Property List"},"modules/engineering/modules/model/TableOfContents.html":{"path":"Products/Engineering/Model/TableOfContents","title":"TableOfContents","content":"org.nasdanika.engineering.TableOfContents Table of Contents configuration - role, depth, header. Sections and table of contents apply to descriptions of model elements except documents where they apply to document content. I.e. document descriptions cannot have sections. Example: table-of-contents: content - creates a table of contents in the content panel with unlimited depth and no header. Referrers ModelElement Attributes depth : EInt Table of contents depth. Zero (default) means unlimited depth. Type EInt Cardinality 0..1 Changeable true Derived false header : EString Table of contents header, e.g. Contents. No header by default. Type EString Cardinality 0..1 Changeable true Derived false role : EString Table of contents role defines where it is positioned on the page. See Appearance for details regarding page parts. One of the following: content - in the content panel, before the document/section text. content-left - Left content panel. content-right - Right content panel. float-left - Floats to the left. Diferent from content-left which takes the entire column. float-right - Floats to the right. Different from content-right which takes the entire column. Type EString Cardinality 0..1 Changeable true Derived false depth : EInt Table of contents depth. Zero (default) means unlimited depth. Type EInt Cardinality 0..1 Changeable true Derived false header : EString Table of contents header, e.g. Contents. No header by default. Type EString Cardinality 0..1 Changeable true Derived false role : EString Table of contents role defines where it is positioned on the page. See Appearance for details regarding page parts. One of the following: content - in the content panel, before the document/section text. content-left - Left content panel. content-right - Right content panel. float-left - Floats to the left. Diferent from content-left which takes the entire column. float-right - Floats to the right. Different from content-right which takes the entire column. Type EString Cardinality 0..1 Changeable true Derived false Table of contents depth. Zero (default) means unlimited depth. Type EInt Cardinality 0..1 Changeable true Derived false Table of contents header, e.g. Contents. No header by default. Type EString Cardinality 0..1 Changeable true Derived false Table of contents role defines where it is positioned on the page. See Appearance for details regarding page parts. One of the following: content - in the content panel, before the document/section text. content-left - Left content panel. content-right - Right content panel. float-left - Floats to the left. Diferent from content-left which takes the entire column. float-right - Floats to the right. Different from content-right which takes the entire column. Type EString Cardinality 0..1 Changeable true Derived false"},"modules/core/modules/flow/Join.html":{"path":"Products/Core/Flow/Join","title":"Join","content":"org.nasdanika.flow.Join Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.flow\\model\\doc\\flow\\join.md (The system cannot find the path specified) Supertypes PseudoState"},"modules/engineering/modules/gen/issues/element-tables/index.html":{"path":"Products/Engineering/Generation Adapters/Issues/Element table methods","title":"Element table methods","content":"Similar to issue tables. Include aggregated things, e.g. reportedIssues, messages, assignments for engineers - numbers linking to respective pages. Create child issues for each model element. Origin gen/engineering.yml 56:5 Uri engineering://nasdanika/modules/engineering/modules/gen/issues/element-tables Target Generation Adapters Workable"},"modules/core/modules/ncore/IMarked.html":{"path":"Products/Core/Ncore/IMarked","title":"IMarked","content":"org.nasdanika.common.persistence.Marked Subtypes Marked"},"modules/core/modules/diagram/modules/model/DiagramElement.html":{"path":"Products/Core/Diagram/Model/DiagramElement","title":"DiagramElement","content":"org.nasdanika.diagram.DiagramElement Base class for diagram elements. Supertypes Link Style Subtypes End Start Referrers Artifact Connection Diagram DiagramElement Attributes border : EString Border color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false gradient : EString Gradient color - if set the node is displayed with a gradient from color to gradient. Type EString Cardinality 0..1 Changeable true Derived false id : EString Type EString Cardinality 0..1 Changeable true Derived false stereotype : EString Element stereotype. E.g. choice or fork. Type EString Cardinality 0..1 Changeable true Derived false References connections : Connection* Outbound connections. Type Connection Cardinality 0..* Changeable true Derived false elements : DiagramElement* Nested diagram elements. Type DiagramElement Cardinality 0..* Changeable true Derived false name : EObject* Composite element name to support having links in the name. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false border : EString Border color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false gradient : EString Gradient color - if set the node is displayed with a gradient from color to gradient. Type EString Cardinality 0..1 Changeable true Derived false id : EString Type EString Cardinality 0..1 Changeable true Derived false stereotype : EString Element stereotype. E.g. choice or fork. Type EString Cardinality 0..1 Changeable true Derived false Border color. E.g. lightblue or DDDDDD. Type EString Cardinality 0..1 Changeable true Derived false Gradient color - if set the node is displayed with a gradient from color to gradient. Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false Element stereotype. E.g. choice or fork. Type EString Cardinality 0..1 Changeable true Derived false connections : Connection* Outbound connections. Type Connection Cardinality 0..* Changeable true Derived false elements : DiagramElement* Nested diagram elements. Type DiagramElement Cardinality 0..* Changeable true Derived false name : EObject* Composite element name to support having links in the name. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false Outbound connections. Type Connection Cardinality 0..* Changeable true Derived false Nested diagram elements. Type DiagramElement Cardinality 0..* Changeable true Derived false Composite element name to support having links in the name. Elements shall be of type Link of Exec.content.Text. Type EObject Cardinality 0..* Changeable true Derived false"},"modules/core/modules/ncore/index.html":{"path":"Products/Core/Ncore","title":"Ncore","content":"Nasdanika Ncore model contains foundational model elements used in other models. Origin ncore/engineering.yml 1:1 Uri engineering://nasdanika/modules/core/modules/ncore Dependencies Common Dependants Model EMF"},"modules/html/modules/models/modules/bootstrap/modules/model/Row.html":{"path":"Products/HTML/Models/Bootstrap/Model/Row","title":"Row","content":"org.nasdanika.html.model.bootstrap.Row Container rows Supertypes BootstrapElement Referrers Container References columns : Column* Row columns. Type Column Cardinality 0..* Changeable true Derived false columns : Column* Row columns. Type Column Cardinality 0..* Changeable true Derived false Row columns. Type Column Cardinality 0..* Changeable true Derived false"},"modules/engineering/modules/model/Feature.html":{"path":"Products/Engineering/Model/Feature","title":"Feature","content":"org.nasdanika.engineering.Feature Feature is a unit of consumption of product functionality. Feature is developed by working on issues contributing to the feature and is made available to consumers as part of releases. Feature can be used by activities. It may also define activities exemplifying use of the feature. Such activities may be referenced from journeys. For example, \u201cCloud microservice code generator\u201d may define an activity explaining how to generate a microservice code, put it source control, and initiate a first build. Then, this activity may be referenced from \u201cCreate a cloud application\u201d journey. Supertypes EngineeredCapability Referrers Feature Issue Product References children : Feature* Features can be organized into a hierarchy. Type Feature Cardinality 0..* Changeable true Derived false issues : Issue* Issues contributing to this feature. Type Issue Cardinality 0..* Changeable false Derived true Opposite contributesTo children : Feature* Features can be organized into a hierarchy. Type Feature Cardinality 0..* Changeable true Derived false issues : Issue* Issues contributing to this feature. Type Issue Cardinality 0..* Changeable false Derived true Opposite contributesTo Features can be organized into a hierarchy. Type Feature Cardinality 0..* Changeable true Derived false Issues contributing to this feature. Type Issue Cardinality 0..* Changeable false Derived true Opposite contributesTo"},"modules/html/modules/models/modules/bootstrap/modules/model/Breadcrumb.html":{"path":"Products/HTML/Models/Bootstrap/Model/Breadcrumb","title":"Breadcrumb","content":"org.nasdanika.html.model.bootstrap.Breadcrumb"},"modules/html/modules/models/modules/app/modules/model/issues/site-map/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/Site map","title":"Site map","content":"Site map model element by default uses actions contained by the root action. Path to override this behavior - relative to self. Maybe also specify what to include - navigation, children, anonymous, ... And format - jsTree with search, list Origin model/app/engineering.yml 10:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/site-map Target Model Workable"},"modules/core/issues/update-dependencies/index.html":{"path":"Products/Core/Issues/Update dependencies - end of 2021","title":"Update dependencies - end of 2021","content":"Origin engineering.yml 32:5 Uri engineering://nasdanika/modules/core/issues/update-dependencies Target Core Workable"},"modules/engineering/modules/model/Goal.html":{"path":"Products/Engineering/Model/Goal","title":"Goal","content":"org.nasdanika.engineering.Goal Goal is an aim defined under a persona and its sub-types - engineer and organization. Goal is something that rarely changes and can be achieved, unlike principle which is also an aim, also rarely changes, but it is not achievable, it guides achievement of other aims. Goals can be organized into a hierarchy. There is no Mission class, a way to model a mission of an engineer or an organization is to define it as a single goal and then define goals as mission children. Supertypes Aim Referrers Goal Persona References children : Goal* Persona goals can be nested. Type Goal Cardinality 0..* Changeable true Derived false children : Goal* Persona goals can be nested. Type Goal Cardinality 0..* Changeable true Derived false Persona goals can be nested. Type Goal Cardinality 0..* Changeable true Derived false"},"modules/html/modules/models/modules/app/modules/model/issues/vue-table-component/index.html":{"path":"Products/HTML/Models/Application/Model/Issues/Vue table component","title":"Vue table component","content":"Takes storage key and two JSON arrays - columns and items. Column default visibility from column specs, overriden by info from local storage if storage key is specified. Filtering, sorting, configuration in a dialog. Vue/BootstrapVue. Store configuration in local storage. Have local storage operations in own methods so it is easy in the future to replace/augment storage mechanism. E.g. store to profile for authenticated users. Origin model/app/engineering.yml 19:5 Uri engineering://nasdanika/modules/html/modules/models/modules/app/modules/model/issues/vue-table-component Total cost 6.0 Effort 6.0 Remaining effort 6.0 Target Model Workable"}}