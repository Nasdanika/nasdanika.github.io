var searchDocuments = {"core/ncore/model/Reference.html":{"path":"Core/Ncore/ncore/Reference&lt;T&gt;","action-uuid":"a56440ca-ad69-4076-ae69-6c698389ff2a","title":"Reference&lt;T&gt;","content":"org.nasdanika.ncore.Reference Object reference. May be used in containment collections to point to an object contained elsewhere. Subtypes ActionReference Reference summary Reference details target : T Reference target. Type T Cardinality 1 Changeable true Derived false  target : T Reference target. Type T Cardinality 1 Changeable true Derived false Reference target. Type T Cardinality 1 Changeable true Derived false"},"html/models/app/model/Footer.html":{"path":"HTML/Models/App/app/Footer","action-uuid":"129681e7-d35c-475b-b533-df372998f55e","title":"Footer","content":"org.nasdanika.html.model.app.Footer Footer is displayed below the navigation and content panels. Supertypes PagePart Referrers Page"},"architecture/cloud/azure/compute/model/VirtualMachineScaleSet.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Virtual Machine Scale Set","action-uuid":"8ed4766e-c1dd-4dd6-83ca-5eabddd108d9","title":"Virtual Machine Scale Set","content":"org.nasdanika.architecture.cloud.azure.compute.VirtualMachineScaleSet Azure virtual machine scale sets let you create and manage a group of identical, load balanced Virtual Machines. The number of VM instances can automatically increase or decrease in response to demand or a defined schedule. Scale sets provide high availability to your applications, and allow you to centrally manage, configure, and update a large number of VMs. With virtual machine scale sets, you can build large-scale services for areas such as compute, big data, and container workloads. Supertypes Virtual Machine"},"html/models/bootstrap/model/ContentActionGroupItem.html":{"path":"HTML/Models/Bootstrap/bootstrap/ContentActionGroupItem","action-uuid":"8bbccadc-5746-4e73-8e01-efbef88a73af","title":"ContentActionGroupItem","content":"org.nasdanika.html.model.bootstrap.ContentActionGroupItem Action Group Item with content. Click on the item shows the content in the content container. Supertypes ActionGroupItem Reference summary Reference details content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false  content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Breakpoint.html":{"path":"HTML/Models/Bootstrap/bootstrap/Breakpoint","action-uuid":"bb46cc57-bf56-42a4-aa8f-f0c3b9bebd9b","title":"Breakpoint","content":"org.nasdanika.html.bootstrap.Breakpoint Uses Float NavigationBar Spacing"},"html/models/bootstrap/model/TableRowContainer.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableRowContainer","action-uuid":"19b423cc-dce4-40d7-b299-f52201ed809e","title":"TableRowContainer","content":"org.nasdanika.html.model.bootstrap.TableRowContainer Base class for containers of rows - table, header, body, footer. Supertypes BootstrapElement Subtypes Table TableSection Reference summary Reference details rows : TableRow* Table rows. Type TableRow Cardinality 0..* Changeable true Derived false  rows : TableRow* Table rows. Type TableRow Cardinality 0..* Changeable true Derived false Table rows. Type TableRow Cardinality 0..* Changeable true Derived false"},"architecture/core/model/ViewElement.html":{"path":"Architecture/Core/core/ViewElement","action-uuid":"509abe86-7b23-4903-8118-f4cebe3b776e","title":"ViewElement","content":"org.nasdanika.architecture.core.ViewElement Supertypes ModelElement Referrers ArchitectureElement View ViewElement Reference summary Reference details architectureElement : ArchitectureElement Architecture element represented by this view element Type ArchitectureElement Cardinality 0..1 Changeable true Derived false Opposite viewElements children : ViewElement* Element children Type ViewElement Cardinality 0..* Changeable true Derived false Key id  architectureElement : ArchitectureElement Architecture element represented by this view element Type ArchitectureElement Cardinality 0..1 Changeable true Derived false Opposite viewElements children : ViewElement* Element children Type ViewElement Cardinality 0..* Changeable true Derived false Key id Architecture element represented by this view element Type ArchitectureElement Cardinality 0..1 Changeable true Derived false Opposite viewElements Element children Type ViewElement Cardinality 0..* Changeable true Derived false Key id"},"html/models/bootstrap/model/ColumnWidth.html":{"path":"HTML/Models/Bootstrap/bootstrap/ColumnWidth","action-uuid":"5189f46c-b07c-4540-a817-35f0e520de20","title":"ColumnWidth","content":"org.nasdanika.html.model.bootstrap.ColumnWidth Column width for a given breakpoint. Referrers Column Attribute summary Attribute details breakpoint : EString Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false width : EString Column width. Type EString Cardinality 0..1 Changeable true Derived false  breakpoint : EString Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false width : EString Column width. Type EString Cardinality 0..1 Changeable true Derived false Breakpoint. Type EString Cardinality 0..1 Changeable true Derived false Column width. Type EString Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/FormGroup.html":{"path":"HTML/Models/Bootstrap/bootstrap/FormGroup","action-uuid":"a7c78f40-3651-47e6-827c-b08c17c17584","title":"FormGroup","content":"org.nasdanika.html.model.bootstrap.FormGroup"},"core/ncore/model/Documented.html":{"path":"Core/Ncore/ncore/Documented","action-uuid":"6669a036-0db4-4f80-a5b5-9d8575861c91","title":"Documented","content":"org.nasdanika.ncore.Documented Mix-in interface for classess with documentation. Subtypes Composite ModelElement Reference summary Reference details documentation : EObject* Element documentation. Type EObject Cardinality 0..* Changeable true Derived false  documentation : EObject* Element documentation. Type EObject Cardinality 0..* Changeable true Derived false Element documentation. Type EObject Cardinality 0..* Changeable true Derived false"},"core/exec/model/content/Base64.html":{"path":"Core/Exec/exec/content/Base64","action-uuid":"b42265ee-52bb-450b-98ff-a3a2d264ef1e","title":"Base64","content":"org.nasdanika.exec.content.Base64 Encodes source using Base64 encoding. Example content-base-64:\n   source:\n     content-resource: https://www.nasdanika.org/resources/images/ecore/EClass.gif\n Supertypes Filter"},"html/models/html/model/package-summary.html":{"path":"HTML/Models/HTML/html","action-uuid":"00d269cd-b15f-426c-8278-cef806790aa4","title":"html","content":"urn:org.nasdanika.html.model.html HTML model"},"html/ecore/index.html":{"path":"HTML/Ecore","action-uuid":"75e472f1-249e-40fe-a5c1-e40eb08a6f08","title":"Ecore","content":"With ecore module you can generate documentation for Ecore models. Features Generated diagrams with tooltips and links from the shapes to model elements pages: Package diagrams - shows package elements and their relationships. Class context diagrams - shows a class, related elements and relationships. Configurable relationship depth, 1 by default. Class inheritance diagrams - shows a class and all of its supertypes. Rich documentation using Markdown with support of embedded images and diagrams. Javadoc integration. Load specification for models which are loaded with Nasdanika EMF Persistence. Model documentation cross-referencing. Site-scoped integrated search, including searching in diagrams1. Detection of broken links, including broken links in diagrams. Traceability from documentation to model sources stored in a version control system, e.g. Git, can be added if needed - remote location and commit. Examples Ncore Diagram Exec HTML Bootstrap Application Engineering Documenting models Models are documented in Markdown using model annotations. There are the following ways to document the model: http://www.eclipse.org/emf/2002/GenModel (GenModel) annotation, documentation details. With this method you have to set &ldquo;Suppress GenModel Annotations&rdquo; to false in the GenModel editor (true by default). urn:org.nasdanika annotation: documentation-reference - location of a resource (file, URL) containing markdown documentation for an element. The location is resolved relative to the model (.ecore file) location. load-doc - Load documentation if different from the general documentation. load-doc-reference - location of a resource (file, URL) containing markdown load documentation for an element. The location is resolved relative to the model (.ecore file) location. Resource references in Markdown fenced blocks (images and diagrams) are resolved relative to the .ecore file location for documentation embedded into the model (GenModel and documentation-reference) and relative to documentation resources for referenced documentation. This is achieved by adding It works AS-IS when all generation steps are performed on the same machine. If you decide to separate generation steps, e.g. generate action models and publish them to a binary repository and generate Web sites from them later, then you will need to package image and diagram resources together with the action model and modify the markers. One simple way to do it is to package the action model together with the .ecore model - in this case you&rsquo;ll just need to relativize marker locations. Referencing EClassifiers You can reference EClassifiers available in the model resource set using ${classifier/&lt;classifier name&gt;[@&lt;package namespace URI&gt;]} token. Examples: ${classifier/Activity} - Activity classifier in the same EPackage. Classifiers in the same EPackage can also be addressed by adding .html to the classifier name, e.g. [Activity](Activity.html). ${classifier/Activity@urn:org.nasdanika.flow} - Activity classifier in EPackage with urn:org.nasdanika.flow namespace URI. During generation you will need to pass EPackage path computer to org.nasdanika.html.ecore.EcoreActionSupplierAdapterFactory constructor. See TestNasdanikaDocEngineeringGen.generateEcoreActionModel() for an example. Javadoc To link EClassifier instance class names to their javadocs you&rsquo;ll need to pass a Javadoc resolver to EcoreActionSupplierAdapterFactory constructor. See TestNasdanikaDocEngineeringGen.generateEcoreActionModel() above for an example. To create links to Javadoc in makrdown you may use &lt;fully replacement tokens. For example, org.nasdanika.common.Context would be replaced with org.nasdanika.common.Context. You will need to add a Javadoc resolver to the generation context as exemplified here. Generation steps To use add ecore dependency to pom.xml, e.g. &lt;dependency&gt;\n  &lt;groupId&gt;org.nasdanika.html&lt;/groupId&gt;\n  &lt;artifactId&gt;ecore&lt;/artifactId&gt;\n  &lt;version&gt;2022.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n Then write generation logic following the below examples: TestNasdanikaDocEngineeringGen.java - generator of this web site. TestEcoreDoc.java - a test generating documentation for a few models. Generate action model If you are generating documentation for cross-referencing models, you may need to copy the models so their physical relative location on disk matches their relative logical location in Eclipse (project name). For example, Ncore physical location relative to the Git root directory is core/ncore, but its logical (project) name in Eclipse is org.nasdanika.ncore. Therefore, in order for the flow model to reference Ncore classes the Ncore model is copied from core/ncore to org.nasdanika.ncore in a Maven target directory. The flow model is copied in a similar way. Generate resource model Once you have generated action models, mount them to a root action model (defined in actions.yml in the examples above) and generate a resource model using a page template - defined in page-template.yml in the examples. Root action model app-action:\n  icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n  uri: nasdanika:test/action/s1/s2\n  text: Nasdanika\n  location: https://www.nasdanika.org \n  tooltip: Root action\n  children:\n    - app-action:\n        icon: fa fa-book\n        text: Documentation\n        id: doc\n        location: temp://6a576160-e098-459c-9e7c-6edc8a41b874/bf60c36c-3fd1-4406-8ec8-6231b22e0cc9/index.html \n        tooltip: Documentation\n        content:\n          content-text: TODO  \n        children:\n          - app-action-reference: &quot;../../../../../../../target/model-doc/actions/ncore.genmodel.xml#/&quot;\n          - app-action-reference: &quot;../../../../../../../target/model-doc/actions/exec.genmodel.xml#/&quot;\n          - app-action-reference: &quot;../../../../../../../target/model-doc/actions/flow.genmodel.xml#/&quot;\n Page template bootstrap-page:\n  cdn: true\n  theme: Cerulean\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika/html@master/model/app.gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app-page:\n      fluid: true\n This and detection of broken links are features of Nasdanika Application Framework, which is used to generate HTML sites from action models generated from Ecore models by this module. ?"},"core/exec/model/resources/Container.html":{"path":"Core/Exec/exec/resources/Container","action-uuid":"6e4a0a2c-e2c9-42b8-a6fc-f860fffd558c","title":"Container","content":"org.nasdanika.exec.resources.Container A named collection of other resources, a folder/directory. Example resources-container:\n  name: my-container\n  contents:\n    - resources-file:\n        name: my-file.txt\n        contents:\n          content-text: Hello, World!\n Supertypes Resource Uses Container Operations find : Resource Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getContainer : Container Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getFile : File Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 find : Resource Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getContainer : Container Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 getFile : File Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 Type Resource Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1 Type Container Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1 Type File Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1"},"core/exec/model/content/Resource.html":{"path":"Core/Exec/exec/content/Resource","action-uuid":"d1a02387-ff68-4c17-b18d-130785dfaf51","title":"Resource","content":"org.nasdanika.exec.content.Resource Loads resource from a URL specified as resource value. The value is interpolated if interpolate is set to true, and then is resolved relative to the base URL. Use classpath scheme to load classloader resources. E.g. classpath:org/nasdanika/exec/some-resource.md Examples String content-resource: hello.txt\n Map content-resource:\n   description: Full resource definition\n   location: ${my-resources}/hello.txt \n   interpolate: true\n Classpath resource content-resource: classpath:org/nasdanika/exec/gen/tests/content/hello.txt\n Supertypes ModelElement Attribute summary Attribute details interpolate : EBoolean If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false location : EString Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false  interpolate : EBoolean If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false location : EString Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false If true, location is interpolated. Default is false. Type EBoolean Cardinality 0..1 Changeable true Derived false Resource location resolved relative to the model resource location. Type EString Cardinality 1 Changeable true Derived false"},"architecture/containers/docker/model/Container.html":{"path":"Architecture/Containers/Docker/docker/Container","action-uuid":"04f8463f-967d-4a87-9d55-8ed3e4c892dc","title":"Container","content":"org.nasdanika.architecture.containers.docker.Container Supertypes ArchitectureElement Subtypes Container Instance Referrers Image Reference summary Reference details image : Image Type Image Cardinality 0..1 Changeable true Derived false Opposite containers  image : Image Type Image Cardinality 0..1 Changeable true Derived false Opposite containers Type Image Cardinality 0..1 Changeable true Derived false Opposite containers"},"html/models/bootstrap/model/Carousel.html":{"path":"HTML/Models/Bootstrap/bootstrap/Carousel","action-uuid":"c219c309-aab7-4ef0-b8b3-4258c2531935","title":"Carousel","content":"org.nasdanika.html.model.bootstrap.Carousel Supertypes Div Attribute summary Reference summary Attribute details controls : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false crossFade : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false indicator : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false interval : EString Type EString Cardinality 0..1 Changeable true Derived false ride : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Reference details slides : Slide* Type Slide Cardinality 0..* Changeable true Derived false   controls : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false crossFade : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false indicator : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false interval : EString Type EString Cardinality 0..1 Changeable true Derived false ride : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false slides : Slide* Type Slide Cardinality 0..* Changeable true Derived false Type Slide Cardinality 0..* Changeable true Derived false"},"html/models/app/model/ContentPanel.html":{"path":"HTML/Models/App/app/ContentPanel","action-uuid":"985bb163-5b8a-454f-b006-922ccd7e39c9","title":"ContentPanel","content":"org.nasdanika.html.model.app.ContentPanel Content panel displays the primary page conent and can have a navigation bar and several navigation panels. Supertypes PagePart Referrers ContentPanel Page Attribute summary Reference summary Attribute details sectionColumns : EInt Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Reference details breadcrumb : Label* Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false rightNavigation : NavigationPanel Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : ContentPanel* Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false title : Label Content title Type Label Cardinality 0..1 Changeable true Derived false   sectionColumns : EInt Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false breadcrumb : Label* Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false rightNavigation : NavigationPanel Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : ContentPanel* Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false title : Label Content title Type Label Cardinality 0..1 Changeable true Derived false Breadcrumb items. Displayed on the top of the content panel. Type Label Cardinality 0..* Changeable true Derived false Navigation panel which float to the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel which floats to the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel to display on the left of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation panel to display on the right of the content. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Content sections. Type ContentPanel Cardinality 0..* Changeable true Derived false Content title Type Label Cardinality 0..1 Changeable true Derived false"},"architecture/containers/docker/model/package-summary.html":{"path":"Architecture/Containers/Docker/docker","action-uuid":"f12f35c1-12a8-49dd-9678-390a5cb9951e","title":"docker","content":"urn:org.nasdanika.architecture.containers.docker Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"html/models/app/model/NavigationPanelStyle.html":{"path":"HTML/Models/App/app/NavigationPanelStyle","action-uuid":"6f4c264b-7317-43a4-b289-b877aa65fb1d","title":"NavigationPanelStyle","content":"org.nasdanika.html.model.app.NavigationPanelStyle Literals Auto Cards CollapsibleCards Tree SearchableTree Uses NavigationPanel Auto Cards CollapsibleCards Tree SearchableTree      NavigationPanel"},"html/models/bootstrap/model/Tooltip.html":{"path":"HTML/Models/Bootstrap/bootstrap/Tooltip","action-uuid":"419ce227-cfec-43c0-8537-9d5625fa4d6e","title":"Tooltip","content":"org.nasdanika.html.model.bootstrap.Tooltip"},"architecture/index.html":{"action-uuid":"35ea4096-7d4d-411b-94e3-13e912969973","title":"Architecture","content":"Nasdanika Architecture provides models and tools for &ldquo;architecture-as-code&rdquo; development. Nasdanika Architecture is inspired by and borrows from TOGAF and C4 Model. Definitions Demo Requirements Components of Architecture Practice NASDAF Metamodel Model &amp; Repository Viewpoint &amp; View Drawio Comparison of Architecture Practice Approaches Informal NASDAF UML Adoption Metamodel &amp; Viewpoints Taxonomy Ontology Capabilities and building blocks Work Packages Managing variability with inheritance hierarchies Reusability &amp; Enterprise Continuum Dynamic viewpoints Solution Instantiation Model &amp; Views Practice Text editor Drawio editor Metamodel and Viewpoint development Sharing of generated documentation Maven plugins CLI tools Helper services Video tutorials Eclipse Ecosystem Published Architecture Development Kit (ADK) Measuring progress Conclusion Definitions Software architecture is the fundamental structure of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. Architecture development: Capturing and sharing software architecture. Architecture evolution is the process of maintaining and adapting an existing software architecture to meet changes in requirements and environment. As software architecture provides a fundamental structure of a software system, its evolution and maintenance would necessarily impact its fundamental structure. As such, architecture evolution is concerned with adding new functionality as well as maintaining existing functionality and system behavior. Demo TODO: Before you invest your time into reading, take a look at the demo. Link to the demo, demo docs - how it is done. Short summary here. Composite. Requirements Model authoring: Text editor to edit YAML files. Optional (models can be defined in Drawio files), but highly recommended. Some options to start with: Notepad Eclipse IDE GitHub Codespaces GitLab Web IDE Drawio editor. Optional - models can be defined in YAML, but highly recommended for visualizations. Options: Confluence Drawio plug-in Desktop editor - download or install from Microsoft Store Online editor Intranet-hosted Drawio Web Application Generation of model and metamodel documentation. Can be set up as an automated build with, say Jenkins, GitHub Actionss, or CircleCI among many other options: Java 11 Maven Publishing/exchange of generated model and metamodel documentation (static HTML). Options: Ability to create and share zip files. Shared drive. Hosting of static sites: Web server, e.g. IIS. GibHub Pages GitLab Pages A publishing service which serves content from source repositories OneDrive/SharePoint can serve static content if .html files are published with .aspx extension. Metamodel authoring and sharing: Eclipse IDE package with Ecore tools: Eclipse IDE for Enterprise Java and Web Developers Eclipse Modeling Tools Components of Architecture Practice Metamodel - contains specifications of types of &ldquo;things&rdquo; a.k.a. &ldquo;concepts&rdquo;, &ldquo;entities&rdquo;, &ldquo;model elements&rdquo;. For example &ldquo;Server&rdquo; is a type of thing. Server specification may define that a server has an IP address attribute, a one-to-many containment relationship with &ldquo;Hard Drive&rdquo;, and many-to-one non-containment &ldquo;supportTeam&rdquo; relationship with a &ldquo;Team&rdquo;. Model - contains descriptions of things (entities, instances, model elements). The descriptions comply with the meta-model specifications. For example, a model may contain multiple server model elements with different IP addresses, possibly referencing the same support team model element. Viewpoint - a specification of how model elements shall be represented (shown). For UML diagrams it would be a diagram type, e.g. Component diagram. Viewpoint is a meta-view. View - a representation of model elements, possibly compliant with a viewpoint specification. A view can be graphical (diagram, chart), textual - a list, or a table (matrix), or be built from UI components such as trees and forms. Repository - a storage of models. NASDAF This section provides an overview of NASDAF architecture practice components. Metamodel NASDAF uses Eclipse Modeling Framework Ecore to define the meta-model. This section provides an overview of Ecore concepts. EMF Project - contains one or more Ecore models and generator models. Generator models are used to generate Java classes from models. Ecore model - contains one or more EPackages. EPackage - a grouping construct, contains EClassifiers (EClass, EDataElement, EEnum) and sub-packages. EClass - defines a &ldquo;type of thing&rdquo;, e.g. &ldquo;Server&rdquo;. Contains structural features - attributes and references, and operations. E.g. &ldquo;Server&rdquo;. EStructuralFeature - an attribute or a reference. Can be single value on multi-value. EAttribute - simple value, e.g. a string, number, date. E.g. server&rsquo;s IP address can be defined as a single value string or as a multi-value string for servers with multiple network interfaces. A single IP address can also be defined as a multi-value integer with lower bound 4 and upper bound 6. EReference - reference to model elements. Single or multi-value. Can be containing. For example, a server contains hard drives - a multi-value containment reference. A server references its support team - a single non-containment reference. References are uni-directional. However, a references may specify another reference as its opposite. Two opposite references act as a bi-directional reference. EOperation - class behavior. E.g. server may define patch() and restart() operations. EDataType - data type definition. EEnum - enumeration. Metamodel elements can be annotated with EAnnotation. Annotations can be used to associate documentation and constraints/validations with data elements. An example of a validation would be ensuring uniqueness of IP addresses across all servers. An Ecore metamodel is used to generate Java classes representing metamodel EClasses. Compiled classes can be packaged as a Maven jar and deployed to a Maven repository, e.g. Maven Central. Model files can also be packaged and published as a Maven jar. Example - Nasdanika Ncore. Ecore metamodel and generator model can be also loaded using Java API. Nasdanika HTML Ecore can be used to generate metamodel documentation. Example - Nasdanika HTML Application Model. The metamodel defines the architectural ubiquitous language and generated documentation is a dictionary of that language. Metamodels can reference other metamodels. For example, the Application metamodel references Ncore metamodel. Application metamodel classes extend and use Ncore metamodel classes. Metamodel files are XML files and can be diffed and merged which facilitates collaborative development. Ecore code generator uses @generated Javadoc tags to mark generated code. It does not overwrite code which is not marked as generated or if the generated tag is &ldquo;dirty&rdquo; - has some text after it, e.g. @generated NOT. This feature allows generated and hand-crafted code to co-exist. For example: The generator creates an default implementation of EOperation which throws UnsupportedOperationException. Developer adds NOT after @generated and provides operation implementation. In subsequent generations the generator would skip generation of this EOperation. See EMF Tutorial. Another technique is to add Gen suffix to the generated method and leverage generated code in hand-crafted code: /**\n* &lt;!-- begin-user-doc --&gt;\n* &lt;!-- end-user-doc --&gt;\n* @generated\n*/\npublic String getNameGen() {\n\treturn name;\n}\n\npublic String getName() {\n\treturn format(getNameGen());\n}\n Model &amp; Repository At runtime ecore models are organized as follows: org.eclipse.emf.ecore.resource.ResourceSet contains a collection of related cross-referencing resources. org.eclipse.emf.ecore.resource.Resource contain model elements which are instances of meta-model classes. Resources can be loaded on-demand. For example, a resource can be loaded when a reference to an object within the resource is resolved. Resources are identified by org.eclipse.emf.common.util.URI&rsquo;s. Model elements can contain other elements. Model elements can also be identified by URI&rsquo;s. One powerful feature of Ecore is object proxies. A proxy object can be created with an URI of the target object. EReferences may be configured to to transparently resolve proxies. Resources can be loaded from different sources using org.eclipse.emf.ecore.resource.Resource.Factory. Resource factories can be associated with extensions or protocols. org.eclipse.emf.ecore.resource.URIHandler can be used to load/save resources as streams. Ecore provides org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl for loading and saving resources in XMI format. Models can be stored in a variety of databases using CDO and NeoEMF. Nasdanika provides the following resource and resource factory classes: org.nasdanika.graph.processor.emf.GraphProcessorResource - base abstract class for loading resources from graph org.nasdanika.graph.Elements. org.nasdanika.drawio.emf.DrawioResource - base abstract class for loading resources from Drawio (diagrams.net) diagrams. org.nasdanika.html.model.app.drawio.ResourceFactory - loads application model from Drawio diagrams. See App Drawio for more detais. org.nasdanika.persistence.ObjectLoaderResourceFactory and org.nasdanika.persistence.ObjectLoaderResource - load models from YAML &amp; JSON. Also supports loading YAML and JSON from data URI&rsquo;s. org.nasdanika.emf.persistence.NcoreDrawioResourceFactory - resource factory for loading models from Drawio diagrams using &ldquo;semantic mapping&rdquo; where diagram element properties are used to specify how to load a model element represented by the diagram element. One diagram element can have multiple semantic mappings using namespaces, i.e. one diagram can be used to load multiple models representing different aspects of what is depicted on the diagram. See EMF for more details. org.nasdanika.emf.persistence.ExcelResourceFactory and org.nasdanika.emf.persistence.ExcelResource can be used to load resources from MS Excel files. Custom URI handlers can be created to load models from sources such as: GitHub or GitLab using REST API, gitlab4j-api or JGit. E.g. git: scheme can be used to load resources using JGit, and gitlab: to load using gitlab4j-api. This approach would allow to reference resources at a specific reference, e.g. a branch or tag, which is more flexible than git submodules. For REST API cases it would also allow to load resources on-demand instead of full clone. Maven resources can be addressed using maven://&lt;group id&gt;/&lt;artifact id&gt;/&lt;version&gt;/&lt;file&gt;[/&lt;path in jar&gt;] and loaded using Maven Artifact Resolver. Custom factories may load resources from, say: Issue tracking systems. Organization directories. In some cases adapter services can be created to load models from information systems and serve them over HTTP(S) as XMI, JSON, or YAML. In case of XMI an adapter may leverage classes generated from metamodels to programmatically populate a model and then save it to XMI. Loading logic may retrieve data from multiple sources. For example: A person model element can be loaded from the organization&rsquo;s directory and then enriched with information from, say, profile.yml located in the person&rsquo;s personal Git repository is such repository and file exist. Some information about a software component may be loaded from pom.xml. Information about developers can be loaded as proxies with developer e-mails as proxy URI&rsquo;s. The proxies would be resolved to person objects loaded from the organization&rsquo;s directory. Person objects may have a computed (derived) opposite to &ldquo;developers&rdquo; reference of a software component model element. This would allow to list all software components for a given developer. As you can see, EMF allows to load data from multiple sources - databases, diagrams, YAML, JSON, Excel, information systems - cross-reference (stitch), validate, and represent as a coherent graph of model elements. The data loading logic acts as an anti-corruption layer hiding complexities of data retrieval. Viewpoint &amp; View There is a number of ways to define viewpoints for EMF models: Eclipse IDE: Tree editors can be generated from metamodels similar to model classes. Eclipse Sirius allows to define multiple representations (viewpoints) - diagrams, trees, tables. Xtext can be used to develop domain-specific text-based languages based on the metamodel. Such a language can be considered to be a &ldquo;text-based viewpoint&rdquo; JFace Data Binding for EMF can be used to define SWT-based views. Views can be designed in Eclipse WindowBuilder. Web Eclipse Sirius Web can be used to create and deploy a graphical studio to the web. Eclipse RAP allows to export SWT-based GUI to the Web. Nasdanika HTML EMF org.nasdanika.html.emf.EObjectActionBuilder is a base class for creating adapters to generate Nasdanika HTML App Model Actions from model elements. The action model can then be used to generate a static web site. Example - Drawio Semantic Mapping is generated from a hierarchy of Composite&rsquo;s. The generation process validates the site for broken links, including links in diagrams. For model elements loaded from Drawio diagrams, source diagrams can be used in the action content. Action content may also contain additional diagrams (sub-views) - Drawio, PlantUML or Mermaid. Example - Markdown. Generated sites feature full-text search which includes text from diagram labels and tooltips. Drawio Drawio diagrams can be used as model resources and as free-form model views (representations) which are not constrained by a viewpoint specification. This section provides an overview of Drawio. org.nasdanika.drawio.Document contains one or more pages. org.nasdanika.drawio.Page contains org.nasdanika.drawio.Model, which in turn contains root. Pages have name and id. org.nasdanika.drawio.Root has properties and contains one or more layers. org.nasdanika.drawio.Layer contains layer elements - nodes and connections. Layers have a name (label), properties, and can be hidden. org.nasdanika.drawio.Node may contain other other nodes and connections. Nodes have a label, tooltip, properties, tags, and incoming and outgoing connections. A node can be linked to a URL or a page. ${javadoc/org.nasdanika.drawio.Connection may have source and target nodes. Similar to nodes and layers, connections have a label, tooltip, properties, and tags. Tags are strings associated with nodes and connections. Similar to layers, tags can be used to hide diagram elements. However, layers contain nodes and connections, and tags have many-to-many relationship with nodes and connections. See Nadanika Core Drawio for more details. Drawio diagrams can be created and edited using the following methods: Desktop editor which can be downloaded from diagrams.net or installed from Microsoft Store. Online editor Hosted editor - deploy Drawio webapp to a web server. You can modify js/viewer-static.min.js to point to the URL of your hosted editor - search and replace https://app.diagrams.net with the URL of your installation. Drawio plug-ins, e.g. Confluence plug-in. Drawio diagrams can be exported from Confluence as well as imported to Confluence. Drawio shapes and diagrams can be added to a user library and that library can be used to author new diagrams. This feature can be used to create libraries of shapes with pre-configured semantic mapping. Comparison of Architecture Practice Approaches This section compares three approaches to architecture practice which can be put on the &ldquo;formalism continuum&rdquo; as follows: Low formalism (informal) - architectural artifacts are stored in Visio and PowerPoint documents and Drawio diagrams in Confluence. Diagram elements are not linked to model elements because there is no backing model and meta-model. Adjustable formalism - NASDAF. High formalism - UML with Sparx Enterprise Architect as an example. The below table provides a side-by-side comparison of the approaches for each architecture practice elements. Subsequent sub-sections provide a more detailed explanation of each approach, pros and cons, and when to consider moving from one to another. When you read this section keep in mind that &quot;All models are wrong, but some are useful. Any model is wrong by definition because they are descriptions of particular aspects of reality. If a model is right then it is not a model, it is reality. What is useful is dependent on the context and the goals. In particular, reality and models/metamodels with a high level of details are not useful in many cases because they are too complex. You need to strive for the just the right level of complexity/simplicity - &ldquo;Everything Should Be Made as Simple as Possible, But Not Simpler&rdquo;. Component Informal NASDAF UML Metamodel Informal/tacit. May be documented, but the documentation does not constrain the model through automated means - it is up to modelers to create models compliant with the metamodel. Formal metamodel with types (classes) specific to the organization. Formal metamodels with types (classes) specified by a notation being used, e.g. UML. Model Informal - tacit/tribal knowledge. Formal model compliante with the metamodel Viewpoint Informal - diagram types used in the organization Formal - HTML generators Formal graphical notations (diagram types). View Informal - PowerPoint, Visio, Drawio diagrams in Confluence pages Informal - Drawio, formal - HTML pages Formal - diagrams compliant with diagram types. View to model cardinality Undefined, as there is no formal model Many-to-many for Drawio semantic mapping with namespaces. The same diagram file (resource) can be used to load different models. For example, an architecture model to communicate system functionality, implementation model integrated with work tracking system to communicate system development progress, and a runtime model integrated with monitoring solutions do communicate system status, e.g. failed or overloaded components. Many-to-one Repository Distributed and disconnected - filesystem, OneDrive/Sharepoint, Confluence Distributed and connected - YAML, JSON, Excel, Drawio, XMI files in version control, integrations Tool-specific (opaque) repository - MS Acess database file, DBMS, Cloud. 1 Informal In the low formalism scenario there is no formal metamodel and there is no model. Or the metamodel can be formal, but not traceable from architecture artifacts - all architecture stakeholders are expected to know the metamodel and the model by heart. There are many architecture artifacts mentioning, but not referencing, the same concepts (model elements). In the diagram above &ldquo;ABC Microservice&rdquo; and &ldquo;XYZ SOR&rdquo; are mentioned, but not referenced. A person looking at the diagram is expected to possess contextual knowledge to understand what is depiced and where to look for additional information. An informal practice is a good fit for situation where there the informal metamodel and model are well-understood in the organization and the level of changes is low enough - the organization/team is stable, new people have time and access to resources to learn about how things are done. Some indicators when this practice becomes a misfit: There are many presentations, pages, and diagrams, but it not clear which of them are sources of truth. Multiple version of what architecture is expected to describe, but a single body of architecture knowledge. Knowledge dilution - influx of new people; people who have the tribal knowledge are not sharing their knowledge with the new people because they are too busy. Knowledge fragmentation - people hold bits and pieces of knowledge. Those bits and pieces may contradict each other. Only a handful of people speaks at large meetings. New people don&rsquo;t speak up because the veterans hold the monopoly to truth. Those who speak argue about definitions. One of situations when such a misfit happens is when a small team develops a solution which is then positioned as a shared/reusable component/asset or a platform on which new solutions should be built. The team grows and what worked well for, say, 10 people doesn&rsquo;t work anymore for 50 core developers and hundreds of developers who are told to use the shared component/platform. NASDAF Comparing to the other two approaches, NASDAF requires investment into development of a metamodel and viewpoints. It is perhaps an overkill if architecture is developed and maintained by a small group of people and architecture consumers either possess contextual knowledge to understand diagrams not backed by models, or they are knowledgeable of the underlying metamodel and notation, e.g. UML and its diagrams. It is a good fit if: An organization wants to &ldquo;shape the tool&rdquo; and codify organization&rsquo;s &ldquo;secret sauce&rdquo;. For example, how teams work on efforts, how efforts are financed, who has expertise in a particular product or component. There is an appetite for a holistic view but bits and pieces of information are spread over multiple systems and people. Systems can be integrated and people may own and maintain fragments of the whole distributed architecture model using means familiar to them. E.g. YAML or Excel. Such fragments can be kept close to the code of assets they describe, e.g. in the same version control repository. Multiple version of architecture shall exist at the same time - multiple releases, feature branches or forks (e.g. a POC branch or fork). There is a need to manage variability between, say, regions and business lines. With NASDAF metamodels can be organized into an inheritance hierarchy with common concepts being at the top and variations handled in subclasses. UML With industry standards such as UML you get a metamodel and viewpoints out of the box. It is a good fit if people consuming architecture artifacts &ldquo;speak&rdquo; UML and be able to access architecture documentation. People contributing to architecture development have access to and know how to use the modeling tool. However, the tool shapes you instead you shaping the tool. You may need to find a way to capture organization-specific concepts. In UML it can be done with, say, stereotypes and tags. If the above conditions are not met, UML may become a burden: Only a small portion of the language would be used. The unused portion becomes an &ldquo;attack surface&rdquo; - a risk for abuse. It also drains peoples mental capacity and dilutes focus. The language, being an industry standard, still can&rsquo;t express organization-specific concepts. &ldquo;Ivory tower&rdquo;/&ldquo;over the wall&rdquo; architecture practice may arise if tooling is available only to a small number of people in the organization. Adoption Adoption of NASDAF has 3 dimensions as shown on the diagram below: The value to the organization is proportional to the volume of the 3-D shape reflecting the adoption progress. However, adoption just along the practice and metamodel dimensions still brings value. On the diagram the shape is a rectangular cuboid, but is doesn&rsquo;t have to be as it will be explained below. You can think of the three dimensions using the following metaphor: Metamodel &amp; Viewpoints - exploration. Discovering oil fields or plowing a field. Model &amp; Views - exploitation. Building oil rigs or planting a field. Practice - providing equipment for exploration and exploitation, e.g. a tractor to plow a field. Metamodel &amp; Viewpoints The metamodel describes organization&rsquo;s architecture problem domain. Organization&rsquo;s metamodel can be an extension of an existing metamodel, e.g. Ncore or NASDAF Model. Also, initially there might be no organization&rsquo;s metamodel - you can start with an existing metamodel and then elicit metamodel from the model. E.g. if you find that in many cases architecture documentation contains &ldquo;Contacts&rdquo; section, then you should probably capture it in the metamodel and then migrate &ldquo;Contacts&rdquo; from the documentation to the model. The opposite is also true - initially there might be no model, only a metamodel to drive common understanding of concepts and relationships within the organization. A few ideas regarding metamodel evolution are outlined in the below sections Taxonomy You can start with a taxonomy of &ldquo;things&rdquo; using Composite. E.g. Offerings - products and services - what your organization offers to its customers. Business capabilities - building blocks of offerings. Technical capabilities - building blocks of business capabilities. Tech stack - building blocks of technical capabilities. You can use block diagrams to define and represent the hierarchy of composites. Drawio Semantic Mapping Demo is an example of such a taxonomy. Ontology The next step after building a taxonomy is ontology - start creating classes with attributes (properties) and relationships. Capabilities and building blocks Capability - something that is needed to achieve some goal. The WHAT. E.g. &ldquo;Ability to make quarter-inch holes&rdquo;2 or &ldquo;RDBMS&rdquo;. Building block - something that provides capabilities. The HOW. E.g. &ldquo;A quarter-inch drill bit&rdquo; or H2. A building block may provide more than one capability and a capability may be provided by multiple building blocks. E.g. there are many RDBMS products. A building block may also consume (require) capabilities. E.g. an RDBMS may consume disk space, RAM, CPU cycles. Both capabilities and building blocks may have versions. Versions may have temporal properties. They may extend Period or have have lifecycle phases extending period. E.g. &ldquo;Planned&rdquo;, &ldquo;Development&rdquo;, &ldquo;Beta&rdquo;, &ldquo;GA&rdquo;, &ldquo;Aging&rdquo;, &ldquo;Retired&rdquo;. Capabilities/building blocks metamodel would allow to build &ldquo;Supply chain&rdquo; views showing a graph of building blocks and provided and consumed capabilities. Using an example from the taxonomy section: Offerings consume business capabilities. Business capabilities can be provided by multiple building blocks consuming technical capabilities. Technical capabilities may also be provided by multiple building blocks consuming tech stack capabilities and building blocks. Separation of capabilities (the WHAT) from buidling blocks providing them (the HOW) allows to define solution patterns in terms of capabilities and then build pattern embodiments by selecting building blocks providing those capabilities. E.g. &ldquo;Drink - Appetizer - Main Course - Dessert&rdquo; is an offering pattern used by restaurants. And a menu is a catalog of building blocks providing &ldquo;Drink&rdquo; and other &quot;capabilities. Supply chains may be used to identify risks. For example, you may define a capability &ldquo;Expertise with ABC component&rdquo; and ask people in your organization to list their expertise in a form of provided capabilities (it can also be modeled differently). Then you may discover that a particular building block is rather critical because it is used by many offerings, but there is only a handful of people who have expertise with it. Work Packages A concept of a &ldquo;Work Package&rdquo; can be introduced to capture what needs to be done. A work package would have relationships with components it impacts - where work needs to be done, and with parties doing the work, e.g. teams, vendors. Work packages can be nested (WBS), have phases, similar to versions above. E.g. &ldquo;Backlog&rdquo;, &ldquo;In Progress&rdquo;, &ldquo;Completed&rdquo;, &ldquo;Deployed&rdquo;. Such phases may have temporal properties, e.g. extend Period. Or a work package itself may extend Period. Work packages may also have relationships with organization&rsquo;s units of funding and work items in a work tracking system. One work package may correspond to multiple work items. Work packages may be modeled as flows. Managing variability with inheritance hierarchies In organizations which have multiple divisions/business lines and operate in different regions there might be variations between how things are structured. One example would be US and UK mailing addresses. They have common parts - Street and City, and different parts - State and Zip code in the US address and postal code in the UK address. A way to manage this variability is to have a core metamodel which contains common classes and structural features, and region/business line specific metamodels extending the core metamodel. In such a hierarchy metamodel elements can move vertically and horizontally. A vertical move is pulling generic things up and pushing specific things down. A horizontal move is &ldquo;borrowing&rdquo; or &ldquo;copy-paste&rdquo; - one part of organization may leverage things from another part without pulling them up the hierarchy (yet). Situations where there is more than one hierarchy/dimension of variability (e.g. regional and business line) can be handled as follows: One dimension is handled as inheritance. Other dimensions are handled as either: Mix-in classes and interfaces - variations from the non-primary variability dimensions are inherited using multiple inheritance. This approach is shown on the diagram below. Facets - variations are contained in nested objects (facets). E.g. a common class Customer may contain either US or UK address. If needed, you may introduce a concept of suppressing features and classes using annotations and validations. Imagine that there is a particular attribute that is used in a majority of cases. Say, street name and number in addresses. And maybe there are regions where street names and numbers are not used. This situation may be handled in several ways: Define street name and number only where it is applicable. It would result in multiple definitions and inability to write common logic which deals with street names and numbers. Define street name and number at the top of the hierarchy and don&rsquo;t use it where not applicable - can be used by mistake. Create a mix-in class which defines street name and number attribute. Mix it in to the classes where it is applicable. Better than duplication, but a lot of mixing in to do. Suppress. Use annotations to prevent loading of street name and address from YAML definitions and to hide in documentation. Use validation/constraint to report it set (if loaded from XMI or programmatically). In this case suppression would need to be configured only for the exceptional cases. It is possible to implement suppression with mix-ins. In this case a mix-in would define a suppressing annotation instead of structural features. Reusability &amp; Enterprise Continuum TOGAF has a concept of Enterprise Continuum to classify how reusable are different assets, e.g. solution building blocks. Concepts of the enterprise continuum can be introduced into the metamodel to drive higher and more disciplined reuse. TOGAF&rsquo;s enterprise continuum defines the following classification &ldquo;buckets&rdquo;: Foundation Common Systems Industry Organization-Specific The organization-specific bucket can be divided into sub-buckets and that division is sometimes not linear, but rather a multi-dimensional hierarchy as exemplified below: Business Line &gt; Department &gt; Solution Regional, e.g. NAM &gt; US &gt; California Channel: Brick &amp; Mortar, Web, Mobile, Metaverse With multiple dimensions of the continuum, reuse becomes a game of multi-dimensional chess - how do I occupy a particular sub-bucket if I already have assets in such and such buckets? This section outlines how to introduct enterprise continuum and reusability into the metamodel and the model. Define reuse dimensions, e.g. Organizational hierarchy (business units/departments) Offerings hierarchy - types of customers, types of products and services Regions Channels Introduce a concept of an intersection of reuse dimensions - an &ldquo;Application Point&rdquo; - where a particular building block is already applied (used) or can be potentially applied (reused). &ldquo;Application Point&rdquo; can be a class referencing all dimension classes. If a dimension reference is blank then the class applies to all elements of that dimension. E.g. if &ldquo;Channels&rdquo; is blank then this application point applies to (matches) all channels. Introduce an association class between an &ldquo;Application Point&rdquo; and a building block. That association class would be contained by the building block with a many reference. The class would specify what it takes to make a particular building block usable/applicable at a particular application point - time, effort, required resources. The class may extend Work Package or contain work packages. Such classes may form a dependency hierarchy. Building blocks can be defined in the capabilities taxonomy/catalog or they can be contained by the model element representing continuum dimensions. For example, a building block created for a specific solution can be defined &ldquo;under&rdquo; that solution. It may be moved to the taxonomy catalog after it was made reusable. One technique which can be used to make building blocks more reusable is refactoring a building block into several blocks by separating generic and specific functionality. The generic part would provide &ldquo;extension points&rdquo;, e.g. methods which can be overridden, or configuration properties. The specific part would provide &ldquo;extensions&rdquo; for these points, e.g. override methods. It may also in turn introduce its own extension points. Along with the enterprise continuum concepts you may introduce a concept of &ldquo;source continuum&rdquo; to help with collaborative/inner source development. Elements of this continuum would include: Open source. One flavor of open source is &ldquo;Open source/closed contribution&rdquo;. To reflect this model you may have two categories for source - consumption and contribution. &ldquo;Ajar source&rdquo; - building blocks developed and used by several partner organizations. Inner source - building blocks developed and used by multiple teams within an organization. Closed source - building blocks developed by Dynamic viewpoints Dynamic viewpoints can be created using the following techniques: Single-page application. The generation process would generate the application and supporting data files. Some data can be pulled from external systems. For example, a viewpoint for a microservice component may display performance metrics pulled from a monitoring system. Search is an example of a Single Page Application built with BootstrapVue. Dynamic server-side application, e.g. a Spring Boot app. In this case the model is loaded into memory (e.g. cached at the application or session scope) and pages are generated on request (and can also be cached). The two techniques can be used together. Solution Instantiation So far we&rsquo;ve been talking about generation of documentation from architecture metamodels and models. As the metamodels and models become more and more detailed at some point it may make sense to use them to generate (instantiate) solutions. Solution instantiation may include the following steps: Create a source repository or multiple repositories. Generate &ldquo;Hello world&rdquo; source code and push to the repositories. Create runtime infrastructure. Create a build pipeline. Deploy a new solution. Execute basic tests. The above steps may be automated or manual: Issue tracking system - create a hierarchy (WBS) of issues, attach generated code and documentations to issues. Issues are manually worked on. However,developers save time by leveraging generated code and documentation. Workflow system - some activities are automated, some manual. Fully automated - all steps are executed by the generator. If any step fails everything is rolled-back (configurable). Models are updated with identifiers of generated artifacts. E.g. URL&rsquo;s of source repositories, ID&rsquo;s of cloud resources. In some cases it should be possible to execute the instantiation process multiple times and it will apply only changes. It is also implement code generation is such a way that it will merge generated code with manual modification made in the originally generated code. This functionality is available for Java and can be implemented for other artifact types. Code generation/solution instantiation may be implemented in several ways, some of them are listed below: Drawio diagrams: Semantic mapping to multiple models. E.g. documentation model and generation/instantiation model. Graph processors including reflective graph processors which allow to map graph (diagram) elements to Java methods. With graph processors a Drawio diagram can be used a runtime artifact. With Drawio Java API diagrams can be used as configuration resources/data sources. Metamodel classes may have EOperations for code generation/solution instantiation. Adapters and adapter factories can be created to generate code from models. In this case the metamodel stays agnostic of code generation concerns and it is possible to have multiple adapters and factories for different generation targets. This approach is used to generate HTML documentation from Ecore models and metamodels. Helper/additional models containing information needed for generation, but not available in the &ldquo;primary&rdquo; model. This approach is used by the Ecore generator which used two models .ecore and .genmodel. These approaches may be combined. You may have different solution instantiators or instantiation profiles for different contexts/environments. E.g. for a local environment a solution can be instantiated with stubbed/mocked dependencies and, say, embedded databases. You may also instantiate several embodiments of your solution with different configurations to perform a side-by-side comparison - this can be useful for evaluation of new approaches and technologies (POC&rsquo;s). Drawio user libraries can be used to facilitate solution instantiation. User libraries may contain: Diagrams of patterns with pre-configured or partially configured elements. E.g. an element may define a type/capability but not implementation/building block. Say, &ldquo;RDBMS&rdquo;. The modeler would add implementation details and then a solution would be instantiated with modeler&rsquo;s choices. The modeler may also customize the pattern if needed. Pre-configured diagram elements to build solutions from. Say, &ldquo;RDBMS&rdquo; for a generic relational database, &ldquo;H2&rdquo; for a specific embedded database, or &ldquo;XYZ SOR&rdquo; for connectivity to organization&rsquo;s system of records. One of definitions of software development is &ldquo;Incremental binding of decisions to make them executable&rdquo;. Techniques explained in this section allow to bind decisions in a traceable and auditable way. Model &amp; Views As it was mentioned above, you can start building models by using an existing metamodel, e.g. Ncore Composite. Attributes and relationships not supported by the metamodel can be captured in documentation. Then elicit organization-specific metamodel by analyzing the model. And then gradually upgrade models to the new metamodel classes. Say, in Release 1 a maven software component can be documented using Composite. In Release 2 it may be changed to a Building Block providing and consuming capabilities. In Release 3 it may be changed to a Maven Component class with information loaded from both YAML spec and pom.xml. The projection of the adoption progress to the Model &amp; Viewpoints / Model &amp; Views plane is a rectangle only in the case when all newly released metamodel classes and features get adopted at the same time. Because of possibly gradual adoption of the metamodel classes and features this projection is not a rectangle, but something between a rectangle and a triangle (keep in mind, though, that this projection is not an exact science, but rather a metaphorical visualization). One important outcome of establishing even a simplest model such as a taxonomy is that diagram elements now not just mention, but reference model elements and these references navigate to the same page. E.g. if two diagrams have &ldquo;XYZ SOR&rdquo; diagram element then a mouse click on both of those diagram elements shall navigate to the page describing &ldquo;XYZ SOR&rdquo;. Another outcome is that after establishing a taxonomy it is possible to create a publish Drawio user libraries with pre-configured diagram elements. E.g. a library of organization&rsquo;s SOR&rsquo;s or a library of business capabilities from which offerings can be built. You may start with a model in a single version control repository. As the model grows it can be split into several repositories. Models from different repositories can be &ldquo;stitched&rdquo; together in using the following techniques: Clone all model repositories and use relative paths. This approach would become cumbersome when a number of repositories and dependency depth grows. Git submodules. Raw URL&rsquo;s of a respective version repository, e.g. https://raw.githubusercontent.com/Nasdanika/core/master/core.yml. This is similar to Git submodules, but doesn&rsquo;t involve cloning the referenced repository. It may be beneficial in situations where architecture models live in the same repository with a software component they describe and the component is rather large. Using custom URI schemas URI handlers to load resources from repositories. E.g. using gitlab:// scheme to retrieve resources from GitLab using gitlab4j-api. This is similar to raw URL&rsquo;s. Publishing service URL&rsquo;s. A publishing service serves repository content. Its primary use is to serve static content (see &ldquo;Practice&rdquo; below), but it can also be used for model cross-referencing. jsDelivr is an example of such a service. Maven dependencies. Dependency models may be packaged as Maven resource jars and published to a Maven repository. Models resources in such jars can be accessed using classpath:// URI scheme. Practice As it was mentioned in the requirements section above, to start with NASDAF in your local environment you would need a text editor or Drawio editor, Java 11, and Maven. This would be your starting point from which NASDAF practice can be evolved as explained below. Text editor While a plain text editor would do, it is better to have an editor with syntax highlighting, error detection, and parse tree outline. For example, Eclipse IDE for Enterprise Java and Web Developers has a YAML editor plug-in. Drawio editor You can start with Drawio Confluence plug-in, if you are in a corporate environment and your company uses Confluence. Or you can use the online editor or an intranet-hosted editor. The desktop editor, however, is a bit easier to use to edit local files. An intranet-hosted editor may be integrated with your version-control system. Metamodel and Viewpoint development You&rsquo;d need Ecore tools at a minimum. They are available in Eclipse IDE for Enterprise Java and Web Developers and Eclipse Modeling Tools packages. As your practice matures you may create your own graphical workbench using Eclipse Sirius. You may also explore other technologies mentioned in the &ldquo;Metamodel&rdquo; section above. Sharing of generated documentation You can start with sharing of archived sites or committing of generated documentation to version control for other people to check-out and view locally. Another option is to publish generated files to a shared drive. If you have OneDrive, you can set up your build to output HTML files with .aspx extension and publish them to OneDrive. If you have GitHub or GitLab pages, you can publish documentation there. If you have a web server, an automated build can be set up to generate and publish documentation. The most flexible way, though, is a publishing service (which can also collect web analytics). Such a publishing service would serve files from your version control repository for any branch, tag, or commit. This would simplify working with feature branches and cross-referencing of model resources. Solutions for sharing of generated documentation may be used for sharing any static documentation, including video tutorials (see below). The publishing service may also perform rendering. E.g.: For my-document.md.html if the file with this name does not exist then my-document.md would be rendered to HTML and served. The same approach can be used for drawio, plant uml and some other file types. Maven plugins Package documentation generation and solution instantiation logic can be packaged into Maven plugins. CLI tools You may also make generators and instantiators available as CLI tools, e.g. using picocli. Helper services Some logic may be packaged into a helper (web) services. For example, access to surrounding systems such as version control and issue tracking can be handled by helper service. Code generators such as Maven plug-ins would authenticate with the service using service-specific authentication tokens and the service would authenticate with the surrounding systems using mechanisms supported by those systems. Video tutorials Video tutorials created as explained in this Video Tutorial Demo can be integrated with the generated documentation. Eclipse Ecosystem If you decide to leverage Eclipse technologies like Sirius and Xtext you&rsquo;d likely to need to establish an Eclipse Ecosystem if you don&rsquo;t have one in place already. Published Architecture Development Kit (ADK) An ADK can be used to develop new architectures on top of the existing architecture pretty much as SDK&rsquo;s are used for application development. An ADK may include: Metamodels - as published Maven jars or as archived Eclipse projects to imported into a workspace. Model(s) - as published Maven resource jars. Distributed models loaded from multiple sources may be loaded by the build process, saved to XMI, and then published to Maven or packaged with the ADK. Other options include storing to a CDO or NeoEMF repository and making it available over the network. If a CDO repository used H2, the repository may be published in a resource jar/zip. Generated documentation may be published in multiple formats - at a specified URL (say https://mycompany.com/adk/&lt;yyyy-mm&gt;/), as a downloadable archive, or as part of the ADK package. Tools can be published as Maven plug-ins or packaged as CLI tools with the ADK. Eclipse tools can be made available in a P2 repository - published to the network, archived for download, or packaged with the ADK. You may also create an Eclipse package with all the tools installed and generated documentation available as Eclipse help. Models, metamodels, and reference implementations/starter projects can be made available as plug-ins which can be imported into a workspace. Measuring progress Metamodel: Size - number of metamodel elements over time. Utilization: Number of metamodel elements used in models. E.g. you may have 20 metamodel classes with 100 features, but your models use only one class, say Composite, with just a few features. Web analytics for metamodel documentation pages. E.g. page views, unique visitors, time on a page. Popular pages. Ratings and reviews of metamodel documentation pages. Highest ranked pages. Model &amp; views: Size - number of model resources, model elements, features (attributes and references), repositories, branches. For views - number of views, number of view elements, average view element to model element cardinality - in how many views a model element appears. This metric can be collected at a model element level - &ldquo;most popular elements&rdquo;. Number of mapped diagram elements vs. the total number of diagram elements. Utilization: Web analytics for model documentation pages. Ratings and reviews of model documentation pages. Metrics can be rolled-up along containment hierarchies or ownership hierarchies. Such hierarchies can also be used to build visualizations such as heat maps. Conclusion With NASDAF you start small - download the demo project, modify it your needs and add your diagrams and models. This project would become a seed crystal from which you will grow your architectural practice gradually expanding the three dimensions - Model &amp; Views, Metamodel &amp; Viewpoints, and Practice. See Model Repostory ? People don&rsquo;t want quarter-inch drill bits. They want quarter-inch holes. ? XYZ SOR Distributed Cache ABC Microservice Release 1 Release 2 Metamodel &amp; Viewpoints Practice Release 3 Model &amp; Views Capability Consumes Provides Building Block Customer Address Enterprise Metamodel Retail Customer Retail Metamodel US Address US Person US Metamodel US Retail Customer US Retail Metamodel"},"architecture/cloud/azure/compute/model/Disk.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Disk","action-uuid":"9354dfe6-49f8-442b-911b-ec2eb20a1851","title":"Disk","content":"org.nasdanika.architecture.cloud.azure.compute.Disk Azure managed disks are block-level storage volumes that are managed by Azure and used with Azure Virtual Machines. Managed disks are like a physical disk in an on-premises server but, virtualized. With managed disks, all you have to do is specify the disk size, the disk type, and provision the disk. Once you provision the disk, Azure handles the rest. Supertypes Resource Referrers Disk Type Virtual Machine Attribute summary Reference summary Attribute details size : EInt Disk size in gigabytes Type EInt Cardinality 0..1 Changeable true Derived false Reference details type : Disk Type Type Disk Type Cardinality 0..1 Changeable true Derived false   size : EInt Disk size in gigabytes Type EInt Cardinality 0..1 Changeable true Derived false Disk size in gigabytes Type EInt Cardinality 0..1 Changeable true Derived false type : Disk Type Type Disk Type Cardinality 0..1 Changeable true Derived false Type Disk Type Cardinality 0..1 Changeable true Derived false"},"html/models/app/model/PagePart.html":{"path":"HTML/Models/App/app/PagePart","action-uuid":"b1e0c0bc-01da-42b1-ad61-6128c9fd2700","title":"PagePart","content":"org.nasdanika.html.model.app.PagePart Base class for page parts. Supertypes BootstrapElement Subtypes ContentPanel Footer Header NavigationBar NavigationPanel Reference summary Reference details items : EObject* Navigation items. Type EObject Cardinality 0..* Changeable true Derived false  items : EObject* Navigation items. Type EObject Cardinality 0..* Changeable true Derived false Navigation items. Type EObject Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Table.html":{"path":"HTML/Models/Bootstrap/bootstrap/Table","action-uuid":"8044b382-9abc-467d-ba26-72bde48f8088","title":"Table","content":"org.nasdanika.html.model.bootstrap.Table Bootstrap table Supertypes TableRowContainer TableConfiguration Reference summary Reference details body : TableSection Table body. Type TableSection Cardinality 0..1 Changeable true Derived false footer : TableSection Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false header : TableHeader Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false  body : TableSection Table body. Type TableSection Cardinality 0..1 Changeable true Derived false footer : TableSection Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false header : TableHeader Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false Table body. Type TableSection Cardinality 0..1 Changeable true Derived false Table footer. Type TableSection Cardinality 0..1 Changeable true Derived false Table header. Type TableHeader Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/compute/model/VirtualMachine.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Virtual Machine","action-uuid":"ecd7ca71-003d-4d2d-93f6-8ed58ea71c99","title":"Virtual Machine","content":"org.nasdanika.architecture.cloud.azure.compute.VirtualMachine Azure Virtual Machines are image service instances that provide on-demand and scalable computing resources with usage-based pricing. More broadly, a virtual machine behaves like a server: It&rsquo;s a computer within a computer that provides the user the same experience they would have on the host operating system itself. In general, virtual machines are sandboxed from the rest of the system, meaning that the software inside a virtual machine can&rsquo;t escape or tamper with the underlying server itself. Each virtual machine provides its own virtual hardware including CPUs, memory, hard drives, network interfaces, and other devices. Supertypes Resource Subtypes Virtual Machine Scale Set Referrers Virtual Machine Image Virtual Machine Size Reference summary Reference details disks : Disk* Type Disk Cardinality 0..* Changeable true Derived false image : Virtual Machine Image Type Virtual Machine Image Cardinality 0..1 Changeable true Derived false Opposite virtualMachines networkInterfaces : NetworkInterface Type NetworkInterface Cardinality 0..1 Changeable true Derived false size : Virtual Machine Size Type Virtual Machine Size Cardinality 0..1 Changeable true Derived false Opposite virtualMachines  disks : Disk* Type Disk Cardinality 0..* Changeable true Derived false image : Virtual Machine Image Type Virtual Machine Image Cardinality 0..1 Changeable true Derived false Opposite virtualMachines networkInterfaces : NetworkInterface Type NetworkInterface Cardinality 0..1 Changeable true Derived false size : Virtual Machine Size Type Virtual Machine Size Cardinality 0..1 Changeable true Derived false Opposite virtualMachines Type Disk Cardinality 0..* Changeable true Derived false Type Virtual Machine Image Cardinality 0..1 Changeable true Derived false Opposite virtualMachines Type NetworkInterface Cardinality 0..1 Changeable true Derived false Type Virtual Machine Size Cardinality 0..1 Changeable true Derived false Opposite virtualMachines"},"architecture/cloud/azure/core/model/ManagementGroupElement.html":{"path":"Architecture/Cloud/Azure/Core/core/ManagementGroupElement","action-uuid":"b64454f1-3957-412e-934a-35c42731c334","title":"ManagementGroupElement","content":"org.nasdanika.architecture.cloud.azure.core.ManagementGroupElement Supertypes AzureElement Subtypes Management Group Subscription Referrers Management Group"},"architecture/core/model/Event.html":{"path":"Architecture/Core/core/Event","action-uuid":"24bf9cf3-fa4d-4c4d-921e-c5e3503b1227","title":"Event","content":"org.nasdanika.architecture.core.Event A named document temporal with ID. Supertypes Temporal ModelElement Referrers ArchitectureElement"},"html/models/bootstrap/model/Tag.html":{"path":"HTML/Models/Bootstrap/bootstrap/Tag","action-uuid":"6c6cf17b-9d77-4490-a52a-c6cfbdce048c","title":"Tag","content":"org.nasdanika.html.model.bootstrap.Tag HTML tag with Bootstrap appearance Supertypes Tag BootstrapElement Subtypes Div"},"core/ncore/model/Adaptable.html":{"path":"Core/Ncore/ncore/Adaptable","action-uuid":"d1b3c82f-001b-4993-9b2c-6ebaddec3122","title":"Adaptable","content":"org.nasdanika.common.Adaptable Subtypes ModelElement"},"architecture/cloud/azure/storage/model/StorageAccount.html":{"path":"Architecture/Cloud/Azure/Storage/storage/StorageAccount","action-uuid":"9545a258-793a-403f-ac6d-893790465fbe","title":"StorageAccount","content":"org.nasdanika.architecture.cloud.azure.storage.StorageAccount"},"architecture/cloud/azure/networking/model/VirtualNetwork.html":{"path":"Architecture/Cloud/Azure/Networking/networking/VirtualNetwork","action-uuid":"50066267-8507-455e-8f52-659d60bd0d79","title":"VirtualNetwork","content":"org.nasdanika.architecture.cloud.azure.networking.VirtualNetwork Supertypes Resource Referrers VirtualNetworkResource Reference summary Reference details resources : VirtualNetworkResource* Resources connected to this Virtual Network. Computed opposite to VirtualNetworkResource.virtualNetwork Type VirtualNetworkResource Cardinality 0..* Changeable false Derived true Opposite virtualNetwork subnets : Subnet* Type Subnet Cardinality 0..* Changeable true Derived false Key id  resources : VirtualNetworkResource* Resources connected to this Virtual Network. Computed opposite to VirtualNetworkResource.virtualNetwork Type VirtualNetworkResource Cardinality 0..* Changeable false Derived true Opposite virtualNetwork subnets : Subnet* Type Subnet Cardinality 0..* Changeable true Derived false Key id Resources connected to this Virtual Network. Computed opposite to VirtualNetworkResource.virtualNetwork Type VirtualNetworkResource Cardinality 0..* Changeable false Derived true Opposite virtualNetwork Type Subnet Cardinality 0..* Changeable true Derived false Key id"},"core/ncore/model/ModelElement.html":{"path":"Core/Ncore/ncore/ModelElement","action-uuid":"cbb26b42-3d2c-4c76-916d-0927e99a41bf","title":"ModelElement","content":"org.nasdanika.ncore.ModelElement Base class for many Nasdanika model classes. Supertypes Marked Adaptable Subtypes Block Call Configurator Eval Fail Filter HtmlElement Item List Map NamedElement Page Period Resource Resource ScriptReference StylesheetReference Temporal Text Attribute summary Reference summary Attribute details description : EString Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false uris : EString* Element URI&rsquo;s - there might be more than one. See NcoreUtil.getUris() for more details. URI&rsquo;s can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..* Changeable true Derived false uuid : EString Optional unique identifier for this model element. For root objects UUID is used to compute URI, if the URI is not set. Type EString Cardinality 0..1 Changeable true Derived false Reference details actionPrototype : EObject If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false annotations : Property* Annotations are used to store custom data similar to Java and Ecore annotations. Type Property Cardinality 0..* Changeable true Derived false Key name representations : RepresentationEntry* Mapping of representation keys to URI&rsquo;s of representation resources. URI&rsquo;s are resolved relative to the model element resource URI. During object loading resources are loaded and linked to the object. Additional processing depends on the resource type. In case of Drawio diagrams, diagram elements are semantically mapped to model elements and representation resource root elements are added as children to the object. See Nasdanika Core Drawio and Nasdanika Core EMF documentation for more information. Type RepresentationEntry Cardinality 0..* Changeable true Derived false   description : EString Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false uris : EString* Element URI&rsquo;s - there might be more than one. See NcoreUtil.getUris() for more details. URI&rsquo;s can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..* Changeable true Derived false uuid : EString Optional unique identifier for this model element. For root objects UUID is used to compute URI, if the URI is not set. Type EString Cardinality 0..1 Changeable true Derived false Description in HTML. Type EString Cardinality 0..1 Changeable true Derived false Element URI&rsquo;s - there might be more than one. See NcoreUtil.getUris() for more details. URI&rsquo;s can be used for cross-referencing of elements in a resource-independent fashion. Type EString Cardinality 0..* Changeable true Derived false Optional unique identifier for this model element. For root objects UUID is used to compute URI, if the URI is not set. Type EString Cardinality 0..1 Changeable true Derived false actionPrototype : EObject If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false annotations : Property* Annotations are used to store custom data similar to Java and Ecore annotations. Type Property Cardinality 0..* Changeable true Derived false Key name representations : RepresentationEntry* Mapping of representation keys to URI&rsquo;s of representation resources. URI&rsquo;s are resolved relative to the model element resource URI. During object loading resources are loaded and linked to the object. Additional processing depends on the resource type. In case of Drawio diagrams, diagram elements are semantically mapped to model elements and representation resource root elements are added as children to the object. See Nasdanika Core Drawio and Nasdanika Core EMF documentation for more information. Type RepresentationEntry Cardinality 0..* Changeable true Derived false If this reference is not set then EObjectActionProvider creates a new Action using AppFactory in newAction() method. If this reference is set and is Action then a copy of the action is created and returned. Otherwise the reference value it is adapted to ActionProvider which is used to create an action. This allows to merge actions and chain action generation. E.g. generate Ecore model documentation and merge it into the Engineering documentation. Type EObject Cardinality 0..1 Changeable true Derived false Annotations are used to store custom data similar to Java and Ecore annotations. Type Property Cardinality 0..* Changeable true Derived false Key name Mapping of representation keys to URI&rsquo;s of representation resources. URI&rsquo;s are resolved relative to the model element resource URI. During object loading resources are loaded and linked to the object. Additional processing depends on the resource type. In case of Drawio diagrams, diagram elements are semantically mapped to model elements and representation resource root elements are added as children to the object. See Nasdanika Core Drawio and Nasdanika Core EMF documentation for more information. Type RepresentationEntry Cardinality 0..* Changeable true Derived false"},"core/exec/model/Map.html":{"path":"Core/Exec/exec/Map","action-uuid":"4a0980ea-cc19-47cd-a1d9-94dca1e2fd3a","title":"Map","content":"org.nasdanika.exec.Map A collection of properties with keys and values. Examples Flat exec-map:\n  entries:\n    greeting: \n      content-text: Hello\n    addressee: \n      content-text: World    \n Nested exec-map:\n  entries:\n    greeting: \n      content-text: And here's to you\n    addressee:\n      exec-map:\n        entries:\n          salutation: \n            content-text: Mrs.\n          name:\n            content-text: Robinson  \n Supertypes ModelElement Reference summary Reference details entries : Property* Map entries. Type Property Cardinality 0..* Changeable true Derived false  entries : Property* Map entries. Type Property Cardinality 0..* Changeable true Derived false Map entries. Type Property Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/ButtonToolbar.html":{"path":"HTML/Models/Bootstrap/bootstrap/ButtonToolbar","action-uuid":"aec676db-3bba-4c1b-aae2-d4aacdaa6e81","title":"ButtonToolbar","content":"org.nasdanika.html.model.bootstrap.ButtonToolbar"},"architecture/c4/model/Module.html":{"path":"Architecture/C4 Model/c4/Module","action-uuid":"f01b9aef-050f-4efc-917f-71a571b46f65","title":"Module","content":"org.nasdanika.architecture.c4.Module Module is an implementation unit. E.g. a Java jar file/module. Supertypes Node TechnologyConsumer Subtypes Component Referrers Module Reference summary Reference details codeElements : CodeElement* A component/module contains code elements. Type CodeElement Cardinality 0..* Changeable true Derived false modules : Module* Modules can be nested. E.g. a Maven module may contain sub-modules. A Java package may be considered a module. Type Module Cardinality 0..* Changeable true Derived false  codeElements : CodeElement* A component/module contains code elements. Type CodeElement Cardinality 0..* Changeable true Derived false modules : Module* Modules can be nested. E.g. a Maven module may contain sub-modules. A Java package may be considered a module. Type Module Cardinality 0..* Changeable true Derived false A component/module contains code elements. Type CodeElement Cardinality 0..* Changeable true Derived false Modules can be nested. E.g. a Maven module may contain sub-modules. A Java package may be considered a module. Type Module Cardinality 0..* Changeable true Derived false"},"core/ncore/model/List.html":{"path":"Core/Ncore/ncore/List","action-uuid":"d9a0389b-1021-4554-bfb8-f3d37b59b92d","title":"List","content":"org.nasdanika.ncore.List A list of objects. Subtypes ListProperty Reference summary Reference details value : EObject* List elements. Type EObject Cardinality 0..* Changeable true Derived false  value : EObject* List elements. Type EObject Cardinality 0..* Changeable true Derived false List elements. Type EObject Cardinality 0..* Changeable true Derived false"},"architecture/core/model/Concern.html":{"path":"Architecture/Core/core/Concern","action-uuid":"4a531d05-d6ba-43e9-ad9a-5999fe7c6bf8","title":"Concern","content":"org.nasdanika.architecture.core.Concern An interest in a system relevant to one or more of its stakeholders. Supertypes ModelElement Referrers Stakeholder Viewpoint Reference summary Reference details stakeholders : Stakeholder* Stakeholders to whom this concerns is relevant. A computed opposite to Stakeholder.concerns Type Stakeholder Cardinality 0..* Changeable false Derived true Opposite concerns viewpoints : Viewpoint* Viewpoints framing this concern. A computed opposite to Viewpoint.concerns Type Viewpoint Cardinality 0..* Changeable false Derived true  stakeholders : Stakeholder* Stakeholders to whom this concerns is relevant. A computed opposite to Stakeholder.concerns Type Stakeholder Cardinality 0..* Changeable false Derived true Opposite concerns viewpoints : Viewpoint* Viewpoints framing this concern. A computed opposite to Viewpoint.concerns Type Viewpoint Cardinality 0..* Changeable false Derived true Stakeholders to whom this concerns is relevant. A computed opposite to Stakeholder.concerns Type Stakeholder Cardinality 0..* Changeable false Derived true Opposite concerns Viewpoints framing this concern. A computed opposite to Viewpoint.concerns Type Viewpoint Cardinality 0..* Changeable false Derived true"},"html/models/html/model/Page.html":{"path":"HTML/Models/HTML/html/Page","action-uuid":"96cf162d-3f4e-48eb-aa32-49787f785a72","title":"Page","content":"org.nasdanika.html.model.html.Page HTML page. The name attribute is output as title tag in the head. Overview video - in Russian. Supertypes ModelElement Subtypes Page Attribute summary Reference summary Attribute details language : EString Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false name : EString Type EString Cardinality 0..1 Changeable true Derived false scripts : EString* Script URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false stylesheets : EString* Stylesheet URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false Reference details body : EObject* Body content. Type EObject Cardinality 0..* Changeable true Derived false builders : EObject* Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false head : EObject* Head content. Type EObject Cardinality 0..* Changeable true Derived false   language : EString Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false name : EString Type EString Cardinality 0..1 Changeable true Derived false scripts : EString* Script URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false stylesheets : EString* Stylesheet URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false Page language - lang attribute. Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false Script URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false Stylesheet URL&rsquo;s Type EString Cardinality 0..* Changeable true Derived false body : EObject* Body content. Type EObject Cardinality 0..* Changeable true Derived false builders : EObject* Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false head : EObject* Head content. Type EObject Cardinality 0..* Changeable true Derived false Body content. Type EObject Cardinality 0..* Changeable true Derived false Builders operate on an instance of org.nasdanika.html.HTMLPage created by the the page element. Builders shall be adaptable to org.nasdanika.common.Consumer. Type EObject Cardinality 0..* Changeable true Derived false Head content. Type EObject Cardinality 0..* Changeable true Derived false"},"core/ncore/model/Map.html":{"path":"Core/Ncore/ncore/Map","action-uuid":"3130e646-ce12-40d6-864d-99c2866242fd","title":"Map","content":"org.nasdanika.ncore.Map A set of key-value pairs. Subtypes MapProperty Reference summary Reference details value : Property* Map entries Type Property Cardinality 0..* Changeable true Derived false Key name  value : Property* Map entries Type Property Cardinality 0..* Changeable true Derived false Key name Map entries Type Property Cardinality 0..* Changeable true Derived false Key name"},"architecture/cloud/azure/core/model/Region.html":{"path":"Architecture/Cloud/Azure/Core/core/Region","action-uuid":"2c07ed59-26a1-44ea-bd52-c76a1e103ef5","title":"Region","content":"org.nasdanika.architecture.cloud.azure.core.Region An Azure region is a set of datacenters, deployed within a latency-defined perimeter and connected through a dedicated regional low-latency network. With more global regions than any other cloud provider, Azure gives customers the flexibility to deploy applications where they need. An Azure region has discrete pricing and service availability. See Azure Global Infrastructure for more details. Supertypes Location Reference summary Reference details availabilityZones : Availability Zone* Type Availability Zone Cardinality 0..* Changeable true Derived false Key id  availabilityZones : Availability Zone* Type Availability Zone Cardinality 0..* Changeable true Derived false Key id Type Availability Zone Cardinality 0..* Changeable true Derived false Key id"},"core/ncore/model/EObjectProperty.html":{"path":"Core/Ncore/ncore/EObjectProperty","action-uuid":"aa5a64cb-de33-45c1-bb36-aaf6e6345ae6","title":"EObjectProperty","content":"org.nasdanika.ncore.EObjectProperty A named/keyed object. Supertypes Property Reference summary Reference details value : EObject Property value. Type EObject Cardinality 1 Changeable true Derived false  value : EObject Property value. Type EObject Cardinality 1 Changeable true Derived false Property value. Type EObject Cardinality 1 Changeable true Derived false"},"architecture/cloud/azure/compute/model/VirtualMachineImage.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Virtual Machine Image","action-uuid":"a0cc277e-06df-46b4-bafd-c67c10b779ff","title":"Virtual Machine Image","content":"org.nasdanika.architecture.cloud.azure.compute.VirtualMachineImage A VM image is an executable image file for a Virtual Machine. Supertypes AzureElement Referrers Virtual Machine Reference summary Reference details virtualMachines : Virtual Machine* Computed opposite to VirtualMachine.image Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite image  virtualMachines : Virtual Machine* Computed opposite to VirtualMachine.image Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite image Computed opposite to VirtualMachine.image Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite image"},"html/models/html/model/Script.html":{"path":"HTML/Models/HTML/html/Script","action-uuid":"950dcc9e-a076-4d7c-acbf-9d8c609dee5c","title":"Script","content":"org.nasdanika.html.model.html.Script Script with code stored in the model element source reference. Supertypes Filter"},"core/exec/model/content/Markdown.html":{"path":"Core/Exec/exec/content/Markdown","action-uuid":"cf03321d-69f9-4e1a-81d1-b994a55fc752","title":"Markdown","content":"org.nasdanika.exec.content.Markdown Markdown is a filter which renders Markdown to HTML. It optionally styles it by enclosing into a &lt;div class=&quot;markdown-body&quot;&gt; recognized by github-markdown-css. The filter also processes markdown which allows to embed diagrams using fenced code blocks. Markdown source can be defined in the YAML definition or loaded from an external resource. Inline Markdown Single line Multi-line Markdown loaded from resource Embedded images PNG resource JPEG resource PNG JPEG Embedded diagrams Draw.io PlantUML Loading from a resource Inline UML Sequence Component Wireframe Gantt Mind Map WBS Mermaid Loading from a resource Extensions Inline Markdown Single line content-markdown:\n  style: true\n  source:\n    content-text: Hello, *World*!\n Multi-line content-markdown:\n  style: true\n  source:\n    content-text: |+2\n      Hello, ``Universe``!\n Markdown loaded from resource content-markdown:\n  style: true\n  source:\n    content-resource: features/execution-model.md  \n Embedded images Markdown filter allows to embed PNG and JPEG using fenced blocks. PNG resource ```png-resource\nnasdanika-logo.png\n```\n Resource location is resolved relative to the model resource containing filter definition. If the filter model element has a marker, e.g. it was loaded from YAML, then the resource location is resolved to the location of that YAML file even if the model was saved to, say, XML after that. JPEG resource ```jpeg-resource\nmy.jpeg\n```\n PNG ```png\nBase 64 encoded png \n```\n JPEG ```jpeg\nBase 64 encoded jpeg\n```\n Embedded diagrams Markdown filter allows to embed PlantUML, Draw.io, and Mermaid diagrams using fenced blocks. Draw.io diagrams can be edited in a desktop editor or Online editor. Draw.io ```drawio-resource\naws.drawio\n```\n Resource location is resolved in the same way as for image files as explained above. PlantUML PlantUML diagrams can be defined inline or loaded from resources. Loading from a resource ```uml-resource\nsequence.plantuml\n```\n In the above snippet uml is a dialect supported by PlantUML (see below) and sequence.plantuml is a resource containing a diagram definition without @startuml and @enduml. Resource location is resolved in the same as for image files as explained above. hide footbox Alice -&gt; Bob: Authentication Request Bob --&gt; Alice: Authentication Response Inline The following language specifications (dialects) are supported: uml - for the following diagram types: Sequence, Use Case, Class, Activity, Component, State, Object, Deployment, Timing, Network. wireframe - for Wireframe diagrams gantt - for Gantt diagrams mindmap - for Mind Maps wbs - for Work Breakdown Structures UML Sequence Fenced block: ```uml\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n```\n Diagram: Alice -&gt; Bob: Authentication Request Bob --&gt; Alice: Authentication Response Component Component diagram with links to component pages. Fenced block: ```uml\npackage Core {\n   component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]]\n}\n\npackage HTML {\n   component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]]\n   [html] ..&gt; [Common]\n}\n```\n Diagram: package Core { component Common [[https://docs.nasdanika.org/modules/core/modules/common/index.html]] } package HTML { component HTML as html [[https://docs.nasdanika.org/modules/html/modules/html/index.html]] [html] ..&gt; [Common] } Wireframe Fenced block: ```wireframe\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  &quot;Enter text here   &quot;\n  ^This is a droplist^\n}\n```\n Diagram: { Just plain text [This is my button] () Unchecked radio (X) Checked radio [] Unchecked box [X] Checked box &quot;Enter text here &quot; ^This is a droplist^ } Gantt Fenced block: ```gantt\n[Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]]\n[Test prototype] lasts 10 days\n-- All example --\n[Task 1 (1 day)] lasts 1 day\n[T2 (5 days)] lasts 5 days\n[T3 (1 week)] lasts 1 week\n[T4 (1 week and 4 days)] lasts 1 week and 4 days\n[T5 (2 weeks)] lasts 2 weeks\n```\n Diagram: [Prototype design] lasts 15 days and links to [[https://docs.nasdanika.org/index.html]] [Test prototype] lasts 10 days -- All example -- [Task 1 (1 day)] lasts 1 day [T2 (5 days)] lasts 5 days [T3 (1 week)] lasts 1 week [T4 (1 week and 4 days)] lasts 1 week and 4 days [T5 (2 weeks)] lasts 2 weeks Mind Map Fenced block: ```mindmap\n* Debian\n** [[https://ubuntu.com/ Ubuntu]]\n*** Linux Mint\n*** Kubuntu\n*** Lubuntu\n*** KDE Neon\n** LMDE\n** SolydXK\n** SteamOS\n** Raspbian with a very long name\n*** &lt;s&gt;Raspmbc&lt;/s&gt; =&gt; OSMC\n*** &lt;s&gt;Raspyfi&lt;/s&gt; =&gt; Volumio\n```\n Diagram: * Debian ** [[https://ubuntu.com/ Ubuntu]] *** Linux Mint *** Kubuntu *** Lubuntu *** KDE Neon ** LMDE ** SolydXK ** SteamOS ** Raspbian with a very long name *** &lt;s&gt;Raspmbc&lt;/s&gt; =&gt; OSMC *** &lt;s&gt;Raspyfi&lt;/s&gt; =&gt; Volumio WBS WBS elements can have links. This type of diagram can also be used to display organization structure. ```wbs\n* [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]]\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n```\n Fenced block: Diagram: * [[https://docs.nasdanika.org/index.html Business Process Modelling WBS]] ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase Mermaid You can define Mermaid diagrams in mermaid fenced blocks: flowchart LR\n   Alice --&gt; Bob &amp; Chuck --&gt; Deb\n results in this diagram: flowchart LR Alice --&gt; Bob &amp; Chuck --&gt; Deb Loading from a resource It is also possible to load a diagram definition from a resource resolved relative to the model resource: ```mermaid-resource\nsequence.mermaid\n```\n Extensions Table of contents - add [TOC] to the document as explained in the documentation. This extension will create a table of contents from markdown headers. Footnotes Strikethrough: ~~strikethrough~~-&gt; strikethrough Subscript: H~2~O -&gt; H20 Superscript: 2^5^ = 32 -&gt; 25 = 32 Supertypes Filter Attribute summary Attribute details style : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false  style : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Shared Services Account Log Archive Account Security Account AWS Cloud purum Amazon S3 Bucket AWS CodePipeline AWS Organizations AWS Single Sign-on Account Baseline AWS Service Catalog AWS Parameter Store Core OU Account Baseline Amazon VPC Account Baseline Aggregate CloudTrail and Config Logs Account Baseline Security Cross-Account Roles Amazon GuardDuty Amazon SNS"},"core/common/features/execution-model/index.html":{"path":"Core/Common/Execution Model","action-uuid":"e5e23150-d35e-423d-a33e-e72cfe1ac72e","title":"Execution Model","content":"This page explains the Nasdanika execution model, which is used by a number of Nasdanika products and modules, e.g. Exec. The execution process consists of the following steps: Create a participant factory (&lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/ExecutionParticipantFactory.html'&gt;org.nasdanika.common.ExecutionParticipantFactory&lt;/a&gt;). Factories can be composed as explained in the subsequent sections. Create an instance of &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Context.html'&gt;org.nasdanika.common.Context&lt;/a&gt;. Pass the context to the factory create() method to create a participant. Create an instance of &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/ProgressMonitor.html'&gt;org.nasdanika.common.ProgressMonitor&lt;/a&gt;. Walk the participant through the lifecycle methods. All lifecycle methods except execute() have the same signature for all paricipant types. diagnose() - performs diagnostic of the participant configuration and returns org.nasdanika.common.Diagnostic. If the diagnostic status is ERROR further execution is aborted. Diagnose may prepare the participant for further execution by initializing internal structures, e.g. resolving URL&rsquo;s. However, this method shall not perform any modifications in resources which might have to be rolled back, e.g. it shall not create or delete files or database records. The default implementation returns status SUCCESS. execute() - Executes participant&rsquo;s logic. May modify resources, e.g. write to files, create database records. Different participant types have different signatures of this method. There is no default implementation for this method. commit() - Commits changes performed by execute() if all execution participants were executed successfully, i.e. without throwing an exception. The default implementation does nothing. rollback() - Rolls back changes performed by execute() if some other participant executed after this one has thrown an exception. Returns boolean value indicating whether rollback was successful or not. The default implementation does nothing and returns true. close() - Releases any resources used during execution. E.g. closes database connections, shuts down executor pulls. Overrides close() in java.lang.AutoCloseable so participants can be used in try-with-resources. The default implementation does nothing. Execution participant types &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Supplier.html'&gt;org.nasdanika.common.Supplier&lt;/a&gt;&lt;T&gt; - T execute(ProgressMonitor) - returns value. &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Function.html'&gt;org.nasdanika.common.Function&lt;/a&gt;&lt;T,R&gt; - R execute(T,ProgressMonitor) - takes an argument and returns value. &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Consumer.html'&gt;org.nasdanika.common.Consumer&lt;/a&gt;&lt;T&gt; - void execute(T,ProgressMonitor) - takes an argument, does not return value. &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Command.html'&gt;org.nasdanika.common.Command&lt;/a&gt; - void execute(ProgressMonitor) Composition Execution participants can be composed using subclasses of &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/CompoundExecutionParticipant.html'&gt;org.nasdanika.common.CompoundExecutionParticipant&lt;/a&gt;. Result producing participants - suppliers and functions - can be composed as lists or maps. Consumers can be composed as list and maps. Commands are always composed as lists. Chaining Result producing participants (supplier and function) and their factories have then method which takes value-consuming participant (function or consumer) and returns a participant (or a factory for such a participant) which executes the first participant, takes the returned value and passes it to the second participant. The participants can be chained as follows: Supplier&lt;T&gt;.then(Function&lt;? super T,R&gt;) -&gt; Supplier&lt;R&gt; Supplier&lt;T&gt;.then(Consumer&lt;? super T&gt;) -&gt; Command Function&lt;T,R&gt;.then(Function&lt;? super R,V&gt;) -&gt; Function&lt;T,V&gt; Function&lt;T,R&gt;.then(Consumer&lt;? super R&gt;) -&gt; Consumer&lt;T&gt; asFunction Suppler and Consumer have asFunction methods and their factories have asFunctionFactory methods to allow chaining of supplier and consumer execution. For suppliers asFunction method returns org.nasdanika.common.BiSupplier with the function argument available via getFirst() method and the supplier result via getSecond(). For consumers asFunction creates a pass-through function which executes the consumer and then returns its argument. Contextification Contextification is a form of chaining of execution participant factories where the first factory is a SupplierFactory&lt;Context&gt;. Context returned by the first factory&rsquo;s supplier is passed to the execution participant created by the second factory. Contextification is done using contextify() method of execution participant factories. Bridging to java.util.function Execution participants have static fromXXX methods for constructing from objects implementing java.util.function interfaces, e.g. &lt;a href='https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Function.html'&gt;java.util.function.Function&lt;/a&gt;. Utility methods &lt;a href='https://docs.nasdanika.org/core/apidocs/org.nasdanika.common/org/nasdanika/common/Util.html'&gt;org.nasdanika.common.Util&lt;/a&gt; class contains methods for walking execution participants through their lifecycle (call methods) as well as helper execution participant factories. Client code Client code shall walk the top-level execution participant through the lifecycle methods. Composition and chaining classes methods take care of invoking lifecycle methods of their constituents. The below code snippet shows how to call Supplier: Context context = ...;\t\t\nSupplierFactory&lt;InputStream&gt; supplierFactory = ...;\nProgressMonitor monitor = ...;\n\ntry (Supplier&lt;InputStream&gt; supplier = supplierFactory.create(context); ProgressMonitor progressMonitor = monitor.split(&quot;Calling &quot; + supplier.name(), 3 * supplier.size())) {\n\tDiagnostic diagnostic = supplier.splitAndDiagnose(progressMonitor);\n\tif (diagnostic.getStatus() == Status.ERROR) {\n\t\t// Handle diagnostic error - dump to console or log, throw an exception or return error code or status.\n\t\tdiagnostic.dump(System.err, 4);\n\t\t// Calling JUnit.fail() here\n\t\tfail(&quot;Supplier diagnostic failed: &quot; + diagnostic.getMessage());\n\t}\n\t\t\t\n\ttry {\n\t\tInputStream result = supplier.splitAndExecute(progressMonitor);\n\t\t// process result here\n\t\t...\n\t\tsupplier.splitAndCommit(progressMonitor);\t\t\t\t\t\t\n\t} catch (Exception e) {\n\t\t// Rollback and handle exception. \n\t\t// In some cases diagnostic exception may be thrown during execution.\n\t\tif (e instanceof DiagnosticException) {\n\t\t\t((DiagnosticException) e).getDiagnostic().dump(System.err, 4);\n\t\t}\n\t\tif (supplier.splitAndRollback(progressMonitor)) {\n\t\t\tfail(&quot;Exception &quot; + e + &quot;, rollback successful&quot;);\n\t\t} else {\n\t\t\t// Automated cleanup failed - perhaps notify somebody/something to performs manual/external cleanup\n\t\t\tfail(&quot;Exception &quot; + e + &quot;, rollback failed&quot;);\t\t\t\t\t\t\n\t\t}\n\t}\n}"},"core/ncore/model/Period.html":{"path":"Core/Ncore/ncore/Period","action-uuid":"b2105c67-c566-4c16-aad2-d1b42bd3e922","title":"Period","content":"org.nasdanika.ncore.Period Amount of time between two time points. Can be defined as start and duration or as start and end or as end and duration. When two attributes are specified the third is derived from them. Supertypes ModelElement Subtypes ArchitectureElement Attribute summary Reference summary Attribute details duration : Duration Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false Reference details end : Temporal Period end. Type Temporal Cardinality 0..1 Changeable true Derived false start : Temporal Period start. Type Temporal Cardinality 0..1 Changeable true Derived false   duration : Duration Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false Positive period duration in ISO-8601 durations format. E.g. P1M for one month or P20D for 20 days. Type Duration Cardinality 0..1 Changeable true Derived false end : Temporal Period end. Type Temporal Cardinality 0..1 Changeable true Derived false start : Temporal Period start. Type Temporal Cardinality 0..1 Changeable true Derived false Period end. Type Temporal Cardinality 0..1 Changeable true Derived false Period start. Type Temporal Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/core/model/ManagementGroup.html":{"path":"Architecture/Cloud/Azure/Core/core/Management Group","action-uuid":"7db4fbad-bee6-4bd1-883b-884aa55821db","title":"Management Group","content":"org.nasdanika.architecture.cloud.azure.core.ManagementGroup Management Group is a container of Subscriptions and other management groups which allows to organize resources into a hierarchy. Management groups help manage access, policy, and compliance across multiple subscriptions. Supertypes ManagementGroupElement Reference summary Reference details elements : ManagementGroupElement* Type ManagementGroupElement Cardinality 0..* Changeable true Derived false Key id  elements : ManagementGroupElement* Type ManagementGroupElement Cardinality 0..* Changeable true Derived false Key id Type ManagementGroupElement Cardinality 0..* Changeable true Derived false Key id"},"architecture/core/model/Facet.html":{"path":"Architecture/Core/core/Facet","action-uuid":"a8f57398-932d-423a-8319-81b3a5dfa213","title":"Facet","content":"org.nasdanika.architecture.core.Facet A marker interface for classes which can be used as architecture element facets Referrers ArchitectureElement"},"html/models/bootstrap/model/Item.html":{"path":"HTML/Models/Bootstrap/bootstrap/Item","action-uuid":"ce07ebee-9589-4f7a-a98c-1a344320bb14","title":"Item","content":"org.nasdanika.html.model.bootstrap.Item Base class for model elements which can be active, disabled, and have color. Supertypes ModelElement Subtypes ActionGroupItem Label Attribute summary Attribute details active : EBoolean Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false disabled : EBoolean Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false  active : EBoolean Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false disabled : EBoolean Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false Indicates that the item is active (currently selected). Type EBoolean Cardinality 0..1 Changeable true Derived false Item Bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false Indicates that the item is disabled and cannot be activated/selected. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"core/exec/model/resources/package-summary.html":{"path":"Core/Exec/exec/resources","action-uuid":"eae7afd4-2116-440b-b607-2bda93f00731","title":"resources","content":"urn:org.nasdanika.exec.resources Resource classes are adapted to org.nasdanika.common.ConsumerFactory&lt;org.nasdanika.common.resources.BinaryEntityContainer&gt; to create binary entities (org.nasdanika.common.resources.BinaryEntity) such as files, directories, or zip file entries."},"architecture/core/model/Stakeholder.html":{"path":"Architecture/Core/core/Stakeholder","action-uuid":"c9b4c7b3-05b3-4afd-92ad-e757e497edf1","title":"Stakeholder","content":"org.nasdanika.architecture.core.Stakeholder A party (individual, team, organization, or class thereof) having an interest in a system Supertypes ModelElement Referrers Concern Reference summary Reference details concerns : Concern* Stakeholder&rsquo;s concerns Type Concern Cardinality 0..* Changeable true Derived false Opposite stakeholders Key id  concerns : Concern* Stakeholder&rsquo;s concerns Type Concern Cardinality 0..* Changeable true Derived false Opposite stakeholders Key id Stakeholder&rsquo;s concerns Type Concern Cardinality 0..* Changeable true Derived false Opposite stakeholders Key id"},"html/models/bootstrap/model/ActionGroup.html":{"path":"HTML/Models/Bootstrap/bootstrap/ActionGroup","action-uuid":"07e5a42b-eaaf-4489-8ccc-649d8fd3362a","title":"ActionGroup","content":"org.nasdanika.html.model.bootstrap.ActionGroup List group with actions (links). Supertypes Div Attribute summary Reference summary Attribute details flush : EBoolean Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false Reference details items : ActionGroupItem* Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false   flush : EBoolean Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false Removes borders to render action group items edge-to-edge in a parent container. Type EBoolean Cardinality 0..1 Changeable true Derived false items : ActionGroupItem* Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false Group items. Type ActionGroupItem Cardinality 0..* Changeable true Derived false"},"architecture/cloud/azure/compute/model/ContainerInstance.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Container Instance","action-uuid":"91514adb-cd50-40b8-b874-6ac084c0d2ef","title":"Container Instance","content":"org.nasdanika.architecture.cloud.azure.compute.ContainerInstance Azure Container Instances is a solution for any scenario that can operate in isolated containers, without orchestration. Run event-driven applications, quickly deploy from your container development pipelines, and run data processing and build jobs. Supertypes SubnetResource Container"},"html/models/app/model/SectionStyle.html":{"path":"HTML/Models/App/app/SectionStyle","action-uuid":"bfd7324b-805e-4264-937e-4d2e4206bb2f","title":"SectionStyle","content":"org.nasdanika.html.model.app.SectionStyle Literals Auto ActionGroup Card CardPill CardTab Header Pill Tab Table Uses Action ContentPanel Auto ActionGroup Card CardPill CardTab Header Pill Tab Table          Action ContentPanel"},"core/ncore/model/GitMarker.html":{"path":"Core/Ncore/ncore/GitMarker","action-uuid":"2053ba77-4e53-4cf9-9dcc-e37ada6fc593","title":"GitMarker","content":"org.nasdanika.ncore.GitMarker Marker with Git information such as a map of remotes. Supertypes Marker Attribute summary Reference summary Attribute details branch : EString Short branch name Type EString Cardinality 0..1 Changeable true Derived false head : EString Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false headRefs : EString* Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false path : EString Path in the repository Type EString Cardinality 0..1 Changeable true Derived false Reference details remotes : StringEntry* A map of remote names to url&rsquo;s. Type StringEntry Cardinality 0..* Changeable true Derived false   branch : EString Short branch name Type EString Cardinality 0..1 Changeable true Derived false head : EString Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false headRefs : EString* Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false path : EString Path in the repository Type EString Cardinality 0..1 Changeable true Derived false Short branch name Type EString Cardinality 0..1 Changeable true Derived false Commit ID of the head Type EString Cardinality 0..1 Changeable true Derived false Refs on the head commit excluding the head itself. E.g. branch, tags. Type EString Cardinality 0..* Changeable true Derived false Path in the repository Type EString Cardinality 0..1 Changeable true Derived false remotes : StringEntry* A map of remote names to url&rsquo;s. Type StringEntry Cardinality 0..* Changeable true Derived false A map of remote names to url&rsquo;s. Type StringEntry Cardinality 0..* Changeable true Derived false"},"core/ncore/model/BooleanProperty.html":{"path":"Core/Ncore/ncore/BooleanProperty","action-uuid":"b8c55553-21a2-46ea-b459-ad9272949168","title":"BooleanProperty","content":"org.nasdanika.ncore.BooleanProperty A named/keyed boolean. Supertypes Property Boolean"},"core/ncore/model/Instant.html":{"path":"Core/Ncore/ncore/Instant","action-uuid":"ac6b4863-c5e5-44d3-8496-001f10b58169","title":"Instant","content":"java.time.Instant Instant is a single instantaneous point on the time-line. If instant specification contains Z, then it is parsed using Instant.parse() method. Otherwise the specification is used to construct java.util.Date which is then converted to instant. Examples: 2021-12-03T10:15:30.00Z - loaded using Instant.parse() 10/1/2021 - loaded using new Date() and then converted to instant. Uses Temporal"},"html/models/bootstrap/model/Slide.html":{"path":"HTML/Models/Bootstrap/bootstrap/Slide","action-uuid":"d8e97247-9931-4a81-8595-c78f4dc6972a","title":"Slide","content":"org.nasdanika.html.model.bootstrap.Slide Supertypes Div Referrers Carousel Attribute summary Reference summary Attribute details interval : EIntegerObject Type EIntegerObject Cardinality 0..1 Changeable true Derived false Reference details captions : EObject* Type EObject Cardinality 0..* Changeable true Derived false   interval : EIntegerObject Type EIntegerObject Cardinality 0..1 Changeable true Derived false Type EIntegerObject Cardinality 0..1 Changeable true Derived false captions : EObject* Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Accordion.html":{"path":"HTML/Models/Bootstrap/bootstrap/Accordion","action-uuid":"48dbbb62-54ef-4742-9915-ed2fcf959edc","title":"Accordion","content":"org.nasdanika.html.model.bootstrap.Accordion"},"html/models/bootstrap/model/Div.html":{"path":"HTML/Models/Bootstrap/bootstrap/Div","action-uuid":"6797f54f-bb10-4a97-8073-9965ad09cc54","title":"Div","content":"org.nasdanika.html.model.bootstrap.Div HTML DIV with bootstrap styling Supertypes Tag Subtypes ActionGroup Alert Badge Button Card Carousel Slide"},"architecture/cloud/azure/core/model/package-summary.html":{"path":"Architecture/Cloud/Azure/Core/core","action-uuid":"c05ebe12-9542-466c-9d90-b4437937e7b2","title":"core","content":"urn:org.nasdanika.architecture.cloud.azure.core Management Group Management groups are containers that help manage access, policy, and compliance across multiple subscriptions Subscrption A logical container used to provision related resources Resource Group A resource group is a container that holds related resources for an Azure solution Management Group Element Resource A resource is an entity managed by Azure Generic Resource A resource which does not have a model class. Generic resources have &quot;kind&quot; (type). Location A base class for Region and Availability Zone to associate with resource. Some resources may be deployed to multiple locations. Region A set of datacenters, deployed within a latency-defined perimeter and connected through a dedicated regional low-latency network Availability Zone One or more physically and logically separated datacenters with their own independent power source, network, and cooling."},"html/models/bootstrap/model/Button.html":{"path":"HTML/Models/Bootstrap/bootstrap/Button","action-uuid":"0e9f556a-7a36-467c-8f2d-44059ada9256","title":"Button","content":"org.nasdanika.html.model.bootstrap.Button TODO - size - enum? Block, active, disabled. Supertypes Div Attribute summary Attribute details color : Color Type Color Cardinality 0..1 Changeable true Derived false outline : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false  color : Color Type Color Cardinality 0..1 Changeable true Derived false outline : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false"},"index.html":{"action-uuid":"6baee5cd-27b1-4a4d-8135-d76b63ecb162","title":"Nasdanika","content":"Overview Core - foundational functionality (modules/core/modules/common/apidocs/index.html?org/nasdanika/common/Command.html) from a command line. Common - common functionality such as the execution model, resource and persistence frameworks. Model - Contains Diagram, DiagramElement, Node, Connection, &hellip; classes Generators - Generators from the model to different formats including PlantUML and Drawio Drawio - Java API for reading and writing Drawio files including base classes for loading of EMF models from Drawio diagrams EMF - classes for working with Ecore models, e.g. classes for loading models from YAML files. Exec - Ecore models and adapters to execution model participants to build code generators and to load model content from different sources. Model - Ecore model containing flow control, content, and resource classes Generators - Adapters to execution participants Graph - Java API for working with directed graphs, such as diagrams. Includes mapping of graph elements to Java methods and fields to make graphs excutable. Also includes a base class for loading EMF models from graphs. Ncore - Ecore model containing common classes used/extended in other models. Resources - An abstraction layer for working with resources - units of content organized into directories, e.g. files or zip file entries. Persistence - A persistence framework focusing on loading data from key/value formats such as YAML and JSON. HTML - Java API&rsquo;s and models for generating HTML Bootstrap - Fluent Java API to generate Bootstrap 4 markup. Ecore - Classes to generate documentation of Ecore models as action models (see Models/Application below). EMF - Base classes for building generators of action models from Ecore model elements. HTML - Fluent Java API to generate HTML 5 markup. JsTree - Java API for generating jsTree JSON. Models - Ecore models to build HTML pages and applications. HTML - Ecore model representing HTML elements and generation adapters. Model - Ecore model of HTML elements Generators - Generator adapters for the HTML model Bootstrap - Ecore model representing Bootstrap 4 elements and generation adapters. Model - Ecore model of Bootstrap elements Generators - Generator adapters for the Bootstrap model Application - Ecore model representing a web site/application as a hierarchy of actions. Adapters to generate HTML sites (resource models) from action models. Model - Ecore model of application elements Drawio - Semantic mapping of Drawio diagrams to the application model. Allows to generate HTML sites from diagrams. Generators - Generator adapters for the application model Demos App Drawio - Demonstrations of generation of HTML sites from Drawio diagrams Actions - Demonstrates generation of a documentation site from a Drawio diagram using Amazon AWS deployment diagram as an example Flow - Demonstrates generation of a documentation site from a flow/process Drawio diagram Map - Demonstrates generation of a documentation site from a (mind) map Drawio diagram TOGAF - Models representing TOGAF concepts. ADM - flow model of TOGAF Architecture Development Method Nasdanika products are Java-based, hosted on GitHub Nasdanika organization and published to Maven Central: Core HTML Common Common classes including the Nasdanika Execution Framework Drawio Java API for reading and writing Drawio files including base classes for loading of EMF models from Drawio diagrams EMF EMF-related functionality - adapters, classes for building CLI's for executable models, persistence including loading of models from Excel files Flow A model of process flows - activities performed by participants using resources Graph Java API for working with directed graphs, such as diagrams. Includes mapping of graph elements to Java methods and fields to make graphs excutable. Also includes a base class for loading EMF models from graphs. Ncore An Ecore model with shared model elements used in other models Persistence A persistence framework focusing on loading data from key/value formats such as YAML and JSON Resources An abstraction layer for working with resources - units of content organized into directories, e.g. files or zip file entries. Model Ecore model containing flow control, content, and resource classes Generators Adapters to execution participants Exec Ecore model of execution participants. Can be used for model-based code generation. Model Nasdanika foundational Ecore model containing classes used by classes in other models. Generators Adapters to execution participants Ncore Nasdanika foundation Ecore model and generators with classes used in other models. Core Core functionality HTML Bootstrap JsTree Model Ecore model of HTML elements Generators Generator adapters for the HTML model HTML Ecore model and adapters for HTML generation Model Ecore model of Bootstrap elements Generators Generator adapters for the Bootstrap model Bootstrap Ecore model and adapters for generation of Bootstrap markup Drawio Semantic mapping of Drawio diagrams to the application model. Allows to generate HTML sites from diagrams. Generators Generator adapters for the application model Model Ecore model of application elements App Ecore model of an application (a hierarchy of actions) and adapters for generation of HTML sites from the model Models Ecore models for generating HTML markup, pages, and sites/applications HTML Fluent Java API for generating HTML Bootstrap Fluent Java API for generation of Bootstrap markup JsTree Java API for generating JsTree definitions Flow Generation adapters for the flow model to generate Application model and then documentation sites Ecore Generates HTML documentation for Ecore models EMF Base classes for generating action models from Ecore models HTML Libraries for generating HTML - elements, pages, sites Map Demonstrates generation of a documentation site from a (mind) map Drawio diagram Flow Demonstrates generation of a documentation site from a flow/process Drawio diagram Actions Demonstrates generation of a documentation site from a Drawio diagram using Amazon AWS deployment diagram as an example App Drawio Demonstrations of generation of HTML sites from Drawio diagrams ADM A partial flow model of TOGAF ADM TOGAF Capturing of TOGAF concepts in models. Drawio Semantic Mapping Demonstrates generation of a documentation site from a Drawio diagram using semantic mapping to Ncore Composite Demos Showcases of applications of Nasdanika technologies docs.nasdanika.org This site - generated from a distributed Engineering model with Ecore model documentation mounted to it and JavaDoc linked Model Ecore model of engineering concepts Generators Adapters to generate Application model from Engineering model. Engineering Engineering model. Used to generate this site. Model Ecore (meta) model Generators Action builder adapters for model classes Demo Demo of semantic mapping to NASDAF metamodel Architecture Framework (NASDAF) Application of Nasdanika and a number of other open source technologies to architecture development"},"core/exec/model/content/Interpolator.html":{"path":"Core/Exec/exec/content/Interpolator","action-uuid":"433fae03-5e58-4284-aa43-16ea2cbbf1b1","title":"Interpolator","content":"org.nasdanika.exec.content.Interpolator Converts input stream to String using the context charset, which defaults to UTF-8, interpolates, and converts back to input stream using the context charset. Supertypes Filter Attribute summary Attribute details base : EString Optional base URL for resolving include and image URL&rsquo;s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false processIncludes : EBoolean If true (default) processes: ${embedded-image/&lt;image type&gt;/&lt;image url&gt;} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/&lt;resource url&gt;} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false  base : EString Optional base URL for resolving include and image URL&rsquo;s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false processIncludes : EBoolean If true (default) processes: ${embedded-image/&lt;image type&gt;/&lt;image url&gt;} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/&lt;resource url&gt;} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false Optional base URL for resolving include and image URL&rsquo;s. If the base is blank then marker location is used as the base, if marker is present and location is not null. Otherwise, resource URL is used as the base. Marker location is the URL of a YAML resource from which interpolator specification was loaded. It may be different from the resource URL if a model was loaded from YAML and then saved to XML. If the base is not blank then it is resolved relative to the marker location if it starts with ./ and marker location is not null or the resource base otherwise. Type EString Cardinality 0..1 Changeable true Derived false If true (default) processes: ${embedded-image/&lt;image type&gt;/&lt;image url&gt;} - reads image from the URL resolved relative to the base URL. Encodes as an embedded image. Example: ${embedded-image/png/logo.png}. ${include/&lt;resource url&gt;} - reads, interpolates, and includes resource at the resource URL resolved relative to the base URL. Example: ${include/report.html}. ${include-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates and includes. Example: ${include-markdown/report.md}. ${include-styled-markdown/&lt;resource url&gt;} - reads a resource at the resource URL resolved relative to the base URL. Renders Markdown to HTML. Interpolates, wraps into a DIV with markdown-body class, and includes. Example: ${include-styled-markdown/report.md}. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/Marker.html":{"path":"Core/Ncore/ncore/Marker","action-uuid":"80e2d729-0812-45d8-bd58-d0af2bcf1469","title":"Marker","content":"org.nasdanika.ncore.Marker Provides information about location for a model element definition - URI, line and column numbers. Supertypes IMarker Subtypes GitMarker Referrers Marked Attribute summary Attribute details comment : EString Optional marker comment providing additional information about the marker. E.g. for locations which do not support lines and colums it may provide position inside the resource identified by the location attribute, such as an XPath for XML documents or sheet name and a range for Excel documents. Type EString Cardinality 0..1 Changeable true Derived false location : EString URI of a resource. Type EString Cardinality 0..1 Changeable true Derived false position : EString Marker position withing the resource identified by location - line and column in text documents, sheet and range in Excel, &hellip; Type EString Cardinality 0..1 Changeable true Derived false  comment : EString Optional marker comment providing additional information about the marker. E.g. for locations which do not support lines and colums it may provide position inside the resource identified by the location attribute, such as an XPath for XML documents or sheet name and a range for Excel documents. Type EString Cardinality 0..1 Changeable true Derived false location : EString URI of a resource. Type EString Cardinality 0..1 Changeable true Derived false position : EString Marker position withing the resource identified by location - line and column in text documents, sheet and range in Excel, &hellip; Type EString Cardinality 0..1 Changeable true Derived false Optional marker comment providing additional information about the marker. E.g. for locations which do not support lines and colums it may provide position inside the resource identified by the location attribute, such as an XPath for XML documents or sheet name and a range for Excel documents. Type EString Cardinality 0..1 Changeable true Derived false URI of a resource. Type EString Cardinality 0..1 Changeable true Derived false Marker position withing the resource identified by location - line and column in text documents, sheet and range in Excel, &hellip; Type EString Cardinality 0..1 Changeable true Derived false"},"architecture/c4/model/Technology.html":{"path":"Architecture/C4 Model/c4/Technology","action-uuid":"701e6609-48f7-4e33-96b7-333a5b5075b5","title":"Technology","content":"org.nasdanika.architecture.c4.Technology A class representing some technology. E.g. a software product or its version. Supertypes ArchitectureElement Subtypes TechnologyProduct TechnologyVersion Referrers TechnologyConsumer Reference summary Reference details uses : TechnologyConsumer* Uses of this technology - computed opposite to TechnologyConsumer.technology Type TechnologyConsumer Cardinality 0..* Changeable false Derived true Opposite technology  uses : TechnologyConsumer* Uses of this technology - computed opposite to TechnologyConsumer.technology Type TechnologyConsumer Cardinality 0..* Changeable false Derived true Opposite technology Uses of this technology - computed opposite to TechnologyConsumer.technology Type TechnologyConsumer Cardinality 0..* Changeable false Derived true Opposite technology"},"core/exec/model/Call.html":{"path":"Core/Exec/exec/Call","action-uuid":"829f3704-807a-4b97-aa8c-3e9f13f9f763","title":"Call","content":"org.nasdanika.exec.Call Calls a Java method and returns the result. Currently can be used as content. Support of consumer and command will be implemented in the future releases. Can be configured with a String or a Map. In the first case the string is a fully qualified class name. The class is loaded and then is instantiated using the default constructor. See the &ldquo;Load specification&rdquo; for the second case. Constructor and method are selected by matching the number of parameters. The first matched method or constructor is selected for invocation and then an attempt is made to convert arguments to constructor/method types. Examples Default property Class implements Supplier. exec-call: org.nasdanika.exec.gen.tests.TestCall$CallSupplier\n Static method exec-call:\n  class: org.nasdanika.exec.gen.tests.TestCall$CallTarget\n  method: helloWorld\n Constructor and method arguments exec-call:\n  class: org.nasdanika.exec.gen.tests.TestCall$CallTarget\n  method: greet\n  init:\n    content-text: Galaxy\n  arguments:\n    content-text: Hello\n Supertypes ModelElement Attribute summary Reference summary Attribute details method : EString An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false property : EString Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false service : EString Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false type : EString Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false Reference details arguments : EObject* An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false init : EObject* An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false   method : EString An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false property : EString Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false service : EString Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false type : EString Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false An optional method to call. In the class case the method can be static. If the method is static the class is not instantiated and if init or properties are present it results in an exception. Type EString Cardinality 0..1 Changeable true Derived false Context property name. Mutually exclusive with class and service. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false Fully qualified context service class name. Mutually exclusive with class and property. One of class, property, or service is required. Type EString Cardinality 0..1 Changeable true Derived false Fully qualified class name. Mutually exclusive with service and property. One of class, property, or service is required. For SupplierFactory adapter, if the class implements SupplierFactory then it is instantiated and then its create() method is invoked to create a supplier. If the class implements Supplier, then it is instantiated. If there are no init arguments, then the supplier is diagnosed as part of diagnose(). Otherwise it is diagnosed in execute() and diagnostic results are discarded. Similar processing will be implemented for Consumer and Command. Type EString Cardinality 0..1 Changeable true Derived false arguments : EObject* An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false init : EObject* An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false An optional array of method arguments. If elements implement SupplierFactory, then the factory is used to produce argument value. Then arguments get converted to method parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false An optional array of constructor arguments for the class. Not applicable for property and service. If elements implement SupplierFactory then the factory is used to produce argument values. Then arguments get converted to constructor parameter types if conversion is available. If conversion is not available, an exception is thrown. Type EObject Cardinality 0..* Changeable true Derived false A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false"},"core/exec/model/Block.html":{"path":"Core/Exec/exec/Block","action-uuid":"7001d1d6-1eb1-451b-9ca1-b57f89c60e4c","title":"Block","content":"org.nasdanika.exec.Block Try-catch-finally block. Supported keys: try - required. A component or a list of components to execute. catch - optional. A component or a list of components to execute if the try component(s) execution fails. If not present and try fails the entire block fails, but finally still gets executed. Information about the exception which caused catch execution is available to the catch components via the following context properties: error - exception instance. error/type - fully qualified exception class name. error/message - exception message. finally - optional. A component or a list of components to always execute after try and catch. Components in all blocks shall be of the same type, or adaptable to the same type - resource, content, or command. In the case of content components output produced by the try, if it succeeds, or catch, if it is present and the try fails, is concatenated with the content produced by the finally, if it is present. If try block fails it gets rolled back. Example A block of content components. block:\n   try: \n      http: https://nasdanika.org/no-such-path\n   catch: Erroneous ${error}      \n   finally: World\n Supertypes ModelElement Reference summary Reference details catch : EObject* Type EObject Cardinality 0..* Changeable true Derived false finally : EObject* Type EObject Cardinality 0..* Changeable true Derived false try : EObject* Type EObject Cardinality 1..* Changeable true Derived false  catch : EObject* Type EObject Cardinality 0..* Changeable true Derived false finally : EObject* Type EObject Cardinality 0..* Changeable true Derived false try : EObject* Type EObject Cardinality 1..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 0..* Changeable true Derived false Type EObject Cardinality 1..* Changeable true Derived false"},"core/exec/model/resources/Resource.html":{"path":"Core/Exec/exec/resources/Resource","action-uuid":"0cfb3fd4-68fd-4206-8d30-c0cceb8b6282","title":"Resource","content":"org.nasdanika.exec.resources.Resource A base class of File and Container. Supertypes ModelElement Subtypes Container File Referrers Action Uses Container Attribute summary Reference summary Attribute details name : EString Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false reconcileAction : ReconcileAction Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false Reference details contents : EObject* Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false merger : EObject Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false   name : EString Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false reconcileAction : ReconcileAction Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false Resource name. Interpolated. Type EString Cardinality 1 Changeable true Derived false Reconcile action - what to do if a resource with the same name already exists. Defalut is Overwrite. Type ReconcileAction Cardinality 0..1 Changeable true Derived false contents : EObject* Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false merger : EObject Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false Resource contents. File contents elements are adapted to SupplierFactory and produced InputStreams are contcatenated. Container contents elements are adapted to ConsumerFactory and the container is passed to their execute method. Type EObject Cardinality 0..* Changeable true Derived false Merger for Merge reconcile action. Adapted to org.nasdanika.common.resources.Merger to execute actual merge. Type EObject Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/AppearanceEntry.html":{"path":"HTML/Models/Bootstrap/bootstrap/AppearanceEntry","action-uuid":"4e2128f4-7556-4a2d-b0c6-392433d72c9d","title":"AppearanceEntry","content":"java.util.Map.Entry Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.html.model.bootstrap\\model\\doc\\appearance-entry.md (The system cannot find the path specified) Referrers Appearance Attribute summary Reference summary Attribute details key : EString Type EString Cardinality 0..1 Changeable true Derived false Reference details value : Appearance Type Appearance Cardinality 1 Changeable true Derived false   key : EString Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false value : Appearance Type Appearance Cardinality 1 Changeable true Derived false Type Appearance Cardinality 1 Changeable true Derived false"},"core/drawio/index.html":{"path":"Core/Drawio","action-uuid":"33bb5727-9ed0-4c82-ac3d-16245d72ca5e","title":"Drawio","content":"Nasdanika Drawio module provides Java API for reading and manipulating Drawio diagrams. It is built on top of Graph. To use the module add the below dependency to your pom.xml: &lt;dependency&gt;\n\t&lt;groupId&gt;org.nasdanika.core&lt;/groupId&gt;\n\t&lt;artifactId&gt;drawio&lt;/artifactId&gt;\n\t&lt;version&gt;...&lt;/version&gt;\n&lt;/dependency&gt;\n See https://mvnrepository.com/artifact/org.nasdanika.core/drawio for the latest version. The module requires Java 11 or above. Overview Examples Creating a new document Loading Saving Layout Page linking Traversing EMF DrawioResource DrawioEObjectFactory Conifguration properties link-page Sorting Executable diagrams Applications Overview The module provides the following interfaces representing elements of a diagram file: org.nasdanika.drawio.Document - the root object of the API representing a file/resource which contains one or more pages. org.nasdanika.drawio.Page - a page containing a diagram (Model). org.nasdanika.drawio.Model - a diagram model containing diagram root. org.nasdanika.drawio.Root - the root of the model containing layers. org.nasdanika.drawio.Layer - a diagram may have one or more layers. Layers contain Nodes and Connections. org.nasdanika.drawio.Node - a node can be connected to other nodes with connections. A node may contain other nodes and connections. org.nasdanika.drawio.Connection - a connection between two nodes. The below diagram shows relationships between the above interfaces including their super-interfaces: org.nasdanika.drawio.Util provides utility methods such as layout() and methods to navigate and query documents and their elements. Examples Actions - Demo of generation of a web site from a drawio diagram Flow - Demo of generation of a web site from a flow drawio diagram Mind map - Demo of generation of a web site from a (mind) map drawio diagram Creating a new document To create a new document use Document.create(): Document document = Document.create(false, null);\nPage page = document.createPage();\npage.setName(&quot;My first new page&quot;);\n\t\t\nModel model = page.getModel();\nRoot root = model.getRoot();\nList&lt;Layer&gt; layers = root.getLayers();\n\t\t\n// Add layer\nLayer newLayer = root.createLayer();\nnewLayer.setLabel(&quot;My new layer&quot;);\n\t\t\t\t\n// Add nodes\nNode source = newLayer.createNode();\nsource.setLabel(&quot;My source node&quot;);\nRectangle sourceGeometry = source.getGeometry();\nsourceGeometry.setX(200);\nsourceGeometry.setX(100);\nsourceGeometry.setWidth(70);\nsourceGeometry.setHeight(30);\nsource.getTags().add(&quot;aws&quot;);\n\t\t\t\t\nNode target = newLayer.createNode();\ntarget.setLabel(&quot;My target node&quot;);\ntarget.getGeometry().setBounds(300, 150, 100, 30);\nSet&lt;String&gt; targetTags = target.getTags();\ntargetTags.add(&quot;aws&quot;);\ntargetTags.add(&quot;azure&quot;);\n\t\t\n// Add connection \nConnection connection = newLayer.createConnection(source, target);\nconnection.setLabel(&quot;My connection&quot;);\nMap&lt;String, String&gt; connectionStyle = connection.getStyle();\nconnectionStyle.put(&quot;edgeStyle&quot;, &quot;orthogonalEdgeStyle&quot;);\nconnectionStyle.put(&quot;rounded&quot;, &quot;1&quot;);\nconnectionStyle.put(&quot;orthogonalLoop&quot;, &quot;1&quot;);\nconnectionStyle.put(&quot;jettySize&quot;, &quot;auto&quot;);\nconnectionStyle.put(&quot;html&quot;, &quot;1&quot;);\n\t\t\t\t\nFiles.writeString(new File(&quot;new-uncompressed.drawio&quot;).toPath(), document.save(null));\n Loading To load use one of load() methods. The below snippet loads from a class loader resource. Document document = Document.load(getClass().getResource(&quot;compressed.drawio&quot;));\n It is also possible to load a document from PNG metadata - this can be used with PNG files generated by Drawio editors with &ldquo;Include copy of my diagram&rdquo; checked. List&lt;Document&gt; documents = Document.loadFromPngMetadata(getClass().getResource(&quot;illustration.png&quot;));\n Saving Document content can be retrieved as a String using save() method: Files.writeString(new File(&quot;compressed.drawio&quot;).toPath(), document.save(null));\n To embed a diagram into HTML use toHtml() method: Files.writeString(new File(&quot;compressed.html&quot;).toPath(), document.toHtml(null, &quot;https://cdn.jsdelivr.net/gh/Nasdanika/drawio@dev/src/main/webapp/js/viewer-static.min.js&quot;));\n Layout The API provide a simple layout algorithm which arranges nodes so that they don&rsquo;t overlap. It can be used with generated diagrams to make them easier to layout manually after generation. org.nasdanika.drawio.Util.layout(root, 20);\n Page linking The API extends the page linking concept of Drawio to link an element in one document to a page in another document. This allows to create a tree/network of linked diagrams. For example, a complex system or process may be modeled in multiple diagrams maintained by multiple teams. To link a page in another document (file): To link to the first page in the document set link to data:page,&lt;URL&gt;, where &lt;URL&gt; is resolved relative to the URL of the current document. Example: data:page,compressed.drawio. To link to a specific page set link to data:page/name,&lt;URL&gt;#&lt;URL encoded page name&gt;. Example: data:page/name,compressed.drawio#Page+2 Traversing To traverse document elements you can use either accept(&lt;visitor&gt;) methods or stream() method. EMF DrawioResource org.nasdanika.drawio.emf.DrawioResource is a base class for mapping of diagram elements to EMF Ecore model elements. With DrawioResource Drawio files are treated as model resources which can be loaded into a resource set and as such reference model elements in other resources and be referenced from other resources. org.nasdanika.html.model.app.drawio.ResourceFactory is a concrete implementation for mapping diagram elements to application model actions. DrawioEObjectFactory org.nasdanika.drawio.emf.DrawioEObjectFactory is a specialization of org.nasdanika.graph.processor.emf.PropertySourceEObjectFactory for Drawio diagrams. It loads semantic information from properties of diagram elements as explained below. DrawioEObjectFactory is abstract. It does not dictate semantic specification format - subclasses shall implement T load(String spec, URI specBase, ProcessorConfig&lt;T&gt; config, ProgressMonitor progressMonitor) method. Conifguration properties link-page By default semantic elements from linked pages are wired in the same way as element children. To disable wiring of linked page elements set this property to false. Sorting org.nasdanika.drawio.comparators package contains comparators for sorting diagram elements based on their label, properties, and geometry. Executable diagrams Graph documentation explains how to implement graph processors which can be used to make diagrams executable. Applications This section lists some possible applications of Drawio Java API and semantic mappings: High Level Design -&gt; Low Level Design -&gt; Implementation. Define High Level Design in diagrams. Then generate a web site with documentation for Low Level Design. Then use semantic mapping or executable diagrams approach to either generate code from diagrams or execute diagrams directly. Documentation/books/video courses - create a mind map, generate a site from it, add documentation to diagram elements. Reporting - create a diagram of your system/business/effort, generate a documentation site. Enrich diagrams with status - implementation status for systems being built pulled from issue tracker(s), system health status pulled from monitoring systems. Document Page Model Root Layer Layer Element Element Model Element Node Connection * source 0..1 outgoingConnections * 1 1 1..* * target 0..1 incomingConnections *"},"html/models/bootstrap/model/TableCell.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableCell","action-uuid":"2e4e1374-7264-414a-b715-f752ff04fba5","title":"TableCell","content":"org.nasdanika.html.model.bootstrap.TableCell Table cell - regular or header. Supertypes BootstrapElement Referrers TableRow Attribute summary Attribute details background : Color Cell background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false colSpan : EInt Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false color : Color Cell color. Type Color Cardinality 0..1 Changeable true Derived false header : EBoolean If true, table cell is generated as &lt;th&gt; instead of the default &lt;td&gt;. Type EBoolean Cardinality 0..1 Changeable true Derived false rowSpan : EInt Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false  background : Color Cell background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false colSpan : EInt Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false color : Color Cell color. Type Color Cardinality 0..1 Changeable true Derived false header : EBoolean If true, table cell is generated as &lt;th&gt; instead of the default &lt;td&gt;. Type EBoolean Cardinality 0..1 Changeable true Derived false rowSpan : EInt Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false Cell background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false Column span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false Cell color. Type Color Cardinality 0..1 Changeable true Derived false If true, table cell is generated as &lt;th&gt; instead of the default &lt;td&gt;. Type EBoolean Cardinality 0..1 Changeable true Derived false Row span for the cell. Type EInt Cardinality 0..1 Changeable true Derived false"},"architecture/c4/model/System.html":{"path":"Architecture/C4 Model/c4/System","action-uuid":"3e525776-5396-4501-8338-f946ee3c9a68","title":"System","content":"org.nasdanika.architecture.c4.System A software system is the highest level of abstraction and describes something that delivers value to its users, whether they are human or not. This includes the software system you are modelling, and the other software systems upon which your software system depends (or vice versa). Systems extends Domain to support adding reference data, e.g. technology stack. Supertypes Node Domain Referrers System Attribute summary Reference summary Attribute details external : EBoolean If true, the system is external to the system (landscape) described by the architecture. In other words it is not part of the system (landscape), but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false Reference details containers : Container* Containers consituting the system. Type Container Cardinality 0..* Changeable true Derived false subsystems : System* Subsystem is a logical grouping of related containers and subsystems. Type System Cardinality 0..* Changeable true Derived false   external : EBoolean If true, the system is external to the system (landscape) described by the architecture. In other words it is not part of the system (landscape), but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false If true, the system is external to the system (landscape) described by the architecture. In other words it is not part of the system (landscape), but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false containers : Container* Containers consituting the system. Type Container Cardinality 0..* Changeable true Derived false subsystems : System* Subsystem is a logical grouping of related containers and subsystems. Type System Cardinality 0..* Changeable true Derived false Containers consituting the system. Type Container Cardinality 0..* Changeable true Derived false Subsystem is a logical grouping of related containers and subsystems. Type System Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Breadcrumb.html":{"path":"HTML/Models/Bootstrap/bootstrap/Breadcrumb","action-uuid":"211faa94-7cc2-4ebb-8c33-b76deec75d54","title":"Breadcrumb","content":"org.nasdanika.html.model.bootstrap.Breadcrumb"},"core/ncore/model/IMarked.html":{"path":"Core/Ncore/ncore/IMarked","action-uuid":"95b11dc2-69f2-411e-9147-2a08b1f115d7","title":"IMarked","content":"org.nasdanika.persistence.Marked Subtypes Marked"},"core/ncore/model/Marked.html":{"path":"Core/Ncore/ncore/Marked","action-uuid":"cae82ab8-8d8f-4a48-b155-078cdbe97cd4","title":"Marked","content":"org.nasdanika.ncore.Marked A model element which can contain a Marker pointing to the source from which the element was loaded. When model elements are loaded from YAML with Nasdanika EMF Persistence markers are injected into model elements which implement Marked. If model sources are under Git version control then the model loader can be configured to use org.nasdanika.emf.persistence.GitMarkerFactory to create GitMarker instead of Marker to capture Git-specific information such as branch, commit ID, and remotes. Supertypes IMarked Subtypes ModelElement Reference summary Reference details markers : Marker* Markers pointing to where this model element was loaded from - location, line and column numbers. Multiple markers are supported for situations when a single model element is loaded from multiple locations, e.g. a row in an Excel document or a database and then pom.xml and readme.md is a source repository. Another possiblity is an element being created from a prototype and then loaded - in this case the object will inherit markers from its prototype and will have a marker point to the location where it was loaded from. Markers are listed in the reverse order, i.e. the prototype marker would be after the load marker in the list. Type Marker Cardinality 0..* Changeable true Derived false  markers : Marker* Markers pointing to where this model element was loaded from - location, line and column numbers. Multiple markers are supported for situations when a single model element is loaded from multiple locations, e.g. a row in an Excel document or a database and then pom.xml and readme.md is a source repository. Another possiblity is an element being created from a prototype and then loaded - in this case the object will inherit markers from its prototype and will have a marker point to the location where it was loaded from. Markers are listed in the reverse order, i.e. the prototype marker would be after the load marker in the list. Type Marker Cardinality 0..* Changeable true Derived false Markers pointing to where this model element was loaded from - location, line and column numbers. Multiple markers are supported for situations when a single model element is loaded from multiple locations, e.g. a row in an Excel document or a database and then pom.xml and readme.md is a source repository. Another possiblity is an element being created from a prototype and then loaded - in this case the object will inherit markers from its prototype and will have a marker point to the location where it was loaded from. Markers are listed in the reverse order, i.e. the prototype marker would be after the load marker in the list. Type Marker Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Card.html":{"path":"HTML/Models/Bootstrap/bootstrap/Card","action-uuid":"6a6cbb17-6b9b-445e-b786-4dba09c2844c","title":"Card","content":"org.nasdanika.html.model.bootstrap.Card Bootstrap card. Supertypes Div Reference summary Reference details body : BootstrapElement Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false  body : BootstrapElement Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card body. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card footer. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Card header. Type BootstrapElement Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Navbar.html":{"path":"HTML/Models/Bootstrap/bootstrap/Navbar","action-uuid":"250b8f18-0108-4ea3-ba5c-f2d9827fcc0f","title":"Navbar","content":"org.nasdanika.html.model.bootstrap.Navbar"},"html/app/drawio/index.html":{"path":"HTML/Models/App/Drawio","action-uuid":"d9ef3f75-807a-407c-872d-117930abc2f7","title":"Drawio","content":"With org.nasdanika.html.model.app.drawio.ResourceFactory action models can be loaded from Drawio diagrams. In other words, a structure of a web site/application can be defined as a diagram. The below table contains a list of available demos which can be used as starting points for &ldquo;diagram-as-a-web-application&rdquo; efforts. Description Site Sources Documentation generated from a component diagram https://docs.nasdanika.org/demo-drawio-actions/index.html https://github.com/Nasdanika/demo-drawio-actions Process documentation generated from a flow diagram https://docs.nasdanika.org/demo-drawio-flow-actions/index.html https://github.com/Nasdanika/demo-drawio-flow-actions A web site generated from a mind map diagram https://docs.nasdanika.org/demo-drawio-map/index.html https://github.com/Nasdanika/demo-drawio-map Loading can be customized at two levels: Adding properties to diagram elements Sub-classing org.nasdanika.html.model.app.drawio.ResourceFactory The following section explains configuration properties. For sub-classing consult org.nasdanika.html.model.app.drawio.ResourceFactory javadoc and source code. Configuration default-connection-role Node property. Value is used for role connection property (see below). Default connection role is inherited from semantic parents to semantic children. default-connection-target-role Node property. Value is used for role of targets of outgoing connections. Default connection target role is inherited from semantic parents to semantic children. See target-role below for more details. documentation Location of Markdown documentation. The location is resolved relative to the documentation location of the semantic parent (recursively) or relative to the Drawio document (file) location if there is no semantic parent or there is no documentation for the semantic parent. For pages and page elements documentation may contain ${diagram} and ${toc} tokens to insert the page diagram and a table of contents respectively. The page diagram is processed to link model element to action pages. Additional processing can be added by overriding on of createXXXProcessor methods in the resource factory and then overriding processEmbeddedDiagramElement method in the processor. For example, shapes can be styled based on information extracted from external systems: Roadmap diagram elements can be styled based on status extracted from the issue tracking system. Component diagram elements can be styled: Based on construction status extracted from the issue tracking system for a system being built. Based on information extracted from monitoring tools - load, availablity - for already built systems. icon Optional icon for an action loaded from a model element. Treated as a URL if contains a slash (/) or as a CSS class otherwise, e.g. fas fa-project-diagram a Font Awesome 5 project diagram icon. page-element Set it to true for the root element on the page, specifically for linked pages. For example, on the Living Beings diagram Cat is linked to the Cat page with the Cat element being the page element. As such, semantic children of the Cat element on the Cat page (Havana Brown, Maine Coon, and Savannah) are &ldquo;mounted&rdquo; to the Cat element on the main diagram. Please note that with page linking documentation shall be provided on the linking element, e.g. the Cat element on the main diagram. path path property is used to form action location (URL). By default diagram element ID is used as path. You can specify path explicitly to have clean URL&rsquo;s. role Defines diagram element action type (role). If present, one of: anonymous - Connection target action is added to the anonymous actions of the source action. Anonymous actions are generated, but not auto-linked - they should be explicitly linked from the action content. child - Connection target action is added to the child actions of the source action. Child actions are shown in the left navigation panel. navigation - Connection target action is added to the navigation actions of the source action. Navigation actions are shown in: The footer for the root action, The navigation bar for the principal action, The section navigation for sections, Active action navigation for other actions. none - Clears role inherited from the semantic parent, if any. section - Connection target action is added to the section actions of the source action. Section actions are rendered as part of the parent action content. See Action Types for additional details. root-page If a diagram file has multiple pages with some pages linked from others annotate linked pages with root-page set to false. In this case these pages of their page elements do not appear in the root of resource. An alternative is to subclass the resource factory and explicitly select root resource elements from which to generate a web site. selector Use selector property to link a diagram element to an element on another diagram (page). selector value shall be a Spring boolean expression. The expression is evaluated in the context of a diagram element. Selectors allow to &ldquo;reuse&rdquo; the same element in multiple diagrams. For example, on the Sample Integration diagram S3 Reference shape references S3 node with getProperty('alias') == 's3' selector. sort Specifies how children shall be sorted. Property value shall be in the form of &lt;type&gt;[:config] where a type is one of: clockwise or counterclockwise - sorts nodes clockwise and counterclockwise respectively relative to their semantic parent. Can be used in mind maps. May take base angle in degrees as optional configuration. Base angle defaults to 90 degrees (12 o&rsquo;clock) if the semantic parent node does not have a semantic parent and to the angle between the parent and its parent otherwise. Living beings mind map uses clockwise sort. label - sorts by label value. This is the default sort type. Optional descending configuration. property - sorts by property value (string). Optional descending configuration. target-role If this property is set for a connection and is not none or if default-target-role is not null or none then the connection establishes a semantic parent/child role between its source and target target role specifies the child&rsquo;s role. See role for a list of supported values. The Living beings mind map uses default-target-role to establish semantic parent/child connections between nodes."},"html/models/bootstrap/model/TableHeader.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableHeader","action-uuid":"9a730d9f-c359-4a31-8986-5c3b7523edfa","title":"TableHeader","content":"org.nasdanika.html.model.bootstrap.TableHeader Table header. Supertypes TableSection Referrers Table Attribute summary Attribute details dark : EBoolean Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false light : EBoolean Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false  dark : EBoolean Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false light : EBoolean Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false Dark header (mutually exclusive with light). Type EBoolean Cardinality 0..1 Changeable true Derived false Light header (mutually exclusive with dark). Type EBoolean Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Collapse.html":{"path":"HTML/Models/Bootstrap/bootstrap/Collapse","action-uuid":"74dc72ba-aef3-4437-a00d-9ce4a6ac6e12","title":"Collapse","content":"org.nasdanika.html.model.bootstrap.Collapse"},"core/ncore/model/IntegerEntry.html":{"path":"Core/Ncore/ncore/IntegerEntry","action-uuid":"4a3f564f-ee54-4cc2-aaba-c99c354ee21e","title":"IntegerEntry","content":"java.util.Map.Entry EMap entry with int value Attribute summary Attribute details key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EInt Entry value. Type EInt Cardinality 0..1 Changeable true Derived false  key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EInt Entry value. Type EInt Cardinality 0..1 Changeable true Derived false Entry key. Type EString Cardinality 1 Changeable true Derived false Entry value. Type EInt Cardinality 0..1 Changeable true Derived false"},"architecture/c4/model/TechnologyProduct.html":{"path":"Architecture/C4 Model/c4/TechnologyProduct","action-uuid":"2e5e2c1e-0b08-4943-813b-aef7277796ae","title":"TechnologyProduct","content":"org.nasdanika.architecture.c4.TechnologyProduct Technology product. For example, a software product like Java, or a standard like TOGAF or HTML. Supertypes Technology Reference summary Reference details versions : TechnologyVersion* Type TechnologyVersion Cardinality 0..* Changeable true Derived false  versions : TechnologyVersion* Type TechnologyVersion Cardinality 0..* Changeable true Derived false Type TechnologyVersion Cardinality 0..* Changeable true Derived false"},"architecture/core/model/ArchitectureElement.html":{"path":"Architecture/Core/core/ArchitectureElement","action-uuid":"5a7edc7c-4ce9-42dc-a38c-ede695ced182","title":"ArchitectureElement","content":"org.nasdanika.architecture.core.ArchitectureElement An element of an architecture model. Supertypes Period ModelElement Subtypes AzureElement Cluster Container Domain Image Node Registry Relationship Stage Technology Referrers CompositeNode Impact Tag ViewElement Reference summary Reference details events : Event* Events associated with this architecture element. Events can be used as bases for temporals and periods, e.g. other architecture elements or increments. Type Event Cardinality 0..* Changeable true Derived false Key id facets : Facet* Facets allow to enrich an architecture element. For example, an increment might have a cost model facet describing different types of cost associated with the increment. Type Facet Cardinality 0..* Changeable true Derived false impactedBy : Impact* Stages which impact this element. A computed opposite to Impact.elements Type Impact Cardinality 0..* Changeable false Derived true Opposite elements properties : Property* Architecture element properties Type Property Cardinality 0..* Changeable true Derived false Key name stages : Stage* Architecture element lifecycle stages. E.g. releases/versions for a technology product or lifecycle for a technology product release. Type Stage Cardinality 0..* Changeable true Derived false Key id tags : Tag* This element&rsquo;s tags Type Tag Cardinality 0..* Changeable true Derived false Opposite tagged viewElements : ViewElement* View elements representing this architecture element. A computed opposite to ViewElement.architectureElement. Type ViewElement Cardinality 0..* Changeable false Derived true Opposite architectureElement  events : Event* Events associated with this architecture element. Events can be used as bases for temporals and periods, e.g. other architecture elements or increments. Type Event Cardinality 0..* Changeable true Derived false Key id facets : Facet* Facets allow to enrich an architecture element. For example, an increment might have a cost model facet describing different types of cost associated with the increment. Type Facet Cardinality 0..* Changeable true Derived false impactedBy : Impact* Stages which impact this element. A computed opposite to Impact.elements Type Impact Cardinality 0..* Changeable false Derived true Opposite elements properties : Property* Architecture element properties Type Property Cardinality 0..* Changeable true Derived false Key name stages : Stage* Architecture element lifecycle stages. E.g. releases/versions for a technology product or lifecycle for a technology product release. Type Stage Cardinality 0..* Changeable true Derived false Key id tags : Tag* This element&rsquo;s tags Type Tag Cardinality 0..* Changeable true Derived false Opposite tagged viewElements : ViewElement* View elements representing this architecture element. A computed opposite to ViewElement.architectureElement. Type ViewElement Cardinality 0..* Changeable false Derived true Opposite architectureElement Events associated with this architecture element. Events can be used as bases for temporals and periods, e.g. other architecture elements or increments. Type Event Cardinality 0..* Changeable true Derived false Key id Facets allow to enrich an architecture element. For example, an increment might have a cost model facet describing different types of cost associated with the increment. Type Facet Cardinality 0..* Changeable true Derived false Stages which impact this element. A computed opposite to Impact.elements Type Impact Cardinality 0..* Changeable false Derived true Opposite elements Architecture element properties Type Property Cardinality 0..* Changeable true Derived false Key name Architecture element lifecycle stages. E.g. releases/versions for a technology product or lifecycle for a technology product release. Type Stage Cardinality 0..* Changeable true Derived false Key id This element&rsquo;s tags Type Tag Cardinality 0..* Changeable true Derived false Opposite tagged View elements representing this architecture element. A computed opposite to ViewElement.architectureElement. Type ViewElement Cardinality 0..* Changeable false Derived true Opposite architectureElement"},"architecture/core/model/Tag.html":{"path":"Architecture/Core/core/Tag","action-uuid":"39ce95fd-f995-4dd9-8e81-c982aa3be27e","title":"Tag","content":"org.nasdanika.architecture.core.Tag Tags allow to categorize architecture elements. Supertypes ModelElement Referrers ArchitectureElement Reference summary Reference details tagged : ArchitectureElement* Architecture elements tagged with this tag. A computed opposite to ArchitectureElement.tags Type ArchitectureElement Cardinality 0..* Changeable false Derived true Opposite tags  tagged : ArchitectureElement* Architecture elements tagged with this tag. A computed opposite to ArchitectureElement.tags Type ArchitectureElement Cardinality 0..* Changeable false Derived true Opposite tags Architecture elements tagged with this tag. A computed opposite to ArchitectureElement.tags Type ArchitectureElement Cardinality 0..* Changeable false Derived true Opposite tags"},"html/models/app/model/package-summary.html":{"path":"HTML/Models/App/app","action-uuid":"9fb25e7d-34ed-4e67-904e-0bf005f7f47c","title":"app","content":"urn:org.nasdanika.html.model.app Nasdanika application model provides model elements for building HTML applications such as static web sites, dynamic applications, and combinations of thereof. Application models can be: Defined manually, e.g. in YAML using Nasdanika EMF Persistence (example), Created programmatically, for example generated from other models. Loaded from Drawio diagrams using Drawio Resource Factory. These approaches can be combined. Javadoc. Examples Concepts Action UI life cycle Action types Page structure Header Root navigation Principal Principal navigation Navigation Panel Content Panel Breadcrumb Title Active action navigation Content left navigation panel Content float left navigation panel Content right navigation panel Content float right navigation panel Section Section title Section navigation Section left navigation panel Section float left navigation panel Section right navigation panel Section float right navigation panel Footer Generation Static sites Dynamic behavior Server-side Client-side Examples This site is generated from an engineering model with Ecore model documentation action models generated from Ecore models using Nasdanika HTML Ecore and &ldquo;mounted&rdquo; to the engineering model action tree. TOGAF ADM site is generated from a flow model. Drawio: Actions - documentation generated from a component diagram. Flow - process documentation generated from a flow diagram. Mind map - web site generated from a mind map diagram. To create action models programmatically add app-model dependency to pom.xml, e.g. &lt;dependency&gt;\n  &lt;groupId&gt;org.nasdanika.html&lt;/groupId&gt;\n  &lt;artifactId&gt;app-model&lt;/artifactId&gt;\n  &lt;version&gt;2022.4.2&lt;/version&gt;\n&lt;/dependency&gt;\n to generate HTML form action models add add app-model-gen dependency, e.g. &lt;dependency&gt;\n  &lt;groupId&gt;org.nasdanika.html&lt;/groupId&gt;\n  &lt;artifactId&gt;app-model-gen&lt;/artifactId&gt;\n  &lt;version&gt;2022.4.2&lt;/version&gt;\n&lt;/dependency&gt;\n Concepts With Nasdanika App model user interface is constructed from actions organized in a hierarchy. Users activate actions to get results (action content). This approach allows developers to focus on the functionality of their application in terms of actions and select action placement in the UI and page styling/themes later. Changing of the action placement does not change the application functionality, just the appearance. It allows to adjust the application as it evolves. For example, an action of a documentation site might be in a section collection if it doesn&rsquo;t have a lot of content and then can be moved to the children collection if it becomes large enough to be a page on its own. Action UI life cycle In the UI an action goes through the following stages: Display - an action link is displayed to the user. The link may have an icon, text or both. It may have a tooltip. Inline actions don&rsquo;t go through this stage - they go directly to the last stage. Some actions are always visible to the user, e.g. the root and principal actions (see below). Some are only shown in a context of another active action, e.g. navigation and section actions. Activation - user clicks on the action link. Actions may have URL, script, and modal activators. URL activator navigates to a URL, script activator executes a script, and a modal activator shows action content in a modal dialog. Display of action content. At this stage action content is displayed to the user. For inline actions content is displayed where the link is displayed for non-inline actions. If an action has a modal activator, then its content is displayed in a modal dialog. Otherwise, action&rsquo;s content is displayed in the content panel. Section actions do not have activators and are displayed in the content panel of their parent action. Action types An application page is generated from 3 actions: Root action - the root of the action hierarchy. It is displayed in the header with its children, except the first one, displayed in the root navigation bar on the top right. On this page &ldquo;Nasdanika&rdquo; is the root action. Navigation actions of the root action are displayed in the footer. Principal action - by default the first child of the root action. Displayed in the navigation bar brand on the left. On this page &ldquo;Documentation&rdquo; is the principal action. Navigation actions of the principal action are displayed in the navigation bar on the right of the principal action. Children of the principal action are displayed recursively in the navigation panel. On this page it is a tree of documentation actions. Active action - any action in the hierarchy which is currently &ldquo;active&rdquo;, i.e. it&rsquo;s content is displayed in the content panel and it is shown as active/selected in the navigation panel or navigation bar. On this page Products/HTML/Models/Application/Model is the active action - it is selected in the navigation tree and your are reading its content. Active action path is displayed in the breadcrumb. Navigation actions of the active action are displayed in in the active action navigation bar to the right of the action title - &ldquo;Diagram&rdquo;, &ldquo;Issues&rdquo;, and &ldquo;All Issues&rdquo; on this page. Section actions are displayed as page sections with their navigation actions displayed in section navigation bars to the right of section titles (for paragraph section style). Content/Section (float) left actions are displayed in the left content/section (float) navigation panel. Content/Section (float) right actions are displayed in the right content/section (float) navigation panel. Page structure This section provides an overview of the page structure. You can hover over the diagram elements to see tooltips and click on the diagram elements to navigate to corresponding documentation sections. You may also hide/show diagram layers. Header Displays the root action&rsquo;s icon and text. Click on the icon/text activates the root action, if it has an activator. Root navigation Displays 1+ children of the root action - siblings of the principal action. Principal Displays the principal&rsquo;s action icon and text. Click on the icon/text activates the principal action, if it as an activator. Principal navigation Displays navigation actions of the principal action. Navigation Panel Displays children of the principal action. Navigation panels can display actions in several modes - list, tree, cards, cards with list or tree. Cards can be collapsible. This page uses collapsible cards with trees. Content Panel Displays content of the active action. Breadcrumb Containment path of the active action. Title Icon and text of the active action. Active action navigation Displays navigation actions of the active action. If a navigation action has children and no activator it is rendered as a drop-down. This also applies to the root, footer, and section navigation actions. Content left navigation panel Displays leftNavigation actions of the active action. Left navigation panel is displayed in a bootstrap column. It can be used to display, for example, a table of contents of the active action - the hierarchy of sections. Content float left navigation panel Displays floatLeftNavigation actions of the active action. Left navigation panel is displayed in a div with float style. Similarly to the content left panel it can be used to display, for example, a table of contents of the active action - the hierarchy of sections. Content right navigation panel Displays rightNavigation actions of the active action. Right navigation panel is displayed in a bootstrap column. It can be used to display, for example, a list of useful links. Content float right navigation panel Displays floatRightNavigation actions of the active action. Right navigation panel is displayed in a div with float style. Similarly to the content right panel it can be used to display, for example, a list of useful links. Section Actions may have zero or more sections. Action may define how sections shall be displayed by specifying SectionStyle. Sections can be nested. A section is rendered in the same way as the active action, but without breadcrumb. Section title Icon and text of the section action. Section navigation Displays navigation actions of the section action. Section left navigation panel Displays leftNavigation actions of the section action. Left navigation panel is displayed in a bootstrap column. Section float left navigation panel Displays floatLeftNavigation actions of the section action. Left navigation panel is displayed in a div with float style. Section right navigation panel Displays rightNavigation actions of the section action. Right navigation panel is displayed in a bootstrap column. Section float right navigation panel Displays floatRightNavigation actions of the section action. Right navigation panel is displayed in a div with float style. Footer Displays navigation actions of the root action. Generation HTML pages are generated from actions by combining the action model with a page template. Example of a page template Static sites Static sites are generated by traversing the action model and generating pages for action with location matching a specific condition, e.g. located under a specified output directory. The generation process is two-step: Resource model is generated from an action model - example Files are generated from the resource model - example, includes validation of links and generation of a search index. Dynamic behavior This section explains how to create a dynamic web application with Nasdanika action models. The dynamic behavior approaches can be combined with each other and with static web site generation. Server-side Server-side dynamic behavior can be implemented by creating a servlet or another type of Java HTTP request processor, e.g. a Spring RestController. An action model can be generated or loaded from some resource and stored in HTTP session. Then individual pages would be generated on access. The action model can be re-generated on specific events, e.g. user log-in/log-out or changes in data which affect the model content. If the action model is highly dynamic, it can be generated for every request instead of caching it in session. The dynamic part of a page (page content) can be injected via a context property. Some other options: Generate a page with a replacement token in the content panel. Cache the page in session. During request processing use String replace. Generate a page with an empty content panel. Parse the page using Jsoup and store the parsed document and the content panel element in session. During request processing replace content of the content panel element with dynamic content, write to response. If the action model is constant and only the content panel shall be dynamic, then the server-side dynamic generation can be combined with static site generation: the static part would be hosted on a web server such as Apache HTTPD and dynamic requests would be forwarded to a servlet container. Client-side Another option to introduce dynamic behavior is single page applications, e.g. built with: Vue.js and BootstrapVue. The search page of this site is created using this approach - the generation process creates search-documents.js file used by a Vue application. React and React Bootstrap. The client-side approach may be combined with the server-side approach - instead of application pages the server side would generate json responses used by the client side. Or it may generate both - an application page with a Vue/React application on it possibly parameterized during generation, and then json responses with data for the application. The server site may provide update endpoints for the single-page application as well. Header Text and icon of the root action with a link to the root action location Root Navigation Root navigation is built from the root action children starting with index 1, i.e. principal's siblings Footer Built from the root action navigation actions Root Principal Principal action's icon text and link Principal Navigation Principal navigation is built from the principal action navigation items Navigation Panel Navigation panel is built from the principal action child actions Principal Content Panel Content panel is built from the active action and its contained actions Content Left Navigation Panel Built from leftNavigation actions of the active action Content Float Left Navigation Panel Built from floatLeftNavigation actions of the active action Title Active action icon and text Breadcrumb Shows the active action path Active action navigation Built from navigation actions of the current action Content Float Right Navigation Panel Built from floatRightNavigation actions of the active action Content Right Navigation Panel Built from rightNavigation actions of the active action Active Section Sections actions are rendered as nested content panels Section Title Section's icon and text Section Navigation Built from navigation actions of the section action Section Left Navigation Panel Built from leftNavigation actions of the section action Section Right Navigation Panel Built from rightNavigation actions of the section action Section Float Right Navigation Panel Built from floatRightNavigation actions of the section action Section Float Left Navigation Panel Built from floatLeftNavigation actions of the section action Section"},"html/models/bootstrap/model/TableSection.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableSection","action-uuid":"cc4af095-2b81-4d7e-87bc-23839c53a92e","title":"TableSection","content":"org.nasdanika.html.model.bootstrap.TableSection Table section - body or footer, header has its own class. Supertypes TableRowContainer Subtypes TableHeader Referrers Table"},"html/models/bootstrap/model/ButtonGroup.html":{"path":"HTML/Models/Bootstrap/bootstrap/ButtonGroup","action-uuid":"b949d0a5-915f-480d-9ef0-83849acd398d","title":"ButtonGroup","content":"org.nasdanika.html.model.bootstrap.ButtonGroup"},"html/models/bootstrap/model/BootstrapElement.html":{"path":"HTML/Models/Bootstrap/bootstrap/BootstrapElement","action-uuid":"85264845-7511-49ab-a077-4ce7d7b487ec","title":"BootstrapElement","content":"org.nasdanika.html.model.bootstrap.BootstrapElement An HTML element with Bootstrap appearance. Supertypes HtmlElement Subtypes Column Container Label Modal Page PagePart Row TableCell TableRow TableRowContainer Tag Referrers Card Modal Reference summary Reference details appearance : Appearance Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false  appearance : Appearance Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false Customizes appearance of Bootstrap element. Type Appearance Cardinality 0..1 Changeable true Derived false"},"architecture/core/model/ModelElement.html":{"path":"Architecture/Core/core/ModelElement","action-uuid":"e10a0acb-67a7-4403-8848-702e94e1b9a3","title":"ModelElement","content":"org.nasdanika.architecture.core.ModelElement Named and documented element with an ID. Supertypes NamedElement Documented Subtypes ArchitectureElement Concern Event Impact ImpactType Stakeholder Tag View ViewElement Viewpoint Referrers Domain Attribute summary Reference summary Attribute details actionRole : ActionRole Type ActionRole Cardinality 0..1 Changeable true Derived false id : EString Element ID to use as EKey - a unique identifier of this element among its siblings in the parent&rsquo;s containment reference. Type EString Cardinality 0..1 Changeable true Derived false Reference details views : View* Type View Cardinality 0..* Changeable true Derived false Key id   actionRole : ActionRole Type ActionRole Cardinality 0..1 Changeable true Derived false id : EString Element ID to use as EKey - a unique identifier of this element among its siblings in the parent&rsquo;s containment reference. Type EString Cardinality 0..1 Changeable true Derived false Type ActionRole Cardinality 0..1 Changeable true Derived false Element ID to use as EKey - a unique identifier of this element among its siblings in the parent&rsquo;s containment reference. Type EString Cardinality 0..1 Changeable true Derived false views : View* Type View Cardinality 0..* Changeable true Derived false Key id Type View Cardinality 0..* Changeable true Derived false Key id"},"architecture/c4/model/Relationship.html":{"path":"Architecture/C4 Model/c4/Relationship","action-uuid":"50c06784-75ca-4d8d-8bd4-c1ee0714dd00","title":"Relationship","content":"org.nasdanika.architecture.c4.Relationship A relationship between two nodes. Relationships are contained by their source nodes and reference their targets using the target reference. Supertypes Relationship TechnologyConsumer"},"html/models/app/model/Page.html":{"path":"HTML/Models/App/app/Page","action-uuid":"d6934146-ff68-41d2-a824-dd9171baa80f","title":"Page","content":"org.nasdanika.html.model.app.Page Application page consisting of several parts - header, navigation bar, navigation panel, content panel, and footer. Page extends Tag, but name attribute shall not be used - it defaults to div. Supertypes BootstrapElement Attribute summary Reference summary Attribute details fluid : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Reference details contentPanel : ContentPanel Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false contentRowAppearance : Appearance Type Appearance Cardinality 0..1 Changeable true Derived false footer : Footer Type Footer Cardinality 0..1 Changeable true Derived false header : Header Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false navigationBar : NavigationBar Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false navigationPanel : NavigationPanel Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false   fluid : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false contentPanel : ContentPanel Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false contentRowAppearance : Appearance Type Appearance Cardinality 0..1 Changeable true Derived false footer : Footer Type Footer Cardinality 0..1 Changeable true Derived false header : Header Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false navigationBar : NavigationBar Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false navigationPanel : NavigationPanel Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Content panel is positioned on the right of the navigation panel below the navigation bar. Type ContentPanel Cardinality 0..1 Changeable true Derived false Type Appearance Cardinality 0..1 Changeable true Derived false Type Footer Cardinality 0..1 Changeable true Derived false Page header is displayed on the top of the page. Type Header Cardinality 0..1 Changeable true Derived false Navigation bar is displayed below the header. Type NavigationBar Cardinality 0..1 Changeable true Derived false Navigation panel is positioned on the left of the content panel below the navigation bar. Type NavigationPanel Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/Duration.html":{"path":"Core/Ncore/ncore/Duration","action-uuid":"fa07f4d5-e227-4d3f-a42f-3b37edf5a7d7","title":"Duration","content":"java.time.Duration Duration is an amount of time in the ISO-8601 Duration format. Supports days and smaller units. Weeks, months and years are not supported. Example: P28DT10H. Uses Period Temporal"},"html/models/app/model/ActionReference.html":{"path":"HTML/Models/App/app/ActionReference","action-uuid":"1d5d3c64-56e8-4e1c-b86d-9ae38db7e0e7","title":"ActionReference","content":"org.nasdanika.html.model.app.ActionReference Supertypes Reference&lt;Action&gt;"},"html/models/app/model/Link.html":{"path":"HTML/Models/App/app/Link","action-uuid":"6b227636-b3e1-430c-8bdd-d7bc00c30167","title":"Link","content":"org.nasdanika.html.model.app.Link Supertypes Label Subtypes Action Uses Action Attribute summary Reference summary Attribute details confirmation : EString Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false location : EString Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false name : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false script : EString Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false target : EString Link target Type EString Cardinality 0..1 Changeable true Derived false Reference details action : Action Link to an action. Type Action Cardinality 0..1 Changeable true Derived false modal : Modal Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false   confirmation : EString Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false location : EString Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false name : EString Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false script : EString Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false target : EString Link target Type EString Cardinality 0..1 Changeable true Derived false Confirmation to display in a confirmation dialog before action activation to give the user an opportunity to cancel the action. E.g. confirmation of deletion. Type EString Cardinality 0..1 Changeable true Derived false Link URL relative to the ancestor URL or base-uri. ${base-uri} token can be used in the activator to define the uri relative to the base generation URI (output folder) instead of the parent URI. It might be useful it the parent URI is an absolute external URI. ${base-uri} ends with a slash, so there is no need to add a slash. E.g. ${base-uri}index.html. Type EString Cardinality 0..1 Changeable true Derived false Link name attribute if not blank for referencing sections. Type EString Cardinality 0..1 Changeable true Derived false Script to execute on link click (activation). Type EString Cardinality 0..1 Changeable true Derived false Link target Type EString Cardinality 0..1 Changeable true Derived false action : Action Link to an action. Type Action Cardinality 0..1 Changeable true Derived false modal : Modal Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false Link to an action. Type Action Cardinality 0..1 Changeable true Derived false Modal which opens on link activation. Type Modal Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/StringEntry.html":{"path":"Core/Ncore/ncore/StringEntry","action-uuid":"daf2258d-ba5e-401d-badf-fbdee2c94706","title":"StringEntry","content":"java.util.Map.Entry EMap entry with String value Referrers GitMarker Attribute summary Attribute details key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EString Entry value. Type EString Cardinality 0..1 Changeable true Derived false  key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EString Entry value. Type EString Cardinality 0..1 Changeable true Derived false Entry key. Type EString Cardinality 1 Changeable true Derived false Entry value. Type EString Cardinality 0..1 Changeable true Derived false"},"architecture/containers/helm/model/package-summary.html":{"path":"Architecture/Containers/Helm/helm","action-uuid":"27301f81-e8aa-44ae-826a-d976f37e6aca","title":"helm","content":"urn:org.nasdanika.architecture.containers.helm Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"html/models/bootstrap/model/TextTransform.html":{"path":"HTML/Models/Bootstrap/bootstrap/TextTransform","action-uuid":"cd2d809e-e32b-44da-8946-d0f046713876","title":"TextTransform","content":"org.nasdanika.html.bootstrap.Text.Transform Uses Text"},"architecture/c4/model/Component.html":{"path":"Architecture/C4 Model/c4/Component","action-uuid":"d2550067-6f01-443b-860f-0e6d79915129","title":"Component","content":"org.nasdanika.architecture.c4.Component The word &ldquo;component&rdquo; is a hugely overloaded term in the software development industry, but in this context a component is a grouping of related functionality encapsulated behind a well-defined interface. If you&rsquo;re using a language like Java or C#, the simplest way to think of a component is that it&rsquo;s a collection of implementation classes behind an interface. Aspects such as how those components are packaged (e.g. one component vs many components per JAR file, DLL, shared library, etc) is a separate and orthogonal concern. An important point to note here is that all components inside a container typically execute in the same process space. In the C4 model, components are not separately deployable units. Supertypes Module Referrers Container"},"html/models/app/model/NavigationBar.html":{"path":"HTML/Models/App/app/NavigationBar","action-uuid":"30e50740-67a0-468b-8eb7-4a44e4f91d54","title":"NavigationBar","content":"org.nasdanika.html.model.app.NavigationBar Navigation bar has a brand and navigation items. Supertypes PagePart Referrers Page Attribute summary Reference summary Attribute details background : Color Type Color Cardinality 0..1 Changeable true Derived false dark : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false expand : Breakpoint Type Breakpoint Cardinality 0..1 Changeable true Derived false Reference details brand : Label Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false   background : Color Type Color Cardinality 0..1 Changeable true Derived false dark : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false expand : Breakpoint Type Breakpoint Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type Breakpoint Cardinality 0..1 Changeable true Derived false brand : Label Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false Brand label displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/core/model/RegionPair.html":{"path":"Architecture/Cloud/Azure/Core/core/RegionPair","action-uuid":"92912e12-9ab5-4490-a79a-0bbfdd652090","title":"RegionPair","content":"org.nasdanika.architecture.cloud.azure.core.RegionPair Supertypes AzureElement"},"core/exec/model/content/package-summary.html":{"path":"Core/Exec/exec/content","action-uuid":"2786dc87-8b34-45ac-9f59-a2f707f77c96","title":"content","content":"urn:org.nasdanika.exec.content Content classes are adapted to org.nasdanika.common.SupplierFactory&lt;java.io.InputStream&gt; to supply content for files, HTTP Call bodies etc. in a form of input streams."},"html/models/bootstrap/model/LinkActionGroupItem.html":{"path":"HTML/Models/Bootstrap/bootstrap/LinkActionGroupItem","action-uuid":"a17bd526-e84f-4c94-bdf5-f85d5936e569","title":"LinkActionGroupItem","content":"org.nasdanika.html.model.bootstrap.LinkActionGroupItem Click on the item navigates to the link URL. Supertypes ActionGroupItem Attribute summary Attribute details url : EString Link URL. Type EString Cardinality 1 Changeable true Derived false  url : EString Link URL. Type EString Cardinality 1 Changeable true Derived false Link URL. Type EString Cardinality 1 Changeable true Derived false"},"architecture/core/model/Domain.html":{"path":"Architecture/Core/core/Domain","action-uuid":"a939c319-02f8-4f17-b966-1070f25f430d","title":"Domain","content":"org.nasdanika.architecture.core.Domain Domain is a grouping construct for architecture elements. Supertypes ArchitectureElement Subtypes System Reference summary Reference details elements : ModelElement* Domain elements Type ModelElement Cardinality 0..* Changeable true Derived false Key id  elements : ModelElement* Domain elements Type ModelElement Cardinality 0..* Changeable true Derived false Key id Domain elements Type ModelElement Cardinality 0..* Changeable true Derived false Key id"},"architecture/c4/model/Container.html":{"path":"Architecture/C4 Model/c4/Container","action-uuid":"60cb1fb0-df47-49ad-82cb-c863355867e3","title":"Container","content":"org.nasdanika.architecture.c4.Container A container represents an application or a data store. A container is something that needs to be running in order for the overall software system to work. In real terms, a container is something like: Server-side web application: A Java EE web application running on Apache Tomcat, an ASP.NET MVC application running on Microsoft IIS, a Ruby on Rails application running on WEBrick, a Node.js application, etc. Client-side web application: A JavaScript application running in a web browser using Angular, Backbone.JS, jQuery, etc. Client-side desktop application: A Windows desktop application written using WPF, an OS X desktop application written using Objective-C, a cross-platform desktop application written using JavaFX, etc. Mobile app: An Apple iOS app, an Android app, a Microsoft Windows Phone app, etc. Server-side console application: A standalone (e.g. &ldquo;public static void main&rdquo;) application, a batch process, etc. Serverless function: A single serverless function (e.g. Amazon Lambda, Azure Function, etc). Database: A schema or database in a relational database management system, document store, graph database, etc such as MySQL, Microsoft SQL Server, Oracle Database, MongoDB, Riak, Cassandra, Neo4j, etc. Blob or content store: A blob store (e.g. Amazon S3, Microsoft Azure Blob Storage, etc) or content delivery network (e.g. Akamai, Amazon CloudFront, etc). File system: A full local file system or a portion of a larger networked file system (e.g. SAN, NAS, etc). Shell script: A single shell script written in Bash, etc. etc A container is essentially a context or boundary inside which some code is executed or some data is stored. And each container is a separately deployable/runnable thing or runtime environment, typically (but not always) running in its own process space. Because of this, communication between containers typically takes the form of an inter-process communication. Supertypes Node TechnologyConsumer Referrers Container System Reference summary Reference details children : Container* Containers can be nested. E.g. Tomcat may be running in a Docker container and serve multiple applications. Type Container Cardinality 0..* Changeable true Derived false components : Component* Components consituting the container. Type Component Cardinality 0..* Changeable true Derived false  children : Container* Containers can be nested. E.g. Tomcat may be running in a Docker container and serve multiple applications. Type Container Cardinality 0..* Changeable true Derived false components : Component* Components consituting the container. Type Component Cardinality 0..* Changeable true Derived false Containers can be nested. E.g. Tomcat may be running in a Docker container and serve multiple applications. Type Container Cardinality 0..* Changeable true Derived false Components consituting the container. Type Component Cardinality 0..* Changeable true Derived false"},"architecture/cloud/azure/storage/model/package-summary.html":{"path":"Architecture/Cloud/Azure/Storage/storage","action-uuid":"503a6676-bb01-4004-ad80-a7a311ec48f2","title":"storage","content":"urn:org.nasdanika.architecture.cloud.azure.storage Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"html/models/bootstrap/model/Modal.html":{"path":"HTML/Models/Bootstrap/bootstrap/Modal","action-uuid":"c5200b55-7a87-42dd-bb49-e808b21b254b","title":"Modal","content":"org.nasdanika.html.model.bootstrap.Modal Supertypes BootstrapElement Referrers Link Attribute summary Reference summary Attribute details centered : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false dismisser : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false scrollable : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false size : EString Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false Reference details body : BootstrapElement Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false   centered : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false dismisser : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false scrollable : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false size : EString Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false Modal size - small, large, or extra-large. Type EString Cardinality 0..1 Changeable true Derived false body : BootstrapElement Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false footer : BootstrapElement Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false header : BootstrapElement Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal body content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal footer content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false Modal header content and appearance. Type BootstrapElement Cardinality 0..1 Changeable true Derived false"},"architecture/c4/model/Person.html":{"path":"Architecture/C4 Model/c4/Person","action-uuid":"fbc5f09d-81be-455b-a548-0105f32cf3b1","title":"Person","content":"org.nasdanika.architecture.c4.Person A person represents one of the human users of your software system (e.g. actors, roles, personas, etc). Supertypes Node Attribute summary Attribute details external : EBoolean If true, the person is external to the system described by the architecture. In other words it is not part of the system, but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false  external : EBoolean If true, the person is external to the system described by the architecture. In other words it is not part of the system, but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false If true, the person is external to the system described by the architecture. In other words it is not part of the system, but belongs to the system context/surroundings. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"architecture/core/model/CompositeNode.html":{"path":"Architecture/Core/core/CompositeNode","action-uuid":"f344bf36-6768-4125-891a-8a70186d81d4","title":"CompositeNode","content":"org.nasdanika.architecture.core.CompositeNode Supertypes Node Reference summary Reference details children : ArchitectureElement* Type ArchitectureElement Cardinality 0..* Changeable true Derived false Key id  children : ArchitectureElement* Type ArchitectureElement Cardinality 0..* Changeable true Derived false Key id Type ArchitectureElement Cardinality 0..* Changeable true Derived false Key id"},"html/models/bootstrap/model/Color.html":{"path":"HTML/Models/Bootstrap/bootstrap/Color","action-uuid":"49623dd4-9a3d-481a-aee7-9f121de93fee","title":"Color","content":"org.nasdanika.html.bootstrap.Color Uses Alert Appearance Badge Border Button Item NavigationBar TableCell TableRow Text"},"html/models/bootstrap/model/Size.html":{"path":"HTML/Models/Bootstrap/bootstrap/Size","action-uuid":"e26f4537-7498-4f67-a196-22cb57fce478","title":"Size","content":"org.nasdanika.html.bootstrap.Size Uses Spacing"},"architecture/core/model/Relationship.html":{"path":"Architecture/Core/core/Relationship","action-uuid":"99ca3603-2c5d-48b3-9b54-f75d4736f9fc","title":"Relationship","content":"org.nasdanika.architecture.core.Relationship A relationship between two nodes. Relationships are contained by their source nodes and reference their targets using the target reference. Supertypes ArchitectureElement Subtypes Relationship Referrers Node Reference summary Reference details target : Node Relationship target. Type Node Cardinality 0..1 Changeable true Derived false Opposite incomingRelationships  target : Node Relationship target. Type Node Cardinality 0..1 Changeable true Derived false Opposite incomingRelationships Relationship target. Type Node Cardinality 0..1 Changeable true Derived false Opposite incomingRelationships"},"core/exec/model/Configurator.html":{"path":"Core/Exec/exec/Configurator","action-uuid":"fcf5c820-26cf-405e-83ba-f6d0019f3ffb","title":"Configurator","content":"org.nasdanika.exec.Configurator Configurator allows to inject additional properties to the context. Configured with a map with the following keys: properties - a map of properties to add to the the context. target - component to execute with the augmented context. Example exec-configurator:\n   target: \n     content-text: Hello, ${name} \n   properties: \n     name: \n       content-text: Extended ${name}\n In this example target is a text which is interpolated with context properties. Property name uses property name passed to the configurator context and shadows it. Supertypes ModelElement Reference summary Reference details properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false target : EObject Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false  properties : Property* A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false target : EObject Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false A map injected into the instance in the class case if the instance implements java.util.function.BiConsumer or in the service or property case if they implement SupplierFactory. If elements implement SupplierFactory then the supplier factory is used to produce value to be injected. Otherwise elements are injected AS-IS. Type Property Cardinality 0..* Changeable true Derived false Component to execute with the augmented context. Type EObject Cardinality 1 Changeable true Derived false"},"architecture/c4/model/CodeElement.html":{"path":"Architecture/C4 Model/c4/CodeElement","action-uuid":"321a025f-7e00-4da8-99a8-2915d0720a11","title":"CodeElement","content":"org.nasdanika.architecture.c4.CodeElement Classes, interfaces, objects, functions, database tables, etc Supertypes Node Referrers Module"},"core/exec/model/content/Filter.html":{"path":"Core/Exec/exec/content/Filter","action-uuid":"54ffa2f1-c32e-4fa4-a1fa-230180b200ed","title":"Filter","content":"org.nasdanika.exec.content.Filter Base class for filters which take an object, adapt to org.nasdanika.common.SupplierFactory, obtain a stream and produce another stream from it. Supertypes ModelElement Subtypes Base64 Interpolator Markdown Script Stylesheet Reference summary Reference details source : EObject Source to be filtered. The source is adapted to org.nasdanika.common.SupplierFactory. Type EObject Cardinality 1 Changeable true Derived false  source : EObject Source to be filtered. The source is adapted to org.nasdanika.common.SupplierFactory. Type EObject Cardinality 1 Changeable true Derived false Source to be filtered. The source is adapted to org.nasdanika.common.SupplierFactory. Type EObject Cardinality 1 Changeable true Derived false"},"architecture/cloud/azure/compute/model/KubernetesService.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Kubernetes Service","action-uuid":"00f8444f-30c5-4eb7-8890-454e7d5e1475","title":"Kubernetes Service","content":"org.nasdanika.architecture.cloud.azure.compute.KubernetesService Azure Kubernetes Service (AKS) offers the quickest way to start developing and deploying cloud-native apps in Azure, datacenters, or at the edge with built-in code-to-cloud pipelines and guardrails. Get unified management and governance for on-premises, edge, and multicloud Kubernetes clusters. Supertypes VirtualNetworkResource Cluster"},"core/ncore/model/IntegerProperty.html":{"path":"Core/Ncore/ncore/IntegerProperty","action-uuid":"7540145b-579f-42fe-b84c-d4ebcf3d287b","title":"IntegerProperty","content":"org.nasdanika.ncore.IntegerProperty A named/keyed integer. Supertypes Property Integer"},"core/ncore/model/MapProperty.html":{"path":"Core/Ncore/ncore/MapProperty","action-uuid":"fc1a5bf1-5a7a-45f4-89a1-510891e77bbb","title":"MapProperty","content":"org.nasdanika.ncore.MapProperty A named/keyed map. Supertypes Property Map"},"architecture/core/model/ImpactType.html":{"path":"Architecture/Core/core/ImpactType","action-uuid":"86b2c7b3-5018-4426-92d7-b410e78f9bb2","title":"ImpactType","content":"org.nasdanika.architecture.core.ImpactType Impact type. E.g. add, modify, delete. Impacts may also be quantitative. E.g. an impact might be increase or decrease in capacity - load, storage, &hellip; Supertypes ModelElement Referrers Impact"},"core/exec/model/content/Text.html":{"path":"Core/Exec/exec/content/Text","action-uuid":"fc24c06f-2ac1-4070-bcf3-bfb4f11eeb00","title":"Text","content":"org.nasdanika.exec.content.Text Text content defined in YAML. Examples Full definition content-text:\n   description: Full text definition\n   interpolate: false\n   content: Hello ${token}.\n Short definition Just content (default feature): Single line content-text: World\n Multi-line content-text: |+2\n  Line 1.\n  Line 2.\n Supertypes ModelElement Attribute summary Attribute details content : EString Text content. Type EString Cardinality 1 Changeable true Derived false interpolate : EBoolean If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false  content : EString Text content. Type EString Cardinality 1 Changeable true Derived false interpolate : EBoolean If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false Text content. Type EString Cardinality 1 Changeable true Derived false If true (default), content is interpolated. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/ListProperty.html":{"path":"Core/Ncore/ncore/ListProperty","action-uuid":"47757ac5-9dd2-4a11-8761-f17ccffc313e","title":"ListProperty","content":"org.nasdanika.ncore.ListProperty A named/keyed list. Supertypes Property List"},"html/models/app/model/Header.html":{"path":"HTML/Models/App/app/Header","action-uuid":"9be6f6fd-8c46-448d-b88e-b85f1eae4376","title":"Header","content":"org.nasdanika.html.model.app.Header Page header has a title on the left and a navigation bar on the right. Supertypes PagePart Referrers Page Reference summary Reference details title : Label Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false  title : Label Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false Header title displayed on the left. Type Label Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Navs.html":{"path":"HTML/Models/Bootstrap/bootstrap/Navs","action-uuid":"be1b0fab-f053-457f-ac17-280aa6aa566d","title":"Navs","content":"org.nasdanika.html.model.bootstrap.Navs"},"architecture/c4/model/package-summary.html":{"path":"Architecture/C4 Model/c4","action-uuid":"eb15cb9b-9469-485c-a601-8915eeb45e7a","title":"c4","content":"urn:org.nasdanika.architecture.c4 Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"architecture/cloud/azure/networking/model/package-summary.html":{"path":"Architecture/Cloud/Azure/Networking/networking","action-uuid":"cc002765-829d-4296-8eb2-5dddecdd1610","title":"networking","content":"urn:org.nasdanika.architecture.cloud.azure.networking Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"core/exec/model/resources/File.html":{"path":"Core/Exec/exec/resources/File","action-uuid":"726174a9-7744-4663-b79c-d00cfd345cff","title":"File","content":"org.nasdanika.exec.resources.File File is a named container of binary contents (bytes) which can be set and retrieved as an input stream. Example resources-container:\n  name: my-container\n  contents:\n    - resources-file:\n        name: my-file.txt\n        contents:\n          content-text: Hello, World!\n Supertypes Resource Uses Container"},"core/ncore/model/RepresentationEntry.html":{"path":"Core/Ncore/ncore/RepresentationEntry","action-uuid":"37ae87a4-211d-40ff-b01f-c79efa38c5c7","title":"RepresentationEntry","content":"java.util.Map.Entry Mapping of representation key to a representation resource uri. Null values are supported to suppress inherited entries. Referrers ModelElement Attribute summary Attribute details key : EString Representation key. Type EString Cardinality 1 Changeable true Derived false value : EString Representation resource URI. E.g. and URI of a Drawio diagram. Type EString Cardinality 0..1 Changeable true Derived false  key : EString Representation key. Type EString Cardinality 1 Changeable true Derived false value : EString Representation resource URI. E.g. and URI of a Drawio diagram. Type EString Cardinality 0..1 Changeable true Derived false Representation key. Type EString Cardinality 1 Changeable true Derived false Representation resource URI. E.g. and URI of a Drawio diagram. Type EString Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/core/model/Location.html":{"path":"Architecture/Cloud/Azure/Core/core/Location","action-uuid":"f308a016-5eab-4966-8339-22b323b9a56d","title":"Location","content":"org.nasdanika.architecture.cloud.azure.core.Location A base class for Region and Availability Zone to associate with resource. Some resources may be deployed to multiple locations. Supertypes AzureElement Subtypes Availability Zone Region Referrers Resource"},"architecture/cloud/azure/core/model/Subscription.html":{"path":"Architecture/Cloud/Azure/Core/core/Subscription","action-uuid":"60da74ae-96cf-4d46-b4fd-5fed7dff440c","title":"Subscription","content":"org.nasdanika.architecture.cloud.azure.core.Subscription Subscription is a container of Resource Groups, which in turn contain Resources. Subscription is a billing unit. Supertypes ManagementGroupElement Reference summary Reference details resourceGroups : Resource Group* Type Resource Group Cardinality 0..* Changeable true Derived false Key id  resourceGroups : Resource Group* Type Resource Group Cardinality 0..* Changeable true Derived false Key id Type Resource Group Cardinality 0..* Changeable true Derived false Key id"},"html/models/html/model/HtmlElement.html":{"path":"HTML/Models/HTML/html/HtmlElement","action-uuid":"f9f836f0-0076-4c93-85c7-44832fb43257","title":"HtmlElement","content":"org.nasdanika.html.model.html.HtmlElement Base class for other HTML and bootstrap elements. Supertypes ModelElement Subtypes BootstrapElement Tag Reference summary Reference details attributes : Property* Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false  attributes : Property* Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false content : EObject* Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false Tag attributes. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false Container content. Content elements are adapted to org.nasdanika.common.SupplierFactory for generation of HTML content. Type EObject Cardinality 0..* Changeable true Derived false"},"core/exec/model/Property.html":{"path":"Core/Exec/exec/Property","action-uuid":"2176a398-67c0-4a5b-b0f5-c207c3dfc008","title":"Property","content":"java.util.Map.Entry Property is a map entry. Referrers Appearance Call Configurator Eval HtmlElement Map Attribute summary Reference summary Attribute details key : EString Type EString Cardinality 1 Changeable true Derived false Reference details value : EObject Type EObject Cardinality 1 Changeable true Derived false   key : EString Type EString Cardinality 1 Changeable true Derived false Type EString Cardinality 1 Changeable true Derived false value : EObject Type EObject Cardinality 1 Changeable true Derived false Type EObject Cardinality 1 Changeable true Derived false"},"architecture/core/model/Viewpoint.html":{"path":"Architecture/Core/core/Viewpoint","action-uuid":"19d415b9-d82a-41dd-be21-a67be715faea","title":"Viewpoint","content":"org.nasdanika.architecture.core.Viewpoint A type of view - a specification of the conventions for a particular kind of view, a meta-view. Supertypes ModelElement Referrers Concern View Reference summary Reference details concerns : Concern* Concerns framed by this viewpoint Type Concern Cardinality 0..* Changeable true Derived false Key id instances : View* Views of this type. A computed opposite to View.viewpoint Type View Cardinality 0..* Changeable false Derived true Opposite viewpoint  concerns : Concern* Concerns framed by this viewpoint Type Concern Cardinality 0..* Changeable true Derived false Key id instances : View* Views of this type. A computed opposite to View.viewpoint Type View Cardinality 0..* Changeable false Derived true Opposite viewpoint Concerns framed by this viewpoint Type Concern Cardinality 0..* Changeable true Derived false Key id Views of this type. A computed opposite to View.viewpoint Type View Cardinality 0..* Changeable false Derived true Opposite viewpoint"},"core/ncore/model/Composite.html":{"path":"Core/Ncore/ncore/Composite","action-uuid":"2f01a239-5833-487f-a2e4-1cbbed8438af","title":"Composite","content":"org.nasdanika.ncore.Composite A simple class for building hierarchies of documented entities. Supertypes NamedElement Documented Referrers Composite Attribute summary Reference summary Attribute details id : EString A unique identifier of this composite among its siblings. Type EString Cardinality 0..1 Changeable true Derived false Reference details children : Composite* Composite&rsquo;s children. Type Composite Cardinality 0..* Changeable true Derived false Key id   id : EString A unique identifier of this composite among its siblings. Type EString Cardinality 0..1 Changeable true Derived false A unique identifier of this composite among its siblings. Type EString Cardinality 0..1 Changeable true Derived false children : Composite* Composite&rsquo;s children. Type Composite Cardinality 0..* Changeable true Derived false Key id Composite&rsquo;s children. Type Composite Cardinality 0..* Changeable true Derived false Key id"},"support.html":{"action-uuid":"cde63075-ea70-4e7c-9b4d-ffbea5e7fc34","title":"Support","content":"Please use GitHub discussions to ask questions and issues to report bugs and propose features. Discussions: Core HTML Engineering Issues: Core HTML Engineering"},"core/exec/model/package-summary.html":{"path":"Core/Exec/exec","action-uuid":"fb5d45ba-71e3-419d-bd5a-913be7f44f1b","title":"exec","content":"urn:org.nasdanika.exec Nasdanika Core Exec model classes can be used to create models for generation of resources such as files and their content. Exec models can be used on their own or in other models. For example, markdown can be used as a documentation source for flow package elements. Classifier link test: ${classifier/Activity@urn:org.nasdanika.flow}. Maven dependency To use the Exec model and the generation adapters in the Maven environment search for the latest version on Maven Central and copy/paste a dependency declaration to the pom.xml. Example as of the time of writing: &lt;dependency&gt;\n  &lt;groupId&gt;org.nasdanika.core&lt;/groupId&gt;\n  &lt;artifactId&gt;exec-gen&lt;/artifactId&gt;\n  &lt;version&gt;2022.2.0&lt;/version&gt;\n&lt;/dependency&gt;\n Java code Suppliers To load and execute content components which implement org.nasdanika.common.SupplierFactory from a YAML resource use code like this: import static org.assertj.core.api.Assertions.assertThat;\n\nimport java.io.InputStream;\nimport java.util.Objects;\nimport java.util.function.Consumer;\n\nimport org.eclipse.emf.common.util.URI;\nimport org.eclipse.emf.ecore.EObject;\nimport org.junit.Test;\nimport org.nasdanika.common.Context;\nimport org.nasdanika.common.DefaultConverter;\nimport org.nasdanika.common.Diagnostic;\nimport org.nasdanika.common.DiagnosticException;\nimport org.nasdanika.common.PrintStreamProgressMonitor;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.common.Status;\nimport org.nasdanika.common.SupplierFactory;\nimport org.nasdanika.common.Util;\nimport org.nasdanika.emf.EObjectAdaptable;\nimport org.nasdanika.exec.gen.ExecGenYamlSupplier;\nimport org.nasdanika.exec.gen.tests.TestBase;\n\n...\n\ntry (ProgressMonitor progressMonitor = new PrintStreamProgressMonitor()) {\n\tContext context = Context.singleton(&quot;token&quot;, &quot;World&quot;); // Context for token expansion\n\tURI resourceURI = URI.createURI(getClass().getResource(&quot;text/text.yml&quot;).toString()); // URI to load YAML resource from\t\t\n\ttry {\n\t\t// Diagnostic consumer to pass to Util.call\n\t\tConsumer&lt;Diagnostic&gt; diagnosticConsumer = diagnostic -&gt; {\n\t\t\tassertThat(diagnostic.getStatus()).isEqualTo(Status.SUCCESS);\n\t\t};\n\n\t\t// Loading EObject with Util.call() which goes through the ExecutionParticipant lifecycle - diagnose(), execute(), commit()/rollback(), close()\n\t\tEObject eObject = Objects.requireNonNull(Util.call(new ExecGenYamlSupplier(resourceURI, context), progressMonitor, diagnosticConsumer), &quot;Loaded null from &quot; + resourceURI);\n\n\t\t// Adapting loaded EObject to SupplierFactory\n\t\tSupplierFactory&lt;InputStream&gt; supplierFactory = Objects.requireNonNull(EObjectAdaptable.adaptToSupplierFactory(eObject, InputStream.class), &quot;Cannot adapt to SupplierFactory&quot;);\n\t\t\n\t\t// Calling the supplier factory to get InputStream\n\t\tInputStream in = Util.call(supplierFactory.create(context), progressMonitor, diagnosticConsumer);\n\t\t\n\t\t// Assertions\n\t\tassertThat(in).isNotNull();\n\t\tassertThat(DefaultConverter.INSTANCE.toString(in)).isEqualTo(&quot;Hello World.&quot;);\n\t} catch (DiagnosticException e) {\n\t\t// Dumping diagnostic in case of DiagnosticException which is thrown if diagnostic status is FAIL\n\t\tSystem.err.println(&quot;******************************&quot;);\n\t\tSystem.err.println(&quot;*      Diagnostic failed     *&quot;);\n\t\tSystem.err.println(&quot;******************************&quot;);\n\t\te.getDiagnostic().dump(System.err, 4, Status.FAIL);\n\t\tthrow e;\n\t}\t\t\n}\t\t\n Consumers TODO To load and execute resource components which implement org.nasdanika.common.ConsumerFactory&lt;org.nasdanika.common.resources.BinaryEntityContainer&gt; from a YAML resource use code like this: import org.nasdanika.common.Context;\nimport org.nasdanika.common.persistence.ObjectLoader;\nimport org.nasdanika.common.PrintStreamProgressMonitor;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.common.Consumer;\nimport org.nasdanika.common.ConsumerFactory;\nimport org.nasdanika.common.Util;\nimport org.nasdanika.exec.Loader;\nimport org.yaml.snakeyaml.Yaml;\n\n...\nObjectLoader loader = new Loader();\nProgressMonitor monitor = new PrintStreamProgressMonitor(System.out, 0, 4, false);\nObject container = loader.loadYaml(specURL, monitor);\n\t\t\nFile outDir = new File(&quot;target&quot; + File.separator + &quot;test-output&quot;);\noutDir.mkdirs();\nContext context = Context.EMPTY_CONTEXT;\t\t\nFileSystemContainer out = new FileSystemContainer(outDir);\ncallConsumer(context, monitor, container, out);\t\t\n Commands TODO Solution instantiation Solution instantiation is a form of transformation of one or more models into a &ldquo;solution&rdquo;, e.g. a cloud application or a documentation site. Code generation is an example of solution instantiation and may be a part of solution instantiation. This section explains an approach which allows parallel evolution of the source models and the generated/instantiated solution with ability to re-instantiate a solution from the model preserving the changes made in the instantiated solution after it was instantiated. For example, manual edits in source files. Creating a solution instantiator requires effort and as such there is a break-even point between instantiating solutions manually and building an automated solution instantiator to instantiate them repeatedly. In other words, solution instantiators shall be used to instantiate &ldquo;sibling&rdquo; solutions aiming to solve &ldquo;commonly occuring problems&rdquo;, that is - instantiate patterns. Steps Pattern Define and publish a pattern. Pattern documentation shall specify &ldquo;variation points&rdquo; - what can be different between different instances. E.g. cache or database or a number of replicas. Patterns shall be defined by subject matter experts. For example a cloud solution pattern shall be defined by people with a deep experience with cloud technologies, e.g. a cloud architecture group. A pattern may be elicited from one or more one-off solutions with a significant overlap in functionality. A published pattern has a value on its own without a solution instantiatior. An instantiator may be created at a later point of time once the pattern has demonstrated its usefulness. The pattern shall be treated as a product with releases and release numbers. It may be stored in a version control system. Reference implementation(s) Build a reference implementation demonstrating that the pattern &ldquo;holds water&rdquo;. The reference implementation doesn&rsquo;t have to externalize the variation points, but it shall document them. There might be several reference implementations for a single pattern demonstrating different combinations of variation points. A reference implementation shall also be built and maintained by subject matter experts, not necessarily the same people who created the pattern1, e.g. cloud developers. As well as a pattern a reference implementation shall be treated as a product with releases and release numbers which can include pattern release numbers. There might be several releases of a reference implementation per pattern release. Documentation for reference implementations may be &ldquo;mounted&rdquo; under the pattern documentation so it is easy to find. Instantiation and Configuration models Once a reference implementation is published it can be converted into two models. Instantiation model Instantiation model is created with Nasdanika Exec and reflects the constant part of the reference implementation which is parameterized by the configuration model. Additional execution participants can be created as needed. Such participants may leverage existing generation solutions, e.g. Spring Initializr - out of the box or customized to organization&rsquo;s needs. Nasdanika Execution Model supports rollbacks, which can be important for instantiation of complex solutions where one of instantiation steps may fail - in this case the instantiator will clean up after itself. Configuration model The configuration model contains variation points. It may be quite involved with conditional logic and validations, e.g. lookups in internal registries. It is also likely that different parts of the configuration model would have to be populated by different roles within the organization with different authorities. In this case the model may leverage some kind of signing or authentication tokens/permits which can be validated at the instantiation time. Such permits may have an expiration date. Configuration models may be stored in different formats and edited in a variety of ways. One way to create a configuration model is to use Eclipse EMF and one way to load the model is from YAML using Nasdanika Core EMF. If a configuration model is stored in YAML in Git one way to validate authority at the instantiation time is to check who&rsquo;s committed a particular configuration file or changed a particular line of code (using blame). In this case, for example, if a developer modifies a configuration element which is supposed to be modified by an architect the instantiation will fail. Instantiate The instantiation process will: Load and validate the instantiation model. Load and validate the configuration model. Execute the instantiation flow as explained in the &ldquo;Nasdanika Execution Model&rdquo; mentioned above: Diagnose Execute Commit or Rollback Close The instantiation process (or some of its parts) can be tested using the reference implementation(s) - given a specific input it shall produce the same resources as in the reference implementation. Example A web wizard is used to collect user input to create a new cloud application. The input collecting application creates a request YAML file and pushes it to a Git repository. An automated build job is triggered by the push. It inspects the commit message and starts the instantiation process passing the configuration YAML to it is as input. The process: Creates Git repositories. Generates code and pushes to the repositories. Creates build jobs and triggers a build to the development environment. Evolution Once a solution is instantiated there are three parts which may evolve independently: The instantiation model - there might be a new release of the underlying pattern or reference implementation and the model may get updated. The configuration model, e.g. it might be decided to use a different caching solution. The instantiated solution - developers will modify the generated code to implement business functionality. The solution instantiator merges the changes in the three &ldquo;evolution streams&rdquo; as explained below. It re-executes the instantiation process. For every resource (file, repository, database) the instantiation model would specify a Reconcile Action - what to do if the resource already exists. In case of Merge the instantiator would do the following: Check if the resource was modified since the last instantiation. For version-controlled files one way to do it is to use jGit and see who last committed the file. If the committer ID is the same ID which is used for instantiation that would mean that the file was not touched and can be overwritten. If the resource was modified use a merger applicable for the resource format. For Java resources there is JMerge which detects manual changes using @generated JavaDoc tags - it overwrites only classes and members with such tag present. Other file resources can be merged using a 3-way patch in a version-controlled environment, which is2: Find the previous generated revision - go through the commit history, find a commit done by the generator ID. Another option is use a comment convention, e.g. look for something like Generated by &lt;Generator Maven coordinates&gt;. Do a diff between the previous and the newly generated code and create a patch. There are Java libraries to do diff/patch for text files and for formats such as JSON and XML. If there is no difference do nothing - keep the current revision as it is. Otherwise apply the patch to the current revision. The re-instantiation process can be performed automatically on Git push, similarly to how the first instantiation happens. In fact, it will be the same process with no pre-existing resources for the first instantiation. One variation of a reconcile action for Git repositories may be &ldquo;create a branch&rdquo; - the instantiator would not commit changes to the same branch, but would create another branch. Then a build may be triggered off that branch and if it is successful and all tests pass then the branch maybe merged into the original branch or a pull request may be created. If the build fails, then the development team would be notified to review and fix problems caused by a merge. Value proposition Developers are inherently better at writing code than documentation - they wouldn&rsquo;t be developers but rather technical writers otherwise. With a well-established solution instantiation practice it might be easier and faster for developers to create solution instantiators than to create a detailed documentation for reference implementations. Instantiators are code and can be tested faster and cheaper than documentation. Solution instantiators shall produce the same result when given the same input. It is not always true for people. Extensibility - there might be &ldquo;base&rdquo; instantiators which define extension points to allow customization. It may be leveraged in a large organization where a central team produces such &ldquo;base&rdquo; instantiators and then business line/department teams customize them to their needs. The same approach can be applied to configuration models using template/prototype chains - a config model can define template/prototype or multiple templates/prototypes similar to how docker images define base image using FROM. Or necessarily not the same people to prove that the pattern can be instantiated based on the published documentation. ? This is one option. Another option is to diff/patch between the previously generated and the current revision and then apply the patch to the newly generated content. ?"},"core/ncore/model/BooleanEntry.html":{"path":"Core/Ncore/ncore/BooleanEntry","action-uuid":"d29786af-5994-4fc9-a80d-51b60fba3f62","title":"BooleanEntry","content":"java.util.Map.Entry EMap entry with boolean value Attribute summary Attribute details key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EBoolean Entry value. Type EBoolean Cardinality 0..1 Changeable true Derived false  key : EString Entry key. Type EString Cardinality 1 Changeable true Derived false value : EBoolean Entry value. Type EBoolean Cardinality 0..1 Changeable true Derived false Entry key. Type EString Cardinality 1 Changeable true Derived false Entry value. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"architecture/containers/kubernetes/model/package-summary.html":{"path":"Architecture/Containers/Kubernetes/kubernetes","action-uuid":"22325922-ad3c-4edc-9f05-d172bbdf8e78","title":"kubernetes","content":"urn:org.nasdanika.architecture.containers.kubernetes Nasdanika Architecture C4 Model contains classes as explained in the metamodel section of the C4 Model home page. C4 Model classes extend ArchitectureElement and as such inherit temporal aspects - start, end, increments, events. This model extends the C4 metamodel by: Supporting nesting of systems - a system may have sub-systems organized in domains. Introducing a concept of a Module - a building block of a component. Modules can be nested. Introducing Technology and TechnologyVersion."},"architecture/containers/helm/model/Chart.html":{"path":"Architecture/Containers/Helm/helm/Chart","action-uuid":"3ad5043e-e321-4d3d-ab82-5239a90fe60a","title":"Chart","content":"org.nasdanika.architecture.containers.helm.Chart"},"html/models/bootstrap/model/Column.html":{"path":"HTML/Models/Bootstrap/bootstrap/Column","action-uuid":"d4097635-af6a-46c6-a0ac-42e7686710b5","title":"Column","content":"org.nasdanika.html.model.bootstrap.Column Container row column. Supertypes BootstrapElement Referrers Row Reference summary Reference details width : ColumnWidth* Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false  width : ColumnWidth* Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false Column widths for different breakpoints. Type ColumnWidth Cardinality 0..* Changeable true Derived false"},"html/models/app/model/Label.html":{"path":"HTML/Models/App/app/Label","action-uuid":"fe810cfb-e602-4eb3-9aba-6f4868fecdf7","title":"Label","content":"org.nasdanika.html.model.app.Label Label is a text and an icon with a tooltip, notification badge, and help dialog. Labels can have children. Label is a base class for Link. Supertypes BootstrapElement Item Subtypes Link Referrers ContentPanel Header Label NavigationBar Attribute summary Reference summary Attribute details icon : EString Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false id : EString Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false notification : EString Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false outline : EBoolean For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false text : EString Label text. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false Reference details children : EObject* Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false decorator : Label Decorator label or link. If present, is rendered next to the containing label. For example, a help icon with a tooltip, link, or modal. Type Label Cardinality 0..1 Changeable true Derived false   icon : EString Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false id : EString Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false notification : EString Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false outline : EBoolean For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false text : EString Label text. Type EString Cardinality 0..1 Changeable true Derived false tooltip : EString Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false Label icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. Type EString Cardinality 0..1 Changeable true Derived false Unique label ID, autogenerated by default. Type EString Cardinality 0..1 Changeable true Derived false Notification to display next to the label. E.g. a number of new messages in an inbox. Type EString Cardinality 0..1 Changeable true Derived false For some label representations specifies that the label shall be displayed as an outline instead of a solid fill. Type EBoolean Cardinality 0..1 Changeable true Derived false Label text. Type EString Cardinality 0..1 Changeable true Derived false Label tooltip. Type EString Cardinality 0..1 Changeable true Derived false children : EObject* Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false decorator : Label Decorator label or link. If present, is rendered next to the containing label. For example, a help icon with a tooltip, link, or modal. Type Label Cardinality 0..1 Changeable true Derived false Label children to build UI elements like trees, lists, navigation bars and drop-downs. Type EObject Cardinality 0..* Changeable true Derived false Decorator label or link. If present, is rendered next to the containing label. For example, a help icon with a tooltip, link, or modal. Type Label Cardinality 0..1 Changeable true Derived false"},"html/models/app/model/NavigationPanel.html":{"path":"HTML/Models/App/app/NavigationPanel","action-uuid":"4ebb7e85-5bb8-4764-bca0-d7795773f020","title":"NavigationPanel","content":"org.nasdanika.html.model.app.NavigationPanel Navigation panel contains navigation items. Supports several styles. Supertypes PagePart Referrers Action ContentPanel Page Attribute summary Attribute details collapsible : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false id : EString ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false jsTreeSearchThreshold : EInt Minimal number of tree nodes to show a search text input. Default is 0 - search is always shown. Type EInt Cardinality 0..1 Changeable true Derived false labelTrimLength : EInt Type EInt Cardinality 0..1 Changeable true Derived false style : NavigationPanelStyle Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false  collapsible : EBoolean Type EBoolean Cardinality 0..1 Changeable true Derived false id : EString ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false jsTreeSearchThreshold : EInt Minimal number of tree nodes to show a search text input. Default is 0 - search is always shown. Type EInt Cardinality 0..1 Changeable true Derived false labelTrimLength : EInt Type EInt Cardinality 0..1 Changeable true Derived false style : NavigationPanelStyle Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false Type EBoolean Cardinality 0..1 Changeable true Derived false ID for jsTree to store state between pages, e.g. expaned nodes. Type EString Cardinality 0..1 Changeable true Derived false Minimal number of tree nodes to show a search text input. Default is 0 - search is always shown. Type EInt Cardinality 0..1 Changeable true Derived false Type EInt Cardinality 0..1 Changeable true Derived false Panel style Type NavigationPanelStyle Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/Temporal.html":{"path":"Core/Ncore/ncore/Temporal","action-uuid":"677362b8-3193-41d4-ac41-923f875fe2bf","title":"Temporal","content":"org.nasdanika.ncore.Temporal Temporal represents a point on the time-line - absolute (instant) or relative to another temporal (base and offset). Supertypes ModelElement Subtypes Event Referrers Period Temporal Uses Temporal Attribute summary Reference summary Attribute details instant : Instant An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false offset : Duration Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false Reference details base : Temporal Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives derivatives : Temporal* Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base lowerBounds : Temporal* Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false upperBounds : Temporal* Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Operations after : EBooleanObject Tests if this temporal is after the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 before : EBooleanObject Tests if this temporal is before the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 coincides : EBooleanObject Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 copy : Temporal Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 minus : Duration Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, i.e. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 minus : Temporal Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 normalize : Temporal Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain from a temporal to its base to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and the offset would be the sum of all offsets. Type Temporal Cardinality 0..1 plus : Temporal Returns a temporal based on this one offset by the argument duration. Duration can be null - in this case it is treated as zero. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1   instant : Instant An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false offset : Duration Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false An absolute point on the time-line. E.g. 2021/07/04. Type Instant Cardinality 0..1 Changeable true Derived false Time offset from the base in ISO-8601 durations format. Examples: P1H for one hour later. -P20D or P-20D for 20 days before. Can be null (zero), e.g. if one period starts right after another period ends. Type Duration Cardinality 0..1 Changeable true Derived false base : Temporal Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives derivatives : Temporal* Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base lowerBounds : Temporal* Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false upperBounds : Temporal* Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Base of this temporal. Type Temporal Cardinality 0..1 Changeable true Derived false Opposite derivatives Temporals which are based on this temporal. Type Temporal Cardinality 0..* Changeable true Derived true Opposite base Lower bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be before than some other temporal - a lower bound. Lower bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false Upper bounds of a temporal. E.g. exact time of some temporal might not be known at a moment, but it might be known that it should not be after some other temporal - an upper bound. Upper bounds are used in validations and before/after computations. Type Temporal Cardinality 0..* Changeable true Derived false after : EBooleanObject Tests if this temporal is after the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 before : EBooleanObject Tests if this temporal is before the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 coincides : EBooleanObject Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 copy : Temporal Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 minus : Duration Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, i.e. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 minus : Temporal Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 normalize : Temporal Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain from a temporal to its base to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and the offset would be the sum of all offsets. Type Temporal Cardinality 0..1 plus : Temporal Returns a temporal based on this one offset by the argument duration. Duration can be null - in this case it is treated as zero. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 Tests if this temporal is after the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Tests if this temporal is before the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Tests if this temporal occurs at the same point on the time-line as the specified temporal. Returns null if unknown, i.e. two unrelated points in time. Type EBooleanObject Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Returns a deep copy of self with bounds copied. Other containment references are not set. Type Temporal Cardinality 0..1 Returns duration difference between this temporal and the argument temporal - how much this temporal is after the argument on the time-line, if difference can be computed, i.e. both this temporal and the argument temporal are instant or trace to the same base temporal. Returns null otherwise. Type Duration Cardinality 0..1 Parameters when : Temporal Type Temporal Cardinality 0..1 when : Temporal Type Temporal Cardinality 0..1 Type Temporal Cardinality 0..1 Returns a temporal based on this one offset by negation of the argument duration. Null duration is treated as zero and set as-is (not negated). Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 offset : Duration Type Duration Cardinality 0..1 Type Duration Cardinality 0..1 Returns a normalized instance of this temporal not contained in the model. Normalization walks through the temporal chain from a temporal to its base to the root temporal. If that root temporal is instant/absolute then the normalized instance would be instant/absolute. Otherwise the normalized instance would contain the root temporal as its base and the offset would be the sum of all offsets. Type Temporal Cardinality 0..1 Returns a temporal based on this one offset by the argument duration. Duration can be null - in this case it is treated as zero. Type Temporal Cardinality 0..1 Parameters offset : Duration Type Duration Cardinality 0..1 offset : Duration Type Duration Cardinality 0..1 Type Duration Cardinality 0..1"},"html/models/bootstrap/model/Row.html":{"path":"HTML/Models/Bootstrap/bootstrap/Row","action-uuid":"bfb45420-c429-4c2b-8335-2c77217eb82d","title":"Row","content":"org.nasdanika.html.model.bootstrap.Row Container rows Supertypes BootstrapElement Referrers Container Reference summary Reference details columns : Column* Row columns. Type Column Cardinality 0..* Changeable true Derived false  columns : Column* Row columns. Type Column Cardinality 0..* Changeable true Derived false Row columns. Type Column Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/TextWeight.html":{"path":"HTML/Models/Bootstrap/bootstrap/TextWeight","action-uuid":"cf2e3f44-3dd1-4e05-abcc-c93b5e31481e","title":"TextWeight","content":"org.nasdanika.html.bootstrap.Text.Weight Uses Text"},"architecture/core/model/package-summary.html":{"path":"Architecture/Core/core","action-uuid":"3eb6fafa-9ae8-4bc7-af9e-a5d873687053","title":"core","content":"urn:org.nasdanika.architecture.core Nasdanika Architecture core model contains definitions of the following concepts: Architecture Element - base class for elements of architecture. Domain - a grouping of architecture elements. Architecture description, the root element of an architecture model can be represented by a domain. Increment - a transition of an architecture element from one state (baseline) to another (target). Event - a named, documented point in time with an ID. The point in time can be absolute or relative to another event."},"architecture/containers/docker/model/Registry.html":{"path":"Architecture/Containers/Docker/docker/Registry","action-uuid":"2df85e76-2b6f-41b6-83ba-4c2d4ce1eba5","title":"Registry","content":"org.nasdanika.architecture.containers.docker.Registry Supertypes ArchitectureElement Referrers Image Reference summary Reference details images : Image* Type Image Cardinality 0..* Changeable true Derived false Opposite registries  images : Image* Type Image Cardinality 0..* Changeable true Derived false Opposite registries Type Image Cardinality 0..* Changeable true Derived false Opposite registries"},"html/models/html/model/Stylesheet.html":{"path":"HTML/Models/HTML/html/Stylesheet","action-uuid":"79c5dece-a165-4e54-8659-dce27cb35b25","title":"Stylesheet","content":"org.nasdanika.html.model.html.Stylesheet CSS stylesheet with code stored in the model element code attribute. Supertypes Filter"},"html/models/bootstrap/model/TableRow.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableRow","action-uuid":"ca18d2d9-0cad-495d-9165-f7384e28dc80","title":"TableRow","content":"org.nasdanika.html.model.bootstrap.TableRow Table row. Supertypes BootstrapElement Referrers TableRowContainer Attribute summary Reference summary Attribute details background : Color Row background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false color : Color Row color. Type Color Cardinality 0..1 Changeable true Derived false Reference details cells : TableCell* Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false   background : Color Row background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false color : Color Row color. Type Color Cardinality 0..1 Changeable true Derived false Row background color. Displays differently from &ldquo;Color&rdquo;. Can also be specified via appearance. Type Color Cardinality 0..1 Changeable true Derived false Row color. Type Color Cardinality 0..1 Changeable true Derived false cells : TableCell* Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false Table row cells. Type TableCell Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/Text.html":{"path":"HTML/Models/Bootstrap/bootstrap/Text","action-uuid":"bad6d639-8f92-4f93-8c81-0a2d2f8bcffc","title":"Text","content":"org.nasdanika.html.model.bootstrap.Text Text styling. Referrers Appearance Attribute summary Attribute details alignment : TextAlignment Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false color : Color Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false italic : EBoolean Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false monospace : EBoolean Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false nowrap : EBoolean Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false transform : TextTransform Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false truncate : EBoolean Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : TextWeight Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false  alignment : TextAlignment Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false color : Color Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false italic : EBoolean Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false monospace : EBoolean Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false nowrap : EBoolean Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false transform : TextTransform Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false truncate : EBoolean Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false weight : TextWeight Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false Text alignment. Type TextAlignment Cardinality 0..1 Changeable true Derived false Text bootstrap color. Type Color Cardinality 0..1 Changeable true Derived false Italic flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Monospace flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Prevents text from wrapping. Type EBoolean Cardinality 0..1 Changeable true Derived false Text case transformation. Type TextTransform Cardinality 0..1 Changeable true Derived false Use to truncate the text with an ellipsis. Type EBoolean Cardinality 0..1 Changeable true Derived false Text weight. Type TextWeight Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/Integer.html":{"path":"Core/Ncore/ncore/Integer","action-uuid":"4a1af5c8-c124-42a2-9ee2-9628e5c40018","title":"Integer","content":"org.nasdanika.ncore.Integer Represents integer number. Subtypes IntegerProperty Attribute summary Attribute details value : EInt Value. Type EInt Cardinality 0..1 Changeable true Derived false  value : EInt Value. Type EInt Cardinality 0..1 Changeable true Derived false Value. Type EInt Cardinality 0..1 Changeable true Derived false"},"html/models/app/model/Action.html":{"path":"HTML/Models/App/app/Action","action-uuid":"e1010afd-c2f8-462d-8bad-eb48640b460e","title":"Action","content":"org.nasdanika.html.model.app.Action Actions form a hierarchy. Application pages are generated from actions. Supertypes Link Referrers Action Link Uses ActionReference Attribute summary Reference summary Attribute details inline : EBoolean Inline action&rsquo;s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false modalActivator : EBoolean Inline action&rsquo;s content is displayed in a modal dialog which opens on a click on the action&rsquo;s link. Type EBoolean Cardinality 0..1 Changeable true Derived false sectionColumns : EInt Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Reference details anonymous : Action* Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false navigation : EObject* Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false resources : Resource* Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false rightNavigation : NavigationPanel Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : Action* Actions which are generated into content sections. Id&rsquo;s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false Operations createLink : Link Creates a link pointing to this action and populated with action&rsquo;s text, icon, tooltip, and uuid attributes. Type Link Cardinality 1   inline : EBoolean Inline action&rsquo;s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false modalActivator : EBoolean Inline action&rsquo;s content is displayed in a modal dialog which opens on a click on the action&rsquo;s link. Type EBoolean Cardinality 0..1 Changeable true Derived false sectionColumns : EInt Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false sectionStyle : SectionStyle Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false Inline action&rsquo;s content is displayed instead of an action link in navigation panels. Type EBoolean Cardinality 0..1 Changeable true Derived false Inline action&rsquo;s content is displayed in a modal dialog which opens on a click on the action&rsquo;s link. Type EBoolean Cardinality 0..1 Changeable true Derived false Applicable to section style &ldquo;Card&rdquo;. Defines how many columns shall be in a row of section cards. Type EInt Cardinality 0..1 Changeable true Derived false Defines how to generate section children. Type SectionStyle Cardinality 0..1 Changeable true Derived false anonymous : Action* Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false floatLeftNavigation : NavigationPanel Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false floatRightNavigation : NavigationPanel Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false leftNavigation : NavigationPanel Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false navigation : EObject* Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false resources : Resource* Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false rightNavigation : NavigationPanel Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false sections : Action* Actions which are generated into content sections. Id&rsquo;s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false Actions which are not shown in the containing action UI, but for which pages are generated and can be explicitly referenced, e.g. from content. Type Action Cardinality 0..* Changeable true Derived false Float left navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Float right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Left navigation panel Type NavigationPanel Cardinality 0..1 Changeable true Derived false Navigation items are displayed in the footer the root action, in the navigation bar for the principal action, and in the content panel navigation bar for the active action. Type EObject Cardinality 0..* Changeable true Derived false Resources referenced by the page. Resource names are resolved relative to the page location. Type Resource Cardinality 0..* Changeable true Derived false Right navigation panel. Type NavigationPanel Cardinality 0..1 Changeable true Derived false Actions which are generated into content sections. Id&rsquo;s of section actions are used to create URL fragments. Type Action Cardinality 0..* Changeable true Derived false createLink : Link Creates a link pointing to this action and populated with action&rsquo;s text, icon, tooltip, and uuid attributes. Type Link Cardinality 1 Creates a link pointing to this action and populated with action&rsquo;s text, icon, tooltip, and uuid attributes. Type Link Cardinality 1"},"core/exec/model/Eval.html":{"path":"Core/Exec/exec/Eval","action-uuid":"7065242b-b6fb-4a25-b834-fd1370f5cb98","title":"Eval","content":"org.nasdanika.exec.Eval Evaluates JavaScript script. Example exec-eval:\n   script: \n     content-text: 3 * val \n   bindings: \n     val: \n       content-text: 33\n Supertypes ModelElement Reference summary Reference details bindings : Property* Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false script : EObject Script source Type EObject Cardinality 1 Changeable true Derived false  bindings : Property* Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false script : EObject Script source Type EObject Cardinality 1 Changeable true Derived false Script bindings. Context is available as context binding and progress monitor as progressMonitor binding. Type Property Cardinality 0..* Changeable true Derived false Script source Type EObject Cardinality 1 Changeable true Derived false"},"architecture/cloud/azure/networking/model/VirtualNetworkResource.html":{"path":"Architecture/Cloud/Azure/Networking/networking/VirtualNetworkResource","action-uuid":"bbd00cc1-5437-40a1-b7cf-c8a6941f0273","title":"VirtualNetworkResource","content":"org.nasdanika.architecture.cloud.azure.networking.VirtualNetworkResource Base class for resources connected to a Virtual Network Supertypes Resource Subtypes Kubernetes Service Referrers VirtualNetwork Reference summary Reference details virtualNetwork : VirtualNetwork Type VirtualNetwork Cardinality 0..1 Changeable true Derived false Opposite resources  virtualNetwork : VirtualNetwork Type VirtualNetwork Cardinality 0..1 Changeable true Derived false Opposite resources Type VirtualNetwork Cardinality 0..1 Changeable true Derived false Opposite resources"},"html/models/html/model/Tag.html":{"path":"HTML/Models/HTML/html/Tag","action-uuid":"af71f43e-5f55-4c76-a9cd-f77ddb6f0f99","title":"Tag","content":"org.nasdanika.html.model.html.Tag HTML Tag Supertypes HtmlElement Subtypes Tag Attribute summary Attribute details name : EString Tag name. Type EString Cardinality 0..1 Changeable true Derived false  name : EString Tag name. Type EString Cardinality 0..1 Changeable true Derived false Tag name. Type EString Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/TableConfiguration.html":{"path":"HTML/Models/Bootstrap/bootstrap/TableConfiguration","action-uuid":"7e358861-9949-4921-9e23-d87af2bd45d2","title":"TableConfiguration","content":"org.nasdanika.html.model.bootstrap.TableConfiguration Configuration of bootstrap table Subtypes Table Attribute summary Attribute details bordered : EBoolean Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false borderless : EBoolean Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false dark : EBoolean Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false hover : EBoolean If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false small : EBoolean Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false striped : EBoolean Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false  bordered : EBoolean Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false borderless : EBoolean Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false dark : EBoolean Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false hover : EBoolean If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false small : EBoolean Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false striped : EBoolean Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Bordered table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Borderless table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Dark table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false If checked, rows change background on mouse pointer hover. Type EBoolean Cardinality 0..1 Changeable true Derived false Small table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false Striped table flag. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/NamedElement.html":{"path":"Core/Ncore/ncore/NamedElement","action-uuid":"8678f1ca-952f-48e3-ad62-7a4b3a1229a4","title":"NamedElement","content":"org.nasdanika.ncore.NamedElement A model element with name. Supertypes ModelElement Subtypes Composite ModelElement Attribute summary Attribute details name : EString Element name. Type EString Cardinality 0..1 Changeable true Derived false  name : EString Element name. Type EString Cardinality 0..1 Changeable true Derived false Element name. Type EString Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/compute/model/package-summary.html":{"path":"Architecture/Cloud/Azure/Compute/compute","action-uuid":"a43a1aed-d3c3-44a8-916f-3ca59b1628ec","title":"compute","content":"urn:org.nasdanika.architecture.cloud.azure.compute Disk A block-level storage volume managed by Azure and used with Azure Virtual Machines Container Instance Azure Container Instances (ACI) allows you to quickly and easily run containers on Azure without managing servers or having to learn new tools Kubernetes Service Azure Kubernetes Service (AKS) offers the quickest way to start developing and deploying cloud-native apps in Azure, datacenters, or at the edge with built-in code-to-cloud pipelines and guardrails Virtual Machine Image Initial contents of a VM disk used to initialize a VM Virtual Machine Scale Set Azure virtual machine scale sets let you create and manage a group of identical, load balanced VMs. Virtual Machine An image service instance that provides on-demand and scalable computing resources with usage-based pricing App Service Azure App Service is an HTTP-based service for hosting web applications, REST APIs, and mobile back ends. You can develop in your favorite language, be it .NET, .NET Core, Java, Ruby, Node.js, PHP, or Python. Compute Network Interface Networking Cluster Kubernetes Container Docker"},"core/ncore/model/StringProperty.html":{"path":"Core/Ncore/ncore/StringProperty","action-uuid":"4c52ad02-8340-4de5-97d1-3f43ab4aecbb","title":"StringProperty","content":"org.nasdanika.ncore.StringProperty A named/keyed string. Supertypes Property String Referrers Resource"},"architecture/c4/model/TechnologyVersion.html":{"path":"Architecture/C4 Model/c4/TechnologyVersion","action-uuid":"a6e3a9ff-d877-428d-8be4-ced7581c35d7","title":"TechnologyVersion","content":"org.nasdanika.architecture.c4.TechnologyVersion Version of a technology product. E.g. Java 17, TOGAF 10, or HTML 5. Supertypes Technology Referrers TechnologyProduct"},"html/models/bootstrap/model/TextAlignment.html":{"path":"HTML/Models/Bootstrap/bootstrap/TextAlignment","action-uuid":"d6d9a127-7974-4fa5-8a49-0ab77347b1e0","title":"TextAlignment","content":"org.nasdanika.html.bootstrap.Text.Alignment Uses Text"},"core/ncore/model/IMarker.html":{"path":"Core/Ncore/ncore/IMarker","action-uuid":"80f110d7-e11e-4606-bd7f-ef5b185f902d","title":"IMarker","content":"org.nasdanika.persistence.Marker Subtypes Marker"},"html/models/html/model/StylesheetReference.html":{"path":"HTML/Models/HTML/html/StylesheetReference","action-uuid":"ee082575-6cfe-47ce-8dbd-fb68f1b0e73d","title":"StylesheetReference","content":"org.nasdanika.html.model.html.StylesheetReference Reference to an external stylesheet. Supertypes ModelElement Attribute summary Attribute details target : EString Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false  target : EString Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false Stylesheet URL. Type EString Cardinality 1 Changeable true Derived false"},"architecture/cloud/azure/compute/model/DiskType.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Disk Type","action-uuid":"e944867e-43cb-401a-a68f-7d7b688a2a0f","title":"Disk Type","content":"org.nasdanika.architecture.cloud.azure.compute.DiskType The available types of disks are ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For information about each individual disk type, see Select a disk type for IaaS VMs. Supertypes AzureElement Referrers Disk Reference summary Reference details disks : Disk* Computed opposite to Disk.type Type Disk Cardinality 0..* Changeable false Derived true  disks : Disk* Computed opposite to Disk.type Type Disk Cardinality 0..* Changeable false Derived true Computed opposite to Disk.type Type Disk Cardinality 0..* Changeable false Derived true"},"architecture/cloud/azure/compute/model/AppService.html":{"path":"Architecture/Cloud/Azure/Compute/compute/App Service","action-uuid":"6c966403-da30-44d2-b8ae-b5bf8e60fec6","title":"App Service","content":"org.nasdanika.architecture.cloud.azure.compute.AppService App Service is an HTTP-based service for hosting web applications, REST APIs, and mobile back ends. You can develop in your favorite language, be it .NET, .NET Core, Java, Ruby, Node.js, PHP, or Python. Applications run and scale with ease on both Windows and Linux-based environments. Supertypes Resource"},"html/models/bootstrap/model/Theme.html":{"path":"HTML/Models/Bootstrap/bootstrap/Theme","action-uuid":"6702ef55-b8c8-4973-88ad-2b7178f1a5db","title":"Theme","content":"org.nasdanika.html.bootstrap.Theme Uses Page"},"architecture/cloud/azure/core/model/GenericResource.html":{"path":"Architecture/Cloud/Azure/Core/core/Generic Resource","action-uuid":"39806bfa-4876-4b09-a7d5-3ca7de9881f8","title":"Generic Resource","content":"org.nasdanika.architecture.cloud.azure.core.GenericResource A resource which does not have a model class. Generic resources have &ldquo;kind&rdquo; (type). Supertypes Resource Attribute summary Attribute details kind : EString Type EString Cardinality 0..1 Changeable true Derived false  kind : EString Type EString Cardinality 0..1 Changeable true Derived false Type EString Cardinality 0..1 Changeable true Derived false"},"core/ncore/model/package-summary.html":{"path":"Core/Ncore/ncore","action-uuid":"4f2f5219-d534-4199-95f4-2c8064e86870","title":"ncore","content":"urn:org.nasdanika.ncore Nasdanika Ncore model contains foundational model elements used in other models."},"architecture/core/model/Node.html":{"path":"Architecture/Core/core/Node","action-uuid":"b9c2aad7-931a-4ca2-9f5e-00a57c0ba839","title":"Node","content":"org.nasdanika.architecture.core.Node Source and target of relationships Supertypes ArchitectureElement Subtypes CodeElement CompositeNode Container Module Person System Referrers Relationship Reference summary Reference details incomingRelationships : Relationship* Incoming relationships - a computed opposite to Relationship.target Type Relationship Cardinality 0..* Changeable true Derived true Opposite target outgoingRelationships : Relationship* Outgoing relationships Type Relationship Cardinality 0..* Changeable true Derived false Key id  incomingRelationships : Relationship* Incoming relationships - a computed opposite to Relationship.target Type Relationship Cardinality 0..* Changeable true Derived true Opposite target outgoingRelationships : Relationship* Outgoing relationships Type Relationship Cardinality 0..* Changeable true Derived false Key id Incoming relationships - a computed opposite to Relationship.target Type Relationship Cardinality 0..* Changeable true Derived true Opposite target Outgoing relationships Type Relationship Cardinality 0..* Changeable true Derived false Key id"},"architecture/cloud/azure/compute/model/VirtualMachineSize.html":{"path":"Architecture/Cloud/Azure/Compute/compute/Virtual Machine Size","action-uuid":"3532039c-c8d3-4877-a4a8-2e62ad4c05f7","title":"Virtual Machine Size","content":"org.nasdanika.architecture.cloud.azure.compute.VirtualMachineSize Error loading documentation: java.io.FileNotFoundException: C:\\Users\\Pavel\\git\\nasdanika.github.io\\target\\models\\org.nasdanika.architecture.cloud.azure.compute\\model\\doc\\virtual-machine-size.md (The system cannot find the file specified) Supertypes AzureElement Referrers Virtual Machine Reference summary Reference details virtualMachines : Virtual Machine* Computed opposite to VirtualMachine.size Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite size  virtualMachines : Virtual Machine* Computed opposite to VirtualMachine.size Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite size Computed opposite to VirtualMachine.size Type Virtual Machine Cardinality 0..* Changeable false Derived true Opposite size"},"architecture/cloud/azure/networking/model/NetworkInterface.html":{"path":"Architecture/Cloud/Azure/Networking/networking/NetworkInterface","action-uuid":"4b22330f-8c67-46c3-886d-139c045abb6d","title":"NetworkInterface","content":"org.nasdanika.architecture.cloud.azure.networking.NetworkInterface Supertypes SubnetResource Referrers Virtual Machine"},"html/models/bootstrap/model/Dropdown.html":{"path":"HTML/Models/Bootstrap/bootstrap/Dropdown","action-uuid":"56595041-d36b-4341-ba05-08fee744e234","title":"Dropdown","content":"org.nasdanika.html.model.bootstrap.Dropdown"},"architecture/c4/model/TechnologyConsumer.html":{"path":"Architecture/C4 Model/c4/TechnologyConsumer","action-uuid":"391178e0-2bc9-45fd-a28b-8aa3664e6bc2","title":"TechnologyConsumer","content":"org.nasdanika.architecture.c4.TechnologyConsumer Base class for classes which leverage technologies, e.g. a container or a component. Subtypes Container Module Relationship Referrers Technology Reference summary Reference details technology : Technology* Technologies used by this element Type Technology Cardinality 0..* Changeable true Derived false Opposite uses  technology : Technology* Technologies used by this element Type Technology Cardinality 0..* Changeable true Derived false Opposite uses Technologies used by this element Type Technology Cardinality 0..* Changeable true Derived false Opposite uses"},"architecture/core/model/ActionRole.html":{"path":"Architecture/Core/core/ActionRole","action-uuid":"70367079-d480-48dd-a2f3-3a99827028a1","title":"ActionRole","content":"org.nasdanika.architecture.core.ActionRole Action role defines parent&rsquo;s action reference to which to put element&rsquo;s action. In other words, it defines where this element action will be displayed in the generated HTML UI. Literals CHILD NAVIGATION SECTION ANONYMOUS Uses ModelElement CHILD NAVIGATION SECTION ANONYMOUS     ModelElement"},"core/ncore/model/String.html":{"path":"Core/Ncore/ncore/String","action-uuid":"b1c6efb3-5496-4bff-80a5-0e328d66c984","title":"String","content":"org.nasdanika.ncore.String Text/string. Subtypes StringProperty Attribute summary Attribute details value : EString String value. Type EString Cardinality 0..1 Changeable true Derived false  value : EString String value. Type EString Cardinality 0..1 Changeable true Derived false String value. Type EString Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Border.html":{"path":"HTML/Models/Bootstrap/bootstrap/Border","action-uuid":"5c6035ff-55e6-42ca-98fd-cf42cafbdfde","title":"Border","content":"org.nasdanika.html.model.bootstrap.Border Border configuration specifies border location and color. Referrers Appearance Attribute summary Attribute details bottom : EBoolean Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false left : EBoolean Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false top : EBoolean Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false  bottom : EBoolean Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false color : Color Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false left : EBoolean Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false top : EBoolean Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false Bottom border. Type EBoolean Cardinality 0..1 Changeable true Derived false Border bootstrap color. Type Color Cardinality 1 Changeable true Derived false Left border. Type EBoolean Cardinality 0..1 Changeable true Derived false Righ border. Type EBoolean Cardinality 0..1 Changeable true Derived false Top border. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Spacing.html":{"path":"HTML/Models/Bootstrap/bootstrap/Spacing","action-uuid":"c917e3c6-f8e0-4dd3-96bb-bebe19b39dcf","title":"Spacing","content":"org.nasdanika.html.model.bootstrap.Spacing Spacing - padding or margin. Specifies size, location, and breakpoint. Referrers Appearance Attribute summary Attribute details bottom : EBoolean Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false breakpoint : Breakpoint Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false left : EBoolean Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false size : Size Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false top : EBoolean Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false x : EBoolean Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false y : EBoolean Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false  bottom : EBoolean Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false breakpoint : Breakpoint Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false left : EBoolean Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false right : EBoolean Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false size : Size Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false top : EBoolean Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false x : EBoolean Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false y : EBoolean Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Bottom spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Spacing breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false Left spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Righ spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Spacing size - from 0 to 5 or auto. Type Size Cardinality 1 Changeable true Derived false Top spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Horizontal spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false Vertical spacing. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"core/exec/model/Fail.html":{"path":"Core/Exec/exec/Fail","action-uuid":"36dfefbf-3a0e-47ab-b2ec-db73d8c9f756","title":"Fail","content":"org.nasdanika.exec.Fail Fails execution with a supplied message. Can be used in control flow components such as switch or if. Example exec-fail: Some error message\n Supertypes ModelElement Attribute summary Attribute details message : EString Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false  message : EString Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false Message to output. Interpolated. Type EString Cardinality 0..1 Changeable true Derived false"},"core/graph/index.html":{"path":"Core/Graph","action-uuid":"8b2fa25d-78fe-4eeb-a1d6-431ef764dd96","title":"Graph","content":"Nasdanika Graph module provides classes for visiting and processing graphs with two types of relationships between graph elements: Containment - one element is contained by another Connection - one element (node) connecting to another node via a connection. On the diagram below containment relationships are shown in bold black and connections in blue Examples of such graphs: A file systems with directories containing files and other directories. Connections may take multiple forms such as symbolic links or files, e.g. HTML files, referencing other files. Organizational structure with a hierarchy of organizational units and connections between them. For example, one unit may pass work product to another unit, or a unit may provide services to other units. Country, state, county, city, street, house, people living in that house; family relationships between people and ownership relationships between people and houses. Diagrams, such as Drawio diagrams with a diagram file (resource) containing a document which contains pages, pages containing layers, and layers containing nodes and connections. Nodes may be nested. Nasdanika Drawio is a module for working with Drawio diagrams. It is built on top of this module. Processes/(work)flows - processes consist of activities and nested processes. Activities are connected by transitions. Nasdanika Flow is an example of such process/flow. Distributed systems, such as cloud solutions - availability zones, data centers, clusters, nodes, pods, containers, processes inside containers. All of them communicating to each other via network connections. Work hierarchy and dependencies - in issue trackers issues may be organized into a hierarchy (e.g. Initiative, Epic, Story, Sub-Task in Jira) and have different types of dependencies. In Java a jar contains packages containing sub-packages and classes. Classes contain fields and methods. Fields reference their types, methods call methods of other classes, &hellip; EMF Ecore models contain packages. Packages contain sub-packages and classifiers including classes. Classes contain references to other classes. References may be configured as containment (composition) or non-containment. Graph API Processing Dispatching Processors and processor factories Reflective EMF PropertySourceEObjectFactory Conifguration properties child-injectors child-reference child-references incoming-injector incoming-reference outgoing-injector outgoing-reference parent-injector parent-reference registry-injectors registry-references semantic-uri source-injector source-reference spec ResourceSetPropertySourceEObjectFactory spec-format spec-uri target-reference target-injector Graph API The graph API has 3 interfaces: Element - super-interface for Connection and Node below. Elements may contain other elements. Containment is implemented with &lt;T&gt; T accept(BiFunction&lt;? super Element, Map&lt;? extends Element, T&gt;, T&gt; visitor), which can be thought of as a hierarchical bottom-up reduce - the visitor function is invoked with an element being visited as its first argument and a map of element&rsquo;s children to results returned by the visitor as the second argument. For leaf elements the second argument may be either an empty map or null. Depending on the map type used by implementations they may also need to implement equals() and hashCode(). Node extends Element and may have incoming and outgoing connections. Connection extends Element and has source and target nodes. Processing Graph processing means associating some behavior with graph elements. That behavior (code execution) may modify the graph or perform other actions. Examples of graph processing: Generate code from a diagram. Nasdanika Application Model Drawio module generates HTML sites from Drawio diagrams. Demos: Actions Flow Mind Map Update a diagram with information from external source. For example, there might be a diagram of a (software) system. Diagram elements can be updated as follows: During development - colors may reflect completion status. Say, in progress elements in blue, completed elements in green, elements with issues in red or amber. In production - color elements based on their monitoring status. Offline - grey, good - green, overloaded - amber, broken - red. The above two examples may be combined - a documentation site might be generated from a system diagram. The diagram may be updated with statuses as part of the generation process and embedded to the home page. A click on a diagram element would navigate to an element documentation page, which may contain detailed status information pulled from tracking/monitoring systems during generation. Dispatching One form of graph processing is dispatching of graph elements to Java methods annotated with Handler annotation. The annotation takes a Spring boolean expression. Graph elements are passed to methods for which the expression is blank or evaluates to true. Below is a code snippet from AliceBobHandlers class: @Handler(&quot;getProperty('my-property') == 'xyz'&quot;)\npublic String bob(Node bob) {\n\tSystem.out.println(bob.getLabel());\n\treturn bob.getLabel();\n}\n Below is a test method from TestDrawio.testDispatch() test method which dispatches to the above handler method: Document document = Document.load(getClass().getResource(&quot;alice-bob.drawio&quot;));\n\t\t\nAliceBobHandlers aliceBobHandlers = new AliceBobHandlers();\t\t\nObject result = document.dispatch(aliceBobHandlers);\nSystem.out.println(result);\n Dispatching is suitable for processing where processing logic for different graph elements does not need to access processing logic of other elements. An example of such logic would be updating diagram elements based on statuses retrieved from tracking/monitoring systems - each element is updated individually. Processors and processor factories org.nasdanika.graph.processor package provides means for creating graph element processors and wiring them together so they can interact. One area of where such functionality would be needed is executable diagrams. For example, a flow processor/simulator. Activity processors would need to pass control to connected activities via connection processors. Activity processors may also need to access facilities of their parent processors. The below diagram shows interaction of two nodes via a connection. Connections are bi-directional - source processor may interact with the target processor and vice versa. Some connections may be &ldquo;pass-through&rdquo; - just passing interactions without doing any processing. A pass-through connection is depicted below. Graph element processors are wired together with handlers and endpoints: A handler is a java object created by the client code and receiving invocations from other processors or client code via endpoints. An endpoint is a java object provided to the client code for interacting with other processors. An endpoint may be of the same type as a handler or a handler may be used as an endpoint. This might be the case if processing is performed sequentially in a single JVM. Alternatively, an endpoint may be of different type than the handler it passes invocations to. For example: Endpoint methods may return Futures or Completable Futures of counterpart handler methods - when an endpoint method is invoked it would invoke handler&rsquo;s method asynchronously. Endpoint methods may take different parameters. E.g. an endpoint method can take InputStream, save it to some storage and pass a URL to the handler method. Processors can also interact by looking up other processors in the processor registry as explained below. Processors, handlers, and endpoints are created and wired by implementations of ProcessorFactory which should implement the following methods: createEndpoint() - creates an endpoint for a given connection, handler and handler type. NopEndpointProcessorFactory provides a default implementation of this method which simply returns the handler. createProcessor() method. This method has a default implementation which does nothing - it simply returns ProcessorInfo with null processor. The purpose of this default implementation is to provide access to graph element&rsquo;s ProcessorConfig (or its subtypes ConnectionProcessorConfig or NodeProcessorConfig depending on the element type) to the client code. The client code can use the config to wire handlers and to call endpoints. It is similar to a printed circuit board with a CPU socket - the board provides wiring and the user inserts a CPU into the socket. parentProcessorInfoCallbackConsumer parameters provides a mechanism to get notified when element&rsquo;s parent processor is created. Processors are created bottom-up and child processors are created before parent processors. registryCallbackConsumer provides a mechanism to get notified when all processors have been created. isPassThrough() returns true by default meaning that connections do not perform any processing - they just connect nodes. Client code creates processors by calling one of createProcessors methods. These methods return a registry - Map&lt;Element,ProcessorInfo&lt;P&gt;&gt;. The registry allows the client code to interact with the handler/endpoint/processor wiring created from the graph. TestDrawio.testProcessor() method provides an example of using an anonymous implementation of NopEndpointProcessorFactory for graph processing. Reflective A good deal of graph processing is matching graph elements to code to be invoked for processing of that elements. It may be quite tedious for large graphs. ReflectiveProcessorFactory uses annotations with Spring expressions to create processors and handlers and inject endpoints as explained below. NopEndpointReflectiveProcessorFactory extends ReflectiveProcessorFactory and implements NopEndpointProcessorFactory providing default implementations for createEndpoint() method. ReflectiveProcessorFactory constructor takes an vararg array of targets - objects with methods and fields annotated with: Processor - annotation for a method creating an instance of processor which is then introspected to create handlers and inject/wire endpoints, parent, and registry. Factory - field, method, or type annotation. Allows to cascade/group targets Factories - field or method annotation which also allows to cascade/group targets Below is an example of a method annotated with Processor annotation: @Processor(&quot;label == 'Bob'&quot;)\npublic BobProcessor createBobProcessor(NodeProcessorConfig&lt;Object, Function&lt;String,String&gt;, Function&lt;String,String&gt;&gt; config) {\n\treturn new BobProcessor();\n}\n Objects returned from methods annotated with Processor are introspected for the following annotations: All processors: ChildProcessor - field a method to inject processor or config of element&rsquo;s child matching the selector expression. ChildProcessors - field or method to inject a map of children elements to their processor info. ParentProcessor - field or method to inject processor or config of element&rsquo;s parent. ProcessorElement - field or method to inject the graph element. Registry - field or method to inject the registry - a map of graph elements to their info. RegistryEntry - field or method to inject a matching registry entry. Node processors: IncomingEndpoint - field or method to inject a matching incoming endpoint. IncomingEndpoints - field or method to inject a map of incoming connections to their endpoints completion stages. IncomingHandler - field or method to obtain a handler for an incoming connection. IncomingHandlerConsumers - field or method to inject a map of incoming connections to consumers of handlers. OutgoingEndpoint - field or method to inject a matching outgoing endpoint. OutgoingEndpoints - field or method to inject a map of outgoing connections to their endpoints completion stages. OutgoingHandler - field or method to obtain a handler for an outgoing connection. OutgoingHandlerConsumers - field or method to inject a map of outgoing connections to consumers of handlers. Connection processors: SourceEndpoint - field or method into which a connection source endpoint is injected. Source endpoint allows the connection processor to interact with the connection source handler. SourceHandler - field or method from which the connection source handler is obtained. TargetEndpoint - field or method into which a connection target endpoint is injected. Target endpoint allows the connection processor to interact with the connection target handler. TargetHandler - Field or method from which the connection target handler is obtained. Below is an example of a node processor: public class AliceProcessor extends BobHouseProcessor {\n\t\n\t@ProcessorElement\n\tprivate Node aliceNode;\n\t\n\t@OutgoingHandler(&quot;target.label == 'Bob'&quot;)\n\tprivate Function&lt;String,String&gt; replyToBob = request -&gt; {\n\t\treturn request + System.lineSeparator() + &quot;[&quot; + aliceNode.getLabel() + &quot;] My name is &quot; + aliceNode.getLabel() + &quot;.&quot;;\n\t};\n\t\n\t@OutgoingEndpoint(&quot;target.label == 'Bob'&quot;)\n\tprivate Function&lt;String,String&gt; bobEndpoint;\n\t\n\tpublic String talkToBob(String str) {\n\t\treturn bobEndpoint.apply(&quot;[&quot; + aliceNode.getLabel() + &quot;] Hello!&quot;);\n\t}\t\n\n}\n Below is an example of a connection processor: public class AliceBobConnectionProcessor {\n\t\n\t@SourceEndpoint\n\tFunction&lt;String,String&gt; sourceEndpoint;\n\t\n\t@TargetEndpoint\n\tFunction&lt;String,String&gt; targetEndpoint;\n\t\n\t@SourceHandler\n\tFunction&lt;String,String&gt; sourceHandler = request -&gt; &quot;&gt;&gt; &quot; + targetEndpoint.apply(request);\n\t\n\t@TargetHandler\n\tFunction&lt;String,String&gt; targetHandler = response -&gt; &quot;&lt;&lt; &quot; + sourceEndpoint.apply(response);\t\n\t\n}\n EMF GraphProcessorResource is a base class for mapping graph elements to EMF Ecore model elements. Nasdanika Application Model Drawio is an example of such semantic mapping - it maps elements of Drawio diagrams to actions of Nasdanika Application Model which allows to generate HTML sites from diagrams. org.nasdanika.graph.processor.emf.AbstractEObjectFactory is a base class for mapping of graph elements to org.eclipse.emf.ecore.EObject&rsquo;s. Concrete implementations of this class can be used in combination with concrete implementations of GraphProcessorResource. org.nasdanika.drawio.emf.DrawioEObjectFactory is a specialization of AbstractEObjectFactory for Drawio diagrams, see Drawio for more details. org.nasdanika.drawio.emf.ResourceSetDrawioEObjectFactory is a further specialization of DrawioEObjectFactory. org.nasdanika.drawio.emf.ResourceSetDrawioResourceFactory leverages ResourceSetDrawioEObjectFactory for loading models from Drawio diagrams. There might be multiple processors and semantic models for the same graph, e.g. a diagram. It can be thought of as &ldquo;semantic inversion&rdquo; - in UML and tools like Sirius there is a model and multiple representations/views of the model. Visual (representation) elements are mapped to model elements, to it is a one-to-many relationship between a semantic element and its repreentations. In the case of graph processing and semantic mapping the relationship is many-to-many. Semantic elements are mapped to visual elements and there might be multiple semantic elements in different models mapping to the same visual element. At the same time, multiple visual elements may map to the same semantic element. An example of such mapping might be a map of United States with a a hierarchy of states and counties. Map elements can be mapped to different semantic models - weather, population, election results. Another example is a diagram of a software system where diagram elements can be mapped to: Action model (see above) to generate documentation. Issues in an issue tracker like Jira to visually depict progress in constructing the system. Diagram elements can be mapped to code generators so parts of the system can be generated. This can be used in software product lines where multiple similar solutions are created following the same pattern. The pattern can be captured and documented using diagrams. Once the system is build diagram elements can be mapped to build/deployment processes - execution of the diagram would result in deploying a solution. The diagram may be updated with deployment details, e.g. ARN&rsquo;s for AWS solutions. Once the system is built diagram elements can be mapped to monitoring models to show how the system operates. At this step deployment details injected into the diagram can be used to pull runtime information. With semantic mapping a diagram does not have to comply to a specific notation as it is the case with UML or Sirius diagrams. Meaning is assigned to diagram elements by semantic mapping, i.e. the notation may be created after the diagram. It can be beneficial when there is no notation for the problem domain at hand, the notation is too complex or people authoring diagrams are not familiar with the notation, but they know how to express what they know or need as a diagram. A practical example is mapping of existing diagrams in an organization to a semantic model or models. The semantic model may have to be elicited gradually from the diagrams and diagram elements would be mapped to the model in multiple stages. This can be thought of as a two-dimensional effort. One dimension is the depth/richness of the semantic model. It can be called the &ldquo;Exploration&rdquo; dimension - how well the problem domain is articulated. The other is the breadth - the number of diagram elements mapped to the model. It can be called &ldquo;Exploitation&rdquo; - how much the capability of understanding and expressing of the problem domain is utilized to achieve organizational goals. To put it slightly differently, semantic mapping approach can be used to elicit and codify organizational tribal knowledge - the &ldquo;secret sauce&rdquo; of an organization. An organization may start with pre-existing diagrams and map them to actions to generate documentation sites. Diagrams similar to this one can be used to document software systems. Flow diagrams can be used to document processes. The diagrams can be interrelated. For example, documentation of some software component may contain flow diagrams instructing how to perform operations on the component, e.g. deployment. The organization may also map diagrams to different models. E.g. to the Nasdanika Flow model for processes. Or the organization may create an Ecore model of the organization and map diagrams and other data sources to the model. Such a model can be documented using Nasdanika HTML Ecore. The documentation may include instructions how to map diagram elements to model elements. PropertySourceEObjectFactory org.nasdanika.drawio.emf.PropertySourceEObjectFactory is a specialization of org.nasdanika.graph.processor.emf.AbstractEObjectFactory for Drawio diagrams. It loads semantic information from properties of elements which implement org.nasdanika.common.PropertySource as explained below. This class is abstract. It does not dictate semantic specification format - subclasses shall implement T load(String spec, URI specBase, ProcessorConfig&lt;T&gt; config, ProgressMonitor progressMonitor) method. Conifguration properties child-injectors The value of this property shall be a Spring expression which injects children into the semantic element. Expression value is not used. To inject multiple children you may use linine list expression { &lt;expr&gt;[, &lt;expr&gt;] } The expression is evaluated in the context of the semantic element with the following variables: children - a map of children with child diagram elements as keys and their org.nasdanika.graph.processor.ProcessorInfos as values config - semantic element config of type org.nasdanika.graph.processor.ProcessorConfig element - diagram element child-reference Reference name of the semantic parent to inject this semantic element into. child-references A YAML map of reference names to selectors - Spring boolean expressions. Children matching the selector expression are injected into the respective reference of the semantic element. Expressions are evaluated in the context of a child semantic element to be matched with the following variables: config - context (child) semantic element ProcessorConfig. element - child diagram element. parent - semantic element. parentConfig - semantic element ProcessorConfig. parentElement - diagram element. incoming-injector Connection property - a spring expression to inject this connection&rsquo;s semantic element (or source semantic element for pass-through connections) into its target&rsquo;s semantic element. Evaluated in the context of the target semantic element with the following variables: element - diagram element config - processor config connection - incoming connection incoming - incoming semantic element incomingConfig - incoming processor config incoming-reference Connection property specifying reference name of the connection&rsquo;s target semantic element to inject this connection semantic element or connection&rsquo;s source semantic element if the connection doesn&rsquo;t have its own semantic element (pass-through connection). outgoing-injector Connection property - a spring expression to inject this connection&rsquo;s semantic element (or target semantic element for pass-through connections) into its source&rsquo;s semantic element. Evaluated in the context of the source semantic element with the following variables: element - diagram element config - processor config connection - incoming connection outgoing - outgoing semantic element outgoingConfig - outgoing processor config outgoing-reference Connection property specifying reference name of the connection&rsquo;s source semantic element to inject this connection semantic element or connection&rsquo;s target semantic element if the connection doesn&rsquo;t have its own semantic element (pass-through connection). parent-injector Spring expression to inject parent into this semantic element. Evaluated in the context of the semantic element with the following variables: config - this semantic element processor config element - this diagram element parent - parent semantic element parentConfig - parent processor config parent-reference Reference name of this semantic element to inject the parent semantic element into. registry-injectors Spring expression to inject registry entries into this semantic element. Evaluated expression value is not used. The expression is evaluated in the context of the semantic element with the following variables: config - this semantic element processor config element - this diagram element registry - a map of diagram elements to their registry info&rsquo;s registry-references A YAML map of reference names to selectors - Spring boolean expressions. Registry entries matching the selector expression are injected into the respective reference of the semantic element. Expressions are evaluated in the context of a registry semantic element to be matched with the following variables: config - context (child) semantic element ProcessorConfig. element - child diagram element. registryElement - registry diagram element. registryConfig - processor config of the registry element. semanticElement - semantic element. semantic-uri URI of the semantic element definition. The difference between semantic-uri and spec-uri is that the spec is loaded as a string, interpolated, and then used to load the semantic element. spec-uri supports YAML and JSON definitions, whereas semantic-uri can point to definitions in multiple formats - XMI, Drawio, YAML, Json, MS Excel, &hellip; source-injector Connection property - a spring expression to inject this connection source semantic element into this connection semantic element. Evaluated in the context of the connection semantic element with the following variables: element - diagram element (connection) config - processor config source - source semantic element sourceConfig - source processor config source-reference Name of a reference to inject this connection source semantic element into this connection semantic element. spec Specification of the semantic element. YAML or JSON. Example: ncore-temporal: \n  offset: ${diagram-element/expr/outgoingConnections[0].label}\n  description: ${diagram-element/label}\n ResourceSetPropertySourceEObjectFactory org.nasdanika.graph.emf.ResourceSetPropertySourceEObjectFactory is a specialization of org.nasdanika.graph.emf.PropertySourceEObjectFactory. It is used by org.nasdanika.graph.emf.ResourceSetPropertySourceResource and org.nasdanika.graph.emf.ResourceSetPropertySourceResourceFactory. In ResourceSetPropertySourceEObjectFactory specification is interpolated with the following tokens: expression - spring expression evaluated in the context of the element with the following variables: context - org.nasdanika.common.Context providing access to additional information. config - processor config diagram-element/properties/&lt;property name&gt; - element property value for elements implementing org.nasdanika.common.PropertySource. Additional tokens may be provided by sub-classing ResourceSetPropertySourceEObjectFactory or ResourceSetPropertySourceResourceFactory and overriding getContext() method. spec-format Specification format - yaml or json. The format is inferred if not explicitly specified - specifications starting with { and ending with } are assumed to be JSON, YAML otherwise. spec-uri URI of the specification resolved relative to the document URI. Specification is loaded from the specification URI, interpolated, and then a semantic element is loaded from it. target-reference Name of a reference to inject this connection target semantic element into this connection semantic element. target-injector Connection property - a spring expression to inject this connection target semantic element into this connection semantic element. Evaluated in the context of the connection semantic element with the following variables: element - diagram element (connection) config - processor config target - target semantic element targetConfig - target processor config Root A B A1 A2 B1 Node Processor Node Processor source -&gt; target processor target -&gt; source processor Node Processor Node Processor"},"architecture/cloud/azure/core/model/Resource.html":{"path":"Architecture/Cloud/Azure/Core/core/Resource","action-uuid":"be530177-65f1-425a-b1ea-70d95e95634c","title":"Resource","content":"org.nasdanika.architecture.cloud.azure.core.Resource A resource is an entity managed by Azure Supertypes AzureElement Subtypes App Service Disk Generic Resource Subnet SubnetResource Virtual Machine VirtualNetwork VirtualNetworkResource Referrers Resource Group Reference summary Reference details locations : Location* A resource can be associated with zero or more locations. E.g. a VM can be deployed to a region or a specific availability zone in a region. A kubernetes cluster can be deployed to several availability zones. Type Location Cardinality 0..* Changeable true Derived false resourceTags : StringProperty* Type StringProperty Cardinality 0..* Changeable true Derived false Key name  locations : Location* A resource can be associated with zero or more locations. E.g. a VM can be deployed to a region or a specific availability zone in a region. A kubernetes cluster can be deployed to several availability zones. Type Location Cardinality 0..* Changeable true Derived false resourceTags : StringProperty* Type StringProperty Cardinality 0..* Changeable true Derived false Key name A resource can be associated with zero or more locations. E.g. a VM can be deployed to a region or a specific availability zone in a region. A kubernetes cluster can be deployed to several availability zones. Type Location Cardinality 0..* Changeable true Derived false Type StringProperty Cardinality 0..* Changeable true Derived false Key name"},"architecture/cloud/azure/networking/model/Subnet.html":{"path":"Architecture/Cloud/Azure/Networking/networking/Subnet","action-uuid":"321d22b4-5e65-44ff-a593-41b4060c1e3c","title":"Subnet","content":"org.nasdanika.architecture.cloud.azure.networking.Subnet Supertypes Resource Referrers SubnetResource VirtualNetwork Reference summary Reference details resources : SubnetResource* Resources connected to this subnet. Computed opposite to SubnetResource.subnet. Type SubnetResource Cardinality 0..* Changeable false Derived true Opposite subnet  resources : SubnetResource* Resources connected to this subnet. Computed opposite to SubnetResource.subnet. Type SubnetResource Cardinality 0..* Changeable false Derived true Opposite subnet Resources connected to this subnet. Computed opposite to SubnetResource.subnet. Type SubnetResource Cardinality 0..* Changeable false Derived true Opposite subnet"},"architecture/containers/kubernetes/model/Workload.html":{"path":"Architecture/Containers/Kubernetes/kubernetes/Workload","action-uuid":"ce78875a-dcb3-49f4-8b08-0ef594f5f887","title":"Workload","content":"org.nasdanika.architecture.containers.kubernetes.Workload"},"architecture/containers/docker/model/Image.html":{"path":"Architecture/Containers/Docker/docker/Image","action-uuid":"1ee0a111-93e5-423f-88a1-207934e3a1f3","title":"Image","content":"org.nasdanika.architecture.containers.docker.Image Supertypes ArchitectureElement Referrers Container Image Registry Reference summary Reference details children : Image* Computed opposite to from - images for which this image is the parent, i.e. it is referenced in the FROM clause. Type Image Cardinality 0..* Changeable false Derived true Opposite from containers : Container* Computed opposite to Container.image Type Container Cardinality 0..* Changeable false Derived true Opposite image from : Image Type Image Cardinality 0..1 Changeable true Derived false Opposite children registries : Registry* Computed opposite to Registry.images - registries to which this image is published Type Registry Cardinality 0..* Changeable false Derived true Opposite images  children : Image* Computed opposite to from - images for which this image is the parent, i.e. it is referenced in the FROM clause. Type Image Cardinality 0..* Changeable false Derived true Opposite from containers : Container* Computed opposite to Container.image Type Container Cardinality 0..* Changeable false Derived true Opposite image from : Image Type Image Cardinality 0..1 Changeable true Derived false Opposite children registries : Registry* Computed opposite to Registry.images - registries to which this image is published Type Registry Cardinality 0..* Changeable false Derived true Opposite images Computed opposite to from - images for which this image is the parent, i.e. it is referenced in the FROM clause. Type Image Cardinality 0..* Changeable false Derived true Opposite from Computed opposite to Container.image Type Container Cardinality 0..* Changeable false Derived true Opposite image Type Image Cardinality 0..1 Changeable true Derived false Opposite children Computed opposite to Registry.images - registries to which this image is published Type Registry Cardinality 0..* Changeable false Derived true Opposite images"},"architecture/cloud/azure/core/model/ResourceGroup.html":{"path":"Architecture/Cloud/Azure/Core/core/Resource Group","action-uuid":"55b67472-f062-40ce-a76b-fa3fc1bdd1ac","title":"Resource Group","content":"org.nasdanika.architecture.cloud.azure.core.ResourceGroup Resource Group is a container that holds related Resources for an Azure solution. Supertypes AzureElement Referrers Subscription Reference summary Reference details resources : Resource* Type Resource Cardinality 0..* Changeable true Derived false Key id  resources : Resource* Type Resource Cardinality 0..* Changeable true Derived false Key id Type Resource Cardinality 0..* Changeable true Derived false Key id"},"html/models/bootstrap/model/InputGroup.html":{"path":"HTML/Models/Bootstrap/bootstrap/InputGroup","action-uuid":"3346bee9-af51-4e80-bb99-33814c92ee24","title":"InputGroup","content":"org.nasdanika.html.model.bootstrap.InputGroup"},"core/exec/model/resources/ReconcileAction.html":{"path":"Core/Exec/exec/resources/ReconcileAction","action-uuid":"661d49bb-4443-4639-990c-84e623265034","title":"ReconcileAction","content":"org.nasdanika.exec.resources.ReconcileAction Defines an action to take when a resource with the same name already exists. Literals Append Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancel Cancels execution if resource already exists. Keep Keeps the existing resource intact. Merge Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrite Overwrites existing resource. For containers - deletes their contents. Uses Resource Append Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancel Cancels execution if resource already exists. Keep Keeps the existing resource intact. Merge Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrite Overwrites existing resource. For containers - deletes their contents. Appends new content to the existing content. For containers it means that new resources will be placed in the container next to the existing resources. For files it means that the new content will be appended after the existing content. Cancels execution if resource already exists. Keeps the existing resource intact. Merges old and new content of a file using a built-in or provided org.nasdanika.common.resources.Merger. Merger is obtained from merger reference. For containers Merge is the same as Append. Overwrites existing resource. For containers - deletes their contents. Resource"},"html/models/bootstrap/model/package-summary.html":{"path":"HTML/Models/Bootstrap/bootstrap","action-uuid":"42ca1c65-ed96-448b-8b89-3f0c0d014a0a","title":"bootstrap","content":"urn:org.nasdanika.html.model.bootstrap Model of Bootstrap elements."},"architecture/core/model/Stage.html":{"path":"Architecture/Core/core/Stage","action-uuid":"9fbe3c28-a4a3-4d8d-a261-78fd04bdc818","title":"Stage","content":"org.nasdanika.architecture.core.Stage A transition of the containing architecture element from the baseline state identified by the stage start to the target state identified by the stage end. For example, &ldquo;Development&rdquo; stage or &ldquo;End of Life/Deprecated&rdquo; stage. Supertypes ArchitectureElement Referrers ArchitectureElement Reference summary Reference details impacts : Impact* Impacts of this increment on architecture elements. E.g. creation of a new element, modification or retirement (deletion) of an existing. Type Impact Cardinality 0..* Changeable true Derived false  impacts : Impact* Impacts of this increment on architecture elements. E.g. creation of a new element, modification or retirement (deletion) of an existing. Type Impact Cardinality 0..* Changeable true Derived false Impacts of this increment on architecture elements. E.g. creation of a new element, modification or retirement (deletion) of an existing. Type Impact Cardinality 0..* Changeable true Derived false"},"core/ncore/model/Boolean.html":{"path":"Core/Ncore/ncore/Boolean","action-uuid":"925a692e-1280-43a2-b79e-c232db96546c","title":"Boolean","content":"org.nasdanika.ncore.Boolean Represents boolean. Subtypes BooleanProperty Attribute summary Attribute details value : EBoolean Value. Type EBoolean Cardinality 0..1 Changeable true Derived false  value : EBoolean Value. Type EBoolean Cardinality 0..1 Changeable true Derived false Value. Type EBoolean Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/networking/model/SubnetResource.html":{"path":"Architecture/Cloud/Azure/Networking/networking/SubnetResource","action-uuid":"14a49b92-a2e4-4f1e-a31c-f7c1e2465de7","title":"SubnetResource","content":"org.nasdanika.architecture.cloud.azure.networking.SubnetResource Base class for resources connected to a Subnet Supertypes Resource Subtypes Container Instance NetworkInterface Referrers Subnet Reference summary Reference details subnet : Subnet Type Subnet Cardinality 0..1 Changeable true Derived false Opposite resources  subnet : Subnet Type Subnet Cardinality 0..1 Changeable true Derived false Opposite resources Type Subnet Cardinality 0..1 Changeable true Derived false Opposite resources"},"html/models/bootstrap/model/Float.html":{"path":"HTML/Models/Bootstrap/bootstrap/Float","action-uuid":"7e1d1561-0c2f-4c65-901b-3493165a38ce","title":"Float","content":"org.nasdanika.html.model.bootstrap.Float Defines element floating - left or right - for a given breakpoint. Referrers Appearance Attribute summary Attribute details breakpoint : Breakpoint Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false side : EString Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false  breakpoint : Breakpoint Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false side : EString Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false Breakpoint. Type Breakpoint Cardinality 0..1 Changeable true Derived false Side to float to. left, right, or none. Type EString Cardinality 1 Changeable true Derived false"},"html/models/bootstrap/model/Badge.html":{"path":"HTML/Models/Bootstrap/bootstrap/Badge","action-uuid":"f789b1f8-a78a-49af-8140-689fe230928c","title":"Badge","content":"org.nasdanika.html.model.bootstrap.Badge Supertypes Div Attribute summary Attribute details color : Color Type Color Cardinality 0..1 Changeable true Derived false  color : Color Type Color Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Appearance.html":{"path":"HTML/Models/Bootstrap/bootstrap/Appearance","action-uuid":"6e64c37d-ab27-426b-ae1c-35cfd62c5230","title":"Appearance","content":"org.nasdanika.html.model.bootstrap.Appearance This class is used for configuring common aspects of HTML and Bootstrap elements such as background, spacing, text, etc. Referrers AppearanceEntry BootstrapElement Page Uses Appearance Attribute summary Reference summary Attribute details background : Color Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false Reference details Float : Float* Float configuration. Type Float Cardinality 0..* Changeable true Derived false attributes : Property* HTML element (tag) attributes. Attributes defined at the appearance level overwrite attributes defined at the HTML element level. It is recommended to use one of the other. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false border : Border* Border configuration. Type Border Cardinality 0..4 Changeable true Derived false children : AppearanceEntry* Type AppearanceEntry Cardinality 0..* Changeable true Derived false margin : Spacing* Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false padding : Spacing* Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false text : Text Text style Type Text Cardinality 0..1 Changeable true Derived false Operations effectiveAppearance : Appearance Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1   background : Color Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false Bootstrap color for background. Type Color Cardinality 0..1 Changeable true Derived false Float : Float* Float configuration. Type Float Cardinality 0..* Changeable true Derived false attributes : Property* HTML element (tag) attributes. Attributes defined at the appearance level overwrite attributes defined at the HTML element level. It is recommended to use one of the other. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false border : Border* Border configuration. Type Border Cardinality 0..4 Changeable true Derived false children : AppearanceEntry* Type AppearanceEntry Cardinality 0..* Changeable true Derived false margin : Spacing* Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false padding : Spacing* Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false text : Text Text style Type Text Cardinality 0..1 Changeable true Derived false Float configuration. Type Float Cardinality 0..* Changeable true Derived false HTML element (tag) attributes. Attributes defined at the appearance level overwrite attributes defined at the HTML element level. It is recommended to use one of the other. Interpolation Attribute values are interpolated, i.e. tokens in the form of default value] are replaced with the contextual values or default values, if any. Examples: ${my-style} - Token without a default value. bold - Token with a default value. Regular attributes For all top-level entries except class, style, and data attribute value is produced by converting the value to string for scalars and to JSON string for lists and maps. For attributes which do not start with data- a warning is issued if the value is not a scalar, i.e. a list or a map. Class For class attribute its value is formed by concantenating elements using space as a separator. If elements are hierarchical then class name is formed by concatenation with a dash (-) as a separator. Data If value of data attbibute is a map then keys of that map get concatenated with data using dash (-) as a separator, them same applies to nested maps. Non-map values become attribute values - scalars are converted to string, lists are converted to JSON string. Style Style can be defined as a string, list or map. If style is defined as a list, all list values are concatenated with a space as a separator - it is a convent way for long unstructured definitions. If style value is a map then the value and its contained map values are processed in the following fashion: Keys are concatenated with dash as a separator. List values are contcatenated wtih space as a separator. Type Property Cardinality 0..* Changeable true Derived false Border configuration. Type Border Cardinality 0..4 Changeable true Derived false Type AppearanceEntry Cardinality 0..* Changeable true Derived false Margin configuration. Type Spacing Cardinality 0..* Changeable true Derived false Padding configuration. Type Spacing Cardinality 0..* Changeable true Derived false Text style Type Text Cardinality 0..1 Changeable true Derived false effectiveAppearance : Appearance Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 Type Appearance Cardinality 0..1 Parameters path : EString Type EString Cardinality 0..1 path : EString Type EString Cardinality 0..1 Type EString Cardinality 0..1"},"core/ncore/model/Property.html":{"path":"Core/Ncore/ncore/Property","action-uuid":"f398018d-c94f-4728-979b-6911772d0a22","title":"Property","content":"org.nasdanika.ncore.Property Base class for keyed values. Subtypes BooleanProperty EObjectProperty IntegerProperty ListProperty MapProperty StringProperty Referrers ArchitectureElement Map ModelElement Attribute summary Attribute details name : EString Property name/key. Type EString Cardinality 1 Changeable true Derived false  name : EString Property name/key. Type EString Cardinality 1 Changeable true Derived false Property name/key. Type EString Cardinality 1 Changeable true Derived false"},"html/models/bootstrap/model/ActionGroupItem.html":{"path":"HTML/Models/Bootstrap/bootstrap/ActionGroupItem","action-uuid":"4aec21bf-7373-4632-be77-4803024a51a5","title":"ActionGroupItem","content":"org.nasdanika.html.model.bootstrap.ActionGroupItem Base class for action group items Supertypes Item Subtypes ContentActionGroupItem LinkActionGroupItem Referrers ActionGroup Reference summary Reference details name : EObject* Item name Type EObject Cardinality 0..* Changeable true Derived false  name : EObject* Item name Type EObject Cardinality 0..* Changeable true Derived false Item name Type EObject Cardinality 0..* Changeable true Derived false"},"core/emf/index.html":{"path":"Core/EMF","action-uuid":"d50951e8-9fbe-4bb1-a660-58427db2116e","title":"EMF","content":"Nasdanika EMF module contains classes for working with Ecore models. These classes can be categorized as follows: General purpose - helper classes such as EMFUtil. Adapters and adapter factories - base classes for building (reflective) adapters and composite adapter factories in order to adapt Ecore models to required functionality. Model execution - base classes for &ldquo;wiring&rdquo; Ecore models into the Nasdanika Execution Model, i.e. making the models executable including command line execution. Persistence - classes for loading Ecore models from key-value data sources with special support of YAML. Adapters Adapter factories Persistence Load keys Features Classes and packages Default feature Full definition Short definition Single line Multi-line Loading references Reference keys (EKeys) Value feature File sets String Array Map Mutually exclusive features Load tracker Marker Examples MS Excel resources Adapters Adapters mechanism allows to adapt a model element to another type. Adapters are used by, say HTML Flow to adapt Core Flow to org.nasdanika.html.model.app.util.ActionProviders in order to generate an action model and then generate a web site from the action model. Adapters allow to separate concerns and to have multiple adapters and adapter factories for the same model. For example, an action model can be transformed to a static web site or Eclipse help using different adapters. Adapters are created by adapter factories which are registered with a resource set. Below is a code snippet demonstrating the process of transforming a flow model to an action model by adapting the root model element to ActionProvider and then creating an Action instance: // Create a resource set and load a model\nResourceSet instanceModelsResourceSet = createResourceSet();\nResource instanceModelResource = instanceModelsResourceSet.getResource(URI.createURI(&quot;mymodel.xml&quot;), true);\n\n// Add an adapter factory\ninstanceModelsResourceSet.getAdapterFactories().add(new EngineeringActionProviderAdapterFactory(context)); {\n\n// Resource set for a target (action) model\t\t\nResourceSet actionModelsResourceSet = createResourceSet();\nactionModelsResourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(org.eclipse.emf.ecore.resource.Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());\n\t\t\norg.eclipse.emf.ecore.resource.Resource actionModelResource = actionModelsResourceSet.createResource(URI.createURI(&quot;myactions.xml&quot;));\n\n// Getting the root object of the source model\t\t\nEObject instance = instanceModelResource.getContents().get(0);\n\n// Adapting the root to ActionProvider and calling execute() to obtain an action\nAction rootAction = EObjectAdaptable.adaptTo(instance, ActionProvider.class).execute(...);\n\n// Adding the root action to a resource and then saving to a file\nactionModelResource.getContents().add(rootAction);\nactionModelResource.save(null);\n Adapter factories Below is a summary of Nasdanika EMF adapters: org.nasdanika.emf.ComposeableAdapterFactory - an interface for factories which can be composed into a ComposedAdapterFactory (see below). org.nasdanika.emf.ComposedAdapterFactory - a factory which delegates to its children. This factory is also composeable, i.e. it is possible to build a hierarchy of adapter factories. org.nasdanika.emf.DelegatingAdapterFactory - base class for adapter factories which create a delegate object and then create a dynamic proxy which implements org.eclipse.emf.common.notify.Adapter and all interfaces of the delegate. It allows to create adapters without having to implement Adapter or extend org.eclipse.emf.common.notify.AdapterImpl. org.nasdanika.emf.BiFunctionAdapterFactory - creates an adapter using a java.util.function.BiFunction, e.g. a constructor with two parameters. The first parameter is the notifier (target model element), the second is the factory. org.nasdanika.emf.FunctionAdapterFactory - creates an adapter using a java.util.function.Function, e.g. a single parameter constructor. The parameter is the notifier (target model element). org.nasdanika.emf.InstanceAdapterFactory - delegates to a single shared adapter instance for all notifiers (target model elements). org.nasdanika.emf.SupplierAdapterFactory - delegates to java.util.function.Supplier, which can be a no-argument constructor. In this case each notifier/element gets its own adapter instance. However, that instance is not aware of the notifier (target element). Such adapters can be used for collecting computation results. See JavaDoc for more details. Persistence Nasdanika EMF persistence allows to load Ecore models from key-value sources such as: java.util.Function&lt;String,Object&gt;.apply(String key) JSON YAML Loading from YAML and JSON can be used to implement &lt;problem doman&gt;-as-code: DEefine models in YAML or JSON, Edit in a text editor or in a web browser using version control system Web UI, Store in a version control system, Keep track of model element definition source - file (URI), line, number, origin and commit (see Marker below), Diff and merge as code. The persistence framework uses EAnnotation with urn:org.nasdanika source to customize loading. This annotation is referred further as &ldquo;Nasdanika annotation&rdquo; The persistence framework loads EObject structural features which are: Changeable Not changeable with computed key of Nasdanika annotation set to true - in this case the feature value is loaded from the source, but not injected into the object - it is available via load tracking for custom handling - see below. Load key (see below) is not null. Load keys Features EObject features are loaded using load keys. By default load keys are derived from feature names by converting camel case to kebab case. E.g. firstName becomes first-name. Load key can be customized using the Nasdanika annotation: load-key detail key at the feature level. The value shall be a string. load-keys detail key at the class level. The value shall be a YAML map of feature names to load keys. This approach allows to override feature load key in subclasses. loadable detail key at the feature level - set it to false to suppress loading of features even if they are changeable. Please note that it is different from computed - computed forces loading of values of non-changeable features, and loadable suppresses loading of changeable features. feature-key detail key at the feature level. The value shall be a string. Feature key is used as a fallback value for a load key and also for computing containment path. feature-keys detail key at the class level. The value shall be a YAML map. This annotation can be defined on a subclass of the class defining the feature, which allows to override the default (kebab case) feature key. The above process of resolving load keys is used by the default load key provider. Load keys can be customized by passing a non-default load key provider to org.nasdanika.emf.persistence.EObjectLoader constructor. Classes and packages Default load keys for classes and packages are computed in the same way as for features by converting class or package name from came to kebab case. Default behavior can be customized using the load-key Nasdanika annotation detail key with the load key as value. It is also possible to suppress loading of a class or a package by setting loadable Nasdanika annotation detail key to false. As with features, it is possible to provide a custom key loader to EObjectLoader constructor to change the default behavior if annotations are not enough. A custom key loader may fall-back/chain/delegate to the default key loader. In the below example of loading of Exec Text content-text:\n   description: Full text definition\n   interpolate: false\n   content: Hello ${token}.\n content - Package name converted to kebab case. text - Class name converted to kebab case. description, interpolate, content - object features. Default feature A feature can be defined as a default feature by setting default-feature Nasdanika annotation to true at the feature level or to the feature name at the class level. Default features are used when object configuration value is not a map, e.g. a String. For example, Exec Text defines content as its default feature. It allows to load text from the following YAML specifications: Full definition content-text:\n   description: Full text definition\n   interpolate: false\n   content: Hello ${token}.\n Short definition Just content (default feature): Single line content-text: World\n Multi-line content-text: |+2\n  Line 1.\n  Line 2.\n Loading references By default configuration values of reference elements shall be single-entry maps with the type as a key and a value as configuration. The loading process instantiates an EObject by its key and then injects features from the value. For example,   modules:\n    - engineering-product:\n        path: core\n        name: Core\n        owners: engineering://nasdanika/engineers/joe-doe\n        experts: engineering://nasdanika/engineers/joe-doe\n        action-prototype: &quot;ncore.genmodel.xml#/&quot;\n        releases:\n          &quot;0.1&quot;:\n            name: &quot;0.1&quot;\n            increment: engineering://nasdanika/increments/2021/children/Q4            \n          &quot;1.0&quot;:\n            name: &quot;1.0&quot;\n modules - is an interited reference of Organization (see All &gt; References) engineering-product is the element type - engineering package, product type. path, name, &hellip; are object features In many cases reference values are either of the same type or their type can be derived from their configuration keys. In this case explicitly specifying the type is unnecessary and may lead to configuration errors. For example, in the above code snippet releases reference can contain only instances of its reference type - Release. To specify that the type of refernce elements shall be derived from the reference type or annotations instead of being supplied explicitly set homogenous Nasdanika annotation details key to true on the reference. In some situations the type of reference element can be derived from the type of its configuration - string, integer, map, list, boolean, date. In such cases add reference-type Nasdanika annotation key with a value containing a YAML map of configuration value types to element types. For example: map: MapProperty\nlist: ListProperty\nstring: StringProperty\ninteger: IntegerProperty\n Map values can be strings for types in the same EPackage or maps with the following keys: ns-uri - Namespace URI of the EPackage. name - EClass name. In situations when it is necessary to override reference type in a subclass add reference-types Nasdanika annotation to the subclass. The value shall be a YAML map of reference names to element types. Element types can be strings for the types in the same package or maps with ns-uri and name keys as explained above. By default, if an element value of a homogenous reference is a string then it is treated as a relative URI of a resource from which the element shall be loaded. In this case that resource has to contain type definition. For elements with a default feature this behavior can be modified by setting strict-containment Nasdanika annotation detail to true to treat the string value in configuration as the value of the default feature. In this case it is not possible to load reference elements from external resources. Reference keys (EKeys) References may specify attributes of their types as EKeys. References which specify EKeys can be loaded from maps. Currently only a single EKey is supported. Support of multiple EKeys will be added when needed. When a reference with EKeys is loaded from a map, map entry key is injected into the element object&rsquo;s EKey attributes. The map entry value is used to either set up element features or &ldquo;value feature&rdquo;. Value feature When using EKeys you may want to use map entry value to set a specific feature of the reference element instead of using it to configure the element itself. In this case set value-feature Nasdanika annotation on the reference to the name of the feature which shall be configured with the map entry value. File sets It is possible to load zero or more objects into a reference using fileset: URI schema followed by the file set specification. The specification can be a string, a YAML array, or a YAML map. In some cases if a patterns starts with * it is treated as a YAML alias which would lead to a ScannerException being thrown. To solve it add ./ in front of * e.g. ./*/engineering.yml. String If it is a string, then it is treated as an Ant path pattern. Example: fileset:issues/*.yml Array If it is an array, then elements are treated as Ant path patterns. Example: fileset:[issues/*.yml] Map If it is a map, the following keys are supported: include - a string or an array of strings with Ant path patterns to include into the result. exclude - a string or an array of strings with Ant path patterns to exclude from the matched include result. base - Base directory resolved relative to the context URI. Examples; Single line: fileset:{include:*.yml;exclude:done_*.yml;base:issues} Multi-line:   issues:\n    - |+2\n      fileset:\n        include: \n          - *.yml\n          - *.yaml\n        exclude: done_*.*\n        base: issues\n Mutually exclusive features Features may have exclusive-with Nasdanika annotation details containing a space-separated list of feature keys which are exclusive with the annotated feature. It is not necessary to declare exclusivity on both features, just on one of them. If object configuration contains keys for mutually exclusive features, loading will fail. Load tracker During load a org.nasdanika.common.persistence.LoadTracker adapter is added to objects being loaded. This adapter allows, for example, to compute derived values for features unless they were already loaded. It also allows to access values of computed features - these values are stored in the adapter, but not injected into the target object because these features are not changeable. An example of using a computed feature - the feature type is an object which is loaded from an external system, e.g. an issue tracker. Feature configuration value is a string, e.g. an issue ID. During load issue ID is stored in the load tracker adapter and then is used to contact the issue tracker system, retrieve issue details and create an issue object to be returned from the feature getter. Marker When objects are loaded from YAML information about source file line and number is injected into the objects as follows: An adapter of type org.nasdanika.common.persistence.Marked is added to the object. If the object extends Marked, then Marker is added to the object. It is possible to customize marker type by calling EObjectLoader.setMarkerFactory(). For example, GitMarker can be created with org.nasdanika.emf.persistence.GitMarkerFactory. Examples For examples see Exec tests. MS Excel resources Loading models from MS Excel resources can be done with org.nasdanika.emf.persistence.ExcelResourceFactory class. This class takes care of reading and updating the workbook on save. Loading of model elements from sheets and rows shall be implemented by subclasses. You can find an example/test case in TestExcel."},"architecture/containers/kubernetes/model/Cluster.html":{"path":"Architecture/Containers/Kubernetes/kubernetes/Cluster","action-uuid":"0b5d8e57-a9d4-4c3d-be85-95d4389de670","title":"Cluster","content":"org.nasdanika.architecture.containers.kubernetes.Cluster Supertypes ArchitectureElement Subtypes Kubernetes Service"},"html/models/bootstrap/model/Alert.html":{"path":"HTML/Models/Bootstrap/bootstrap/Alert","action-uuid":"1d89b1cd-f1a3-4f5f-8e2a-2e07391c04c4","title":"Alert","content":"org.nasdanika.html.model.bootstrap.Alert Supertypes Div Attribute summary Attribute details color : Color Type Color Cardinality 0..1 Changeable true Derived false  color : Color Type Color Cardinality 0..1 Changeable true Derived false Type Color Cardinality 0..1 Changeable true Derived false"},"html/models/bootstrap/model/Page.html":{"path":"HTML/Models/Bootstrap/bootstrap/Page","action-uuid":"f3df7d04-4b07-48c7-870c-54ceb738bd74","title":"Page","content":"org.nasdanika.html.model.bootstrap.Page HTML page with bootstrap elements in the head - meta, stylesheets, and scripts. Overview video in Russian. Supertypes Page Attribute summary Attribute details cdn : EBoolean If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false theme : Theme Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false  cdn : EBoolean If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false theme : Theme Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false If this attribute is true (default) then a generated page contains stylesheet and script elements pointing to Bootstrap CDN (Content Delivery Network). Type EBoolean Cardinality 0..1 Changeable true Derived false Bootstrap theme. This attribute is applicable only if CDN is set to true. In this case Bootstrap stylesheets added to the page point to a specific theme. Type Theme Cardinality 0..1 Changeable true Derived false"},"html/models/html/model/ScriptReference.html":{"path":"HTML/Models/HTML/html/ScriptReference","action-uuid":"cf14b447-658d-4d93-b8bd-dc8c7c6ec14d","title":"ScriptReference","content":"org.nasdanika.html.model.html.ScriptReference References external script. Supertypes ModelElement Attribute summary Attribute details src : EString Script URL. Type EString Cardinality 1 Changeable true Derived false  src : EString Script URL. Type EString Cardinality 1 Changeable true Derived false Script URL. Type EString Cardinality 1 Changeable true Derived false"},"glossary.html":{"action-uuid":"46d60d77-d807-4f9b-993f-d6de060b8983","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"html/models/bootstrap/model/Form.html":{"path":"HTML/Models/Bootstrap/bootstrap/Form","action-uuid":"c0ae29c0-6e63-43f0-ba96-5e27889c62e5","title":"Form","content":"org.nasdanika.html.model.bootstrap.Form"},"architecture/core/model/View.html":{"path":"Architecture/Core/core/View","action-uuid":"2b396767-651b-4149-9003-7b25cf81362d","title":"View","content":"org.nasdanika.architecture.core.View Supertypes ModelElement Referrers ModelElement Viewpoint Reference summary Reference details elements : ViewElement* View elements Type ViewElement Cardinality 0..* Changeable true Derived false Key id viewpoint : Viewpoint View type Type Viewpoint Cardinality 0..1 Changeable true Derived false Opposite instances  elements : ViewElement* View elements Type ViewElement Cardinality 0..* Changeable true Derived false Key id viewpoint : Viewpoint View type Type Viewpoint Cardinality 0..1 Changeable true Derived false Opposite instances View elements Type ViewElement Cardinality 0..* Changeable true Derived false Key id View type Type Viewpoint Cardinality 0..1 Changeable true Derived false Opposite instances"},"architecture/cloud/azure/core/model/AvailabilityZone.html":{"path":"Architecture/Cloud/Azure/Core/core/Availability Zone","action-uuid":"d22c78f3-f9c2-4faf-be9b-371304530032","title":"Availability Zone","content":"org.nasdanika.architecture.cloud.azure.core.AvailabilityZone Azure Availability Zones are unique physical locations within an Azure region and offer high availability to protect your applications and data from datacenter failures. Each zone is made up of one or more datacenters equipped with independent power, cooling, and networking. The physical separation of availability zones within a region protects apps and data from facility-level issues. Zone-redundant services replicate your apps and data across Azure Availability Zones to protect from single points of failure. See Azure Global Infrastructure for more details. Supertypes Location Referrers Region"},"core/exec/model/List.html":{"path":"Core/Exec/exec/List","action-uuid":"5ce6f6e1-656a-4cb5-9d04-b22132ceca91","title":"List","content":"org.nasdanika.exec.List A list of objects. Examples Flat exec-list:\n  elements:\n    - content-text: Hello\n    - content-text: World    \n Nested exec-list:\n  elements:\n    - content-text: Hello\n    - exec-list: \n        elements:\n          content-text: World    \n Supertypes ModelElement Reference summary Reference details elements : EObject* Type EObject Cardinality 1..* Changeable true Derived false  elements : EObject* Type EObject Cardinality 1..* Changeable true Derived false Type EObject Cardinality 1..* Changeable true Derived false"},"architecture/core/model/Impact.html":{"path":"Architecture/Core/core/Impact","action-uuid":"13f28420-f67f-43f2-99d7-2ebc86c7665e","title":"Impact","content":"org.nasdanika.architecture.core.Impact Impacts of the containing increment on architecture elements. E.g. creation of a new element, modification or retirement (deletion) of an existing. Supertypes ModelElement Referrers ArchitectureElement Stage Reference summary Reference details elements : ArchitectureElement* Impacted element(s) Type ArchitectureElement Cardinality 0..* Changeable true Derived false Opposite impactedBy type : ImpactType Impact type Type ImpactType Cardinality 0..1 Changeable true Derived false  elements : ArchitectureElement* Impacted element(s) Type ArchitectureElement Cardinality 0..* Changeable true Derived false Opposite impactedBy type : ImpactType Impact type Type ImpactType Cardinality 0..1 Changeable true Derived false Impacted element(s) Type ArchitectureElement Cardinality 0..* Changeable true Derived false Opposite impactedBy Impact type Type ImpactType Cardinality 0..1 Changeable true Derived false"},"architecture/cloud/azure/core/model/AzureElement.html":{"path":"Architecture/Cloud/Azure/Core/core/AzureElement","action-uuid":"83e73e9d-1734-40af-9013-bbf8a302be37","title":"AzureElement","content":"org.nasdanika.architecture.cloud.azure.core.AzureElement Base class for Azure architecture elements Supertypes ArchitectureElement Subtypes Disk Type Location ManagementGroupElement RegionPair Resource Resource Group Virtual Machine Image Virtual Machine Size"},"html/models/bootstrap/model/Container.html":{"path":"HTML/Models/Bootstrap/bootstrap/Container","action-uuid":"3788e896-2830-4758-96ae-19f96a05b2eb","title":"Container","content":"org.nasdanika.html.model.bootstrap.Container Bootstrap layout container contains rows which in turn contain columns. Supertypes BootstrapElement Attribute summary Reference summary Attribute details fluid : EBoolean Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false Reference details rows : Row* Container rows. Type Row Cardinality 0..* Changeable true Derived false   fluid : EBoolean Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false Fluid container spans the entire width of the viewport. Type EBoolean Cardinality 0..1 Changeable true Derived false rows : Row* Container rows. Type Row Cardinality 0..* Changeable true Derived false Container rows. Type Row Cardinality 0..* Changeable true Derived false"},"html/models/bootstrap/model/ListGroup.html":{"path":"HTML/Models/Bootstrap/bootstrap/ListGroup","action-uuid":"f08e7898-ad7e-4560-b80f-1a43486a340b","title":"ListGroup","content":"org.nasdanika.html.model.bootstrap.ListGroup"}}